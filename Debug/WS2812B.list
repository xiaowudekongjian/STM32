
ws2812b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e94  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003fa0  08003fa0  00004fa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe8  08003fe8  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003fe8  08003fe8  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003fe8  08003fe8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe8  08003fe8  00004fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fec  08003fec  00004fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003ff0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001924  2000005c  0800404c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001980  0800404c  00005980  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000891d  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cce  00000000  00000000  0000d9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0000f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000814  00000000  00000000  00010100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017255  00000000  00000000  00010914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7ca  00000000  00000000  00027b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008814c  00000000  00000000  00034333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc47f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000302c  00000000  00000000  000bc4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000bf4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f88 	.word	0x08003f88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003f88 	.word	0x08003f88

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2f>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a2c:	bf24      	itt	cs
 8000a2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a36:	d90d      	bls.n	8000a54 <__aeabi_d2f+0x30>
 8000a38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a4c:	bf08      	it	eq
 8000a4e:	f020 0001 	biceq.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a58:	d121      	bne.n	8000a9e <__aeabi_d2f+0x7a>
 8000a5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a5e:	bfbc      	itt	lt
 8000a60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a64:	4770      	bxlt	lr
 8000a66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a6e:	f1c2 0218 	rsb	r2, r2, #24
 8000a72:	f1c2 0c20 	rsb	ip, r2, #32
 8000a76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7e:	bf18      	it	ne
 8000a80:	f040 0001 	orrne.w	r0, r0, #1
 8000a84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a90:	ea40 000c 	orr.w	r0, r0, ip
 8000a94:	fa23 f302 	lsr.w	r3, r3, r2
 8000a98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a9c:	e7cc      	b.n	8000a38 <__aeabi_d2f+0x14>
 8000a9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa2:	d107      	bne.n	8000ab4 <__aeabi_d2f+0x90>
 8000aa4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa8:	bf1e      	ittt	ne
 8000aaa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab2:	4770      	bxne	lr
 8000ab4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000abc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_frsub>:
 8000ac4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ac8:	e002      	b.n	8000ad0 <__addsf3>
 8000aca:	bf00      	nop

08000acc <__aeabi_fsub>:
 8000acc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad0 <__addsf3>:
 8000ad0:	0042      	lsls	r2, r0, #1
 8000ad2:	bf1f      	itttt	ne
 8000ad4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad8:	ea92 0f03 	teqne	r2, r3
 8000adc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae4:	d06a      	beq.n	8000bbc <__addsf3+0xec>
 8000ae6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aee:	bfc1      	itttt	gt
 8000af0:	18d2      	addgt	r2, r2, r3
 8000af2:	4041      	eorgt	r1, r0
 8000af4:	4048      	eorgt	r0, r1
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	bfb8      	it	lt
 8000afa:	425b      	neglt	r3, r3
 8000afc:	2b19      	cmp	r3, #25
 8000afe:	bf88      	it	hi
 8000b00:	4770      	bxhi	lr
 8000b02:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b06:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b1e:	bf18      	it	ne
 8000b20:	4249      	negne	r1, r1
 8000b22:	ea92 0f03 	teq	r2, r3
 8000b26:	d03f      	beq.n	8000ba8 <__addsf3+0xd8>
 8000b28:	f1a2 0201 	sub.w	r2, r2, #1
 8000b2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b30:	eb10 000c 	adds.w	r0, r0, ip
 8000b34:	f1c3 0320 	rsb	r3, r3, #32
 8000b38:	fa01 f103 	lsl.w	r1, r1, r3
 8000b3c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b40:	d502      	bpl.n	8000b48 <__addsf3+0x78>
 8000b42:	4249      	negs	r1, r1
 8000b44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b48:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b4c:	d313      	bcc.n	8000b76 <__addsf3+0xa6>
 8000b4e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b52:	d306      	bcc.n	8000b62 <__addsf3+0x92>
 8000b54:	0840      	lsrs	r0, r0, #1
 8000b56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5a:	f102 0201 	add.w	r2, r2, #1
 8000b5e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b60:	d251      	bcs.n	8000c06 <__addsf3+0x136>
 8000b62:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6a:	bf08      	it	eq
 8000b6c:	f020 0001 	biceq.w	r0, r0, #1
 8000b70:	ea40 0003 	orr.w	r0, r0, r3
 8000b74:	4770      	bx	lr
 8000b76:	0049      	lsls	r1, r1, #1
 8000b78:	eb40 0000 	adc.w	r0, r0, r0
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b84:	d2ed      	bcs.n	8000b62 <__addsf3+0x92>
 8000b86:	fab0 fc80 	clz	ip, r0
 8000b8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b96:	bfaa      	itet	ge
 8000b98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b9c:	4252      	neglt	r2, r2
 8000b9e:	4318      	orrge	r0, r3
 8000ba0:	bfbc      	itt	lt
 8000ba2:	40d0      	lsrlt	r0, r2
 8000ba4:	4318      	orrlt	r0, r3
 8000ba6:	4770      	bx	lr
 8000ba8:	f092 0f00 	teq	r2, #0
 8000bac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb0:	bf06      	itte	eq
 8000bb2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bb6:	3201      	addeq	r2, #1
 8000bb8:	3b01      	subne	r3, #1
 8000bba:	e7b5      	b.n	8000b28 <__addsf3+0x58>
 8000bbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc4:	bf18      	it	ne
 8000bc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bca:	d021      	beq.n	8000c10 <__addsf3+0x140>
 8000bcc:	ea92 0f03 	teq	r2, r3
 8000bd0:	d004      	beq.n	8000bdc <__addsf3+0x10c>
 8000bd2:	f092 0f00 	teq	r2, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	4608      	moveq	r0, r1
 8000bda:	4770      	bx	lr
 8000bdc:	ea90 0f01 	teq	r0, r1
 8000be0:	bf1c      	itt	ne
 8000be2:	2000      	movne	r0, #0
 8000be4:	4770      	bxne	lr
 8000be6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bea:	d104      	bne.n	8000bf6 <__addsf3+0x126>
 8000bec:	0040      	lsls	r0, r0, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	4770      	bx	lr
 8000bf6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfa:	bf3c      	itt	cc
 8000bfc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c00:	4770      	bxcc	lr
 8000c02:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c06:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0e:	4770      	bx	lr
 8000c10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c14:	bf16      	itet	ne
 8000c16:	4608      	movne	r0, r1
 8000c18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c1c:	4601      	movne	r1, r0
 8000c1e:	0242      	lsls	r2, r0, #9
 8000c20:	bf06      	itte	eq
 8000c22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c26:	ea90 0f01 	teqeq	r0, r1
 8000c2a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_ui2f>:
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e004      	b.n	8000c40 <__aeabi_i2f+0x8>
 8000c36:	bf00      	nop

08000c38 <__aeabi_i2f>:
 8000c38:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c3c:	bf48      	it	mi
 8000c3e:	4240      	negmi	r0, r0
 8000c40:	ea5f 0c00 	movs.w	ip, r0
 8000c44:	bf08      	it	eq
 8000c46:	4770      	bxeq	lr
 8000c48:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	e01c      	b.n	8000c8e <__aeabi_l2f+0x2a>

08000c54 <__aeabi_ul2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e00a      	b.n	8000c78 <__aeabi_l2f+0x14>
 8000c62:	bf00      	nop

08000c64 <__aeabi_l2f>:
 8000c64:	ea50 0201 	orrs.w	r2, r0, r1
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__aeabi_l2f+0x14>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	ea5f 0c01 	movs.w	ip, r1
 8000c7c:	bf02      	ittt	eq
 8000c7e:	4684      	moveq	ip, r0
 8000c80:	4601      	moveq	r1, r0
 8000c82:	2000      	moveq	r0, #0
 8000c84:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c88:	bf08      	it	eq
 8000c8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c92:	fabc f28c 	clz	r2, ip
 8000c96:	3a08      	subs	r2, #8
 8000c98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c9c:	db10      	blt.n	8000cc0 <__aeabi_l2f+0x5c>
 8000c9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca8:	f1c2 0220 	rsb	r2, r2, #32
 8000cac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb4:	eb43 0002 	adc.w	r0, r3, r2
 8000cb8:	bf08      	it	eq
 8000cba:	f020 0001 	biceq.w	r0, r0, #1
 8000cbe:	4770      	bx	lr
 8000cc0:	f102 0220 	add.w	r2, r2, #32
 8000cc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_fmul>:
 8000ce0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce8:	bf1e      	ittt	ne
 8000cea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cee:	ea92 0f0c 	teqne	r2, ip
 8000cf2:	ea93 0f0c 	teqne	r3, ip
 8000cf6:	d06f      	beq.n	8000dd8 <__aeabi_fmul+0xf8>
 8000cf8:	441a      	add	r2, r3
 8000cfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000cfe:	0240      	lsls	r0, r0, #9
 8000d00:	bf18      	it	ne
 8000d02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d06:	d01e      	beq.n	8000d46 <__aeabi_fmul+0x66>
 8000d08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d14:	fba0 3101 	umull	r3, r1, r0, r1
 8000d18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d1c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d20:	bf3e      	ittt	cc
 8000d22:	0049      	lslcc	r1, r1, #1
 8000d24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d28:	005b      	lslcc	r3, r3, #1
 8000d2a:	ea40 0001 	orr.w	r0, r0, r1
 8000d2e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d32:	2afd      	cmp	r2, #253	@ 0xfd
 8000d34:	d81d      	bhi.n	8000d72 <__aeabi_fmul+0x92>
 8000d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	4770      	bx	lr
 8000d46:	f090 0f00 	teq	r0, #0
 8000d4a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	0249      	lsleq	r1, r1, #9
 8000d52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5a:	3a7f      	subs	r2, #127	@ 0x7f
 8000d5c:	bfc2      	ittt	gt
 8000d5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d66:	4770      	bxgt	lr
 8000d68:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	dc5d      	bgt.n	8000e30 <__aeabi_fmul+0x150>
 8000d74:	f112 0f19 	cmn.w	r2, #25
 8000d78:	bfdc      	itt	le
 8000d7a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d7e:	4770      	bxle	lr
 8000d80:	f1c2 0200 	rsb	r2, r2, #0
 8000d84:	0041      	lsls	r1, r0, #1
 8000d86:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8a:	f1c2 0220 	rsb	r2, r2, #32
 8000d8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d96:	f140 0000 	adc.w	r0, r0, #0
 8000d9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d9e:	bf08      	it	eq
 8000da0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da4:	4770      	bx	lr
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0040      	lsleq	r0, r0, #1
 8000db2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000db6:	3a01      	subeq	r2, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xce>
 8000dba:	ea40 000c 	orr.w	r0, r0, ip
 8000dbe:	f093 0f00 	teq	r3, #0
 8000dc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0049      	lsleq	r1, r1, #1
 8000dca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dce:	3b01      	subeq	r3, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xe6>
 8000dd2:	ea41 010c 	orr.w	r1, r1, ip
 8000dd6:	e78f      	b.n	8000cf8 <__aeabi_fmul+0x18>
 8000dd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ddc:	ea92 0f0c 	teq	r2, ip
 8000de0:	bf18      	it	ne
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d00a      	beq.n	8000dfe <__aeabi_fmul+0x11e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df2:	d1d8      	bne.n	8000da6 <__aeabi_fmul+0xc6>
 8000df4:	ea80 0001 	eor.w	r0, r0, r1
 8000df8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	bf17      	itett	ne
 8000e04:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e08:	4608      	moveq	r0, r1
 8000e0a:	f091 0f00 	teqne	r1, #0
 8000e0e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e12:	d014      	beq.n	8000e3e <__aeabi_fmul+0x15e>
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	d101      	bne.n	8000e1e <__aeabi_fmul+0x13e>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	d10f      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e1e:	ea93 0f0c 	teq	r3, ip
 8000e22:	d103      	bne.n	8000e2c <__aeabi_fmul+0x14c>
 8000e24:	024b      	lsls	r3, r1, #9
 8000e26:	bf18      	it	ne
 8000e28:	4608      	movne	r0, r1
 8000e2a:	d108      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e3c:	4770      	bx	lr
 8000e3e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e42:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_fdiv>:
 8000e48:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e50:	bf1e      	ittt	ne
 8000e52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e56:	ea92 0f0c 	teqne	r2, ip
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d069      	beq.n	8000f34 <__aeabi_fdiv+0xec>
 8000e60:	eba2 0203 	sub.w	r2, r2, r3
 8000e64:	ea80 0c01 	eor.w	ip, r0, r1
 8000e68:	0249      	lsls	r1, r1, #9
 8000e6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e6e:	d037      	beq.n	8000ee0 <__aeabi_fdiv+0x98>
 8000e70:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e80:	428b      	cmp	r3, r1
 8000e82:	bf38      	it	cc
 8000e84:	005b      	lslcc	r3, r3, #1
 8000e86:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	bf24      	itt	cs
 8000e92:	1a5b      	subcs	r3, r3, r1
 8000e94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eaa:	bf24      	itt	cs
 8000eac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb8:	bf24      	itt	cs
 8000eba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ebe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	bf18      	it	ne
 8000ec6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eca:	d1e0      	bne.n	8000e8e <__aeabi_fdiv+0x46>
 8000ecc:	2afd      	cmp	r2, #253	@ 0xfd
 8000ece:	f63f af50 	bhi.w	8000d72 <__aeabi_fmul+0x92>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed8:	bf08      	it	eq
 8000eda:	f020 0001 	biceq.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee8:	327f      	adds	r2, #127	@ 0x7f
 8000eea:	bfc2      	ittt	gt
 8000eec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef4:	4770      	bxgt	lr
 8000ef6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	3a01      	subs	r2, #1
 8000f00:	e737      	b.n	8000d72 <__aeabi_fmul+0x92>
 8000f02:	f092 0f00 	teq	r2, #0
 8000f06:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0040      	lsleq	r0, r0, #1
 8000f0e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f12:	3a01      	subeq	r2, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xc2>
 8000f16:	ea40 000c 	orr.w	r0, r0, ip
 8000f1a:	f093 0f00 	teq	r3, #0
 8000f1e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0049      	lsleq	r1, r1, #1
 8000f26:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2a:	3b01      	subeq	r3, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xda>
 8000f2e:	ea41 010c 	orr.w	r1, r1, ip
 8000f32:	e795      	b.n	8000e60 <__aeabi_fdiv+0x18>
 8000f34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d108      	bne.n	8000f50 <__aeabi_fdiv+0x108>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	f47f af7d 	bne.w	8000e3e <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	f47f af70 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e776      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f50:	ea93 0f0c 	teq	r3, ip
 8000f54:	d104      	bne.n	8000f60 <__aeabi_fdiv+0x118>
 8000f56:	024b      	lsls	r3, r1, #9
 8000f58:	f43f af4c 	beq.w	8000df4 <__aeabi_fmul+0x114>
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f64:	bf18      	it	ne
 8000f66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6a:	d1ca      	bne.n	8000f02 <__aeabi_fdiv+0xba>
 8000f6c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f70:	f47f af5c 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f74:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f78:	f47f af3c 	bne.w	8000df4 <__aeabi_fmul+0x114>
 8000f7c:	e75f      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f7e:	bf00      	nop

08000f80 <__gesf2>:
 8000f80:	f04f 3cff 	mov.w	ip, #4294967295
 8000f84:	e006      	b.n	8000f94 <__cmpsf2+0x4>
 8000f86:	bf00      	nop

08000f88 <__lesf2>:
 8000f88:	f04f 0c01 	mov.w	ip, #1
 8000f8c:	e002      	b.n	8000f94 <__cmpsf2+0x4>
 8000f8e:	bf00      	nop

08000f90 <__cmpsf2>:
 8000f90:	f04f 0c01 	mov.w	ip, #1
 8000f94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	bf18      	it	ne
 8000fa6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000faa:	d011      	beq.n	8000fd0 <__cmpsf2+0x40>
 8000fac:	b001      	add	sp, #4
 8000fae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb2:	bf18      	it	ne
 8000fb4:	ea90 0f01 	teqne	r0, r1
 8000fb8:	bf58      	it	pl
 8000fba:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fbe:	bf88      	it	hi
 8000fc0:	17c8      	asrhi	r0, r1, #31
 8000fc2:	bf38      	it	cc
 8000fc4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fc8:	bf18      	it	ne
 8000fca:	f040 0001 	orrne.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd4:	d102      	bne.n	8000fdc <__cmpsf2+0x4c>
 8000fd6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fda:	d105      	bne.n	8000fe8 <__cmpsf2+0x58>
 8000fdc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe0:	d1e4      	bne.n	8000fac <__cmpsf2+0x1c>
 8000fe2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fe6:	d0e1      	beq.n	8000fac <__cmpsf2+0x1c>
 8000fe8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__aeabi_cfrcmple>:
 8000ff0:	4684      	mov	ip, r0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	4661      	mov	r1, ip
 8000ff6:	e7ff      	b.n	8000ff8 <__aeabi_cfcmpeq>

08000ff8 <__aeabi_cfcmpeq>:
 8000ff8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffa:	f7ff ffc9 	bl	8000f90 <__cmpsf2>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	bf48      	it	mi
 8001002:	f110 0f00 	cmnmi.w	r0, #0
 8001006:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001008 <__aeabi_fcmpeq>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff fff4 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001010:	bf0c      	ite	eq
 8001012:	2001      	moveq	r0, #1
 8001014:	2000      	movne	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmplt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffea 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmple>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffe0 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001038:	bf94      	ite	ls
 800103a:	2001      	movls	r0, #1
 800103c:	2000      	movhi	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmpge>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffd2 	bl	8000ff0 <__aeabi_cfrcmple>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpgt>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffc8 	bl	8000ff0 <__aeabi_cfrcmple>
 8001060:	bf34      	ite	cc
 8001062:	2001      	movcc	r0, #1
 8001064:	2000      	movcs	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpun>:
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__aeabi_fcmpun+0x14>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d108      	bne.n	8001092 <__aeabi_fcmpun+0x26>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d102      	bne.n	800108c <__aeabi_fcmpun+0x20>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d102      	bne.n	8001092 <__aeabi_fcmpun+0x26>
 800108c:	f04f 0000 	mov.w	r0, #0
 8001090:	4770      	bx	lr
 8001092:	f04f 0001 	mov.w	r0, #1
 8001096:	4770      	bx	lr

08001098 <__aeabi_f2uiz>:
 8001098:	0042      	lsls	r2, r0, #1
 800109a:	d20e      	bcs.n	80010ba <__aeabi_f2uiz+0x22>
 800109c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010a0:	d30b      	bcc.n	80010ba <__aeabi_f2uiz+0x22>
 80010a2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010aa:	d409      	bmi.n	80010c0 <__aeabi_f2uiz+0x28>
 80010ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	4770      	bx	lr
 80010ba:	f04f 0000 	mov.w	r0, #0
 80010be:	4770      	bx	lr
 80010c0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010c4:	d101      	bne.n	80010ca <__aeabi_f2uiz+0x32>
 80010c6:	0242      	lsls	r2, r0, #9
 80010c8:	d102      	bne.n	80010d0 <__aeabi_f2uiz+0x38>
 80010ca:	f04f 30ff 	mov.w	r0, #4294967295
 80010ce:	4770      	bx	lr
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_DMA_Init+0x38>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001110 <MX_DMA_Init+0x38>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_DMA_Init+0x38>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2011      	movs	r0, #17
 80010fc:	f000 fb9f 	bl	800183e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001100:	2011      	movs	r0, #17
 8001102:	f000 fbb8 	bl	8001876 <HAL_NVIC_EnableIRQ>

}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001128:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <MX_GPIO_Init+0x90>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a1d      	ldr	r2, [pc, #116]	@ (80011a4 <MX_GPIO_Init+0x90>)
 800112e:	f043 0310 	orr.w	r3, r3, #16
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <MX_GPIO_Init+0x90>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0310 	and.w	r3, r3, #16
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <MX_GPIO_Init+0x90>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <MX_GPIO_Init+0x90>)
 8001146:	f043 0320 	orr.w	r3, r3, #32
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_GPIO_Init+0x90>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0320 	and.w	r3, r3, #32
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <MX_GPIO_Init+0x90>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a11      	ldr	r2, [pc, #68]	@ (80011a4 <MX_GPIO_Init+0x90>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_GPIO_Init+0x90>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001176:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <MX_GPIO_Init+0x94>)
 8001178:	f000 ff0a 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800117c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2302      	movs	r3, #2
 800118c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_GPIO_Init+0x94>)
 8001196:	f000 fd77 	bl	8001c88 <HAL_GPIO_Init>

}
 800119a:	bf00      	nop
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40011000 	.word	0x40011000

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HSVColor HSV ={0,1,1};
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <main+0x30>)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011bc:	f000 f9e2 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c0:	f000 f80e 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c4:	f7ff ffa6 	bl	8001114 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c8:	f7ff ff86 	bl	80010d8 <MX_DMA_Init>
  MX_TIM2_Init();
 80011cc:	f000 f8c2 	bl	8001354 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  PWM_WS2812B_Rainbow(&HSV);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fc64 	bl	8003aa0 <PWM_WS2812B_Rainbow>
 80011d8:	e7fa      	b.n	80011d0 <main+0x24>
 80011da:	bf00      	nop
 80011dc:	08003fa0 	.word	0x08003fa0

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b090      	sub	sp, #64	@ 0x40
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0318 	add.w	r3, r7, #24
 80011ea:	2228      	movs	r2, #40	@ 0x28
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fcd2 	bl	8003b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001202:	2301      	movs	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001206:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800120a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	2302      	movs	r3, #2
 8001216:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001218:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800121c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800121e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fec9 	bl	8001fc0 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001234:	f000 f819 	bl	800126a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123c:	2302      	movs	r3, #2
 800123e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2102      	movs	r1, #2
 8001252:	4618      	mov	r0, r3
 8001254:	f001 f936 	bl	80024c4 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800125e:	f000 f804 	bl	800126a <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3740      	adds	r7, #64	@ 0x40
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126e:	b672      	cpsid	i
}
 8001270:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001272:	bf00      	nop
 8001274:	e7fd      	b.n	8001272 <Error_Handler+0x8>
	...

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_MspInit+0x5c>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <HAL_MspInit+0x5c>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <HAL_MspInit+0x5c>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <HAL_MspInit+0x5c>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <HAL_MspInit+0x5c>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <HAL_MspInit+0x5c>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_MspInit+0x60>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <HAL_MspInit+0x60>)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010000 	.word	0x40010000

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <NMI_Handler+0x4>

080012e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <MemManage_Handler+0x4>

080012f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <UsageFault_Handler+0x4>

08001304 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132c:	f000 f970 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <DMA1_Channel7_IRQHandler+0x10>)
 800133a:	f000 fb71 	bl	8001a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200000c0 	.word	0x200000c0

08001348 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	@ 0x38
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001384:	4b2c      	ldr	r3, [pc, #176]	@ (8001438 <MX_TIM2_Init+0xe4>)
 8001386:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800138a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800138c:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <MX_TIM2_Init+0xe4>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <MX_TIM2_Init+0xe4>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8001398:	4b27      	ldr	r3, [pc, #156]	@ (8001438 <MX_TIM2_Init+0xe4>)
 800139a:	2259      	movs	r2, #89	@ 0x59
 800139c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139e:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <MX_TIM2_Init+0xe4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <MX_TIM2_Init+0xe4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013aa:	4823      	ldr	r0, [pc, #140]	@ (8001438 <MX_TIM2_Init+0xe4>)
 80013ac:	f001 f9e6 	bl	800277c <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80013b6:	f7ff ff58 	bl	800126a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013c4:	4619      	mov	r1, r3
 80013c6:	481c      	ldr	r0, [pc, #112]	@ (8001438 <MX_TIM2_Init+0xe4>)
 80013c8:	f001 fce4 	bl	8002d94 <HAL_TIM_ConfigClockSource>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013d2:	f7ff ff4a 	bl	800126a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013d6:	4818      	ldr	r0, [pc, #96]	@ (8001438 <MX_TIM2_Init+0xe4>)
 80013d8:	f001 fa1f 	bl	800281a <HAL_TIM_PWM_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80013e2:	f7ff ff42 	bl	800126a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4619      	mov	r1, r3
 80013f4:	4810      	ldr	r0, [pc, #64]	@ (8001438 <MX_TIM2_Init+0xe4>)
 80013f6:	f002 f931 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001400:	f7ff ff33 	bl	800126a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001404:	2360      	movs	r3, #96	@ 0x60
 8001406:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2204      	movs	r2, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4807      	ldr	r0, [pc, #28]	@ (8001438 <MX_TIM2_Init+0xe4>)
 800141c:	f001 fbf8 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001426:	f7ff ff20 	bl	800126a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800142a:	4803      	ldr	r0, [pc, #12]	@ (8001438 <MX_TIM2_Init+0xe4>)
 800142c:	f000 f854 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	@ 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000078 	.word	0x20000078

0800143c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800144c:	d13a      	bne.n	80014c4 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800144e:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <HAL_TIM_Base_MspInit+0x90>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a1e      	ldr	r2, [pc, #120]	@ (80014cc <HAL_TIM_Base_MspInit+0x90>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <HAL_TIM_Base_MspInit+0x90>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 8001468:	4a1a      	ldr	r2, [pc, #104]	@ (80014d4 <HAL_TIM_Base_MspInit+0x98>)
 800146a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 800146e:	2210      	movs	r2, #16
 8001470:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 800147a:	2280      	movs	r2, #128	@ 0x80
 800147c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 8001480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001484:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 8001488:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800148c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001494:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 8001496:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800149a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 800149e:	f000 fa05 	bl	80018ac <HAL_DMA_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80014a8:	f7ff fedf 	bl	800126a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a08      	ldr	r2, [pc, #32]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80014b2:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a05      	ldr	r2, [pc, #20]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 80014bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80014be:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <HAL_TIM_Base_MspInit+0x94>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	200000c0 	.word	0x200000c0
 80014d4:	40020080 	.word	0x40020080

080014d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014f6:	d117      	bne.n	8001528 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <HAL_TIM_MspPostInit+0x58>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001530 <HAL_TIM_MspPostInit+0x58>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_TIM_MspPostInit+0x58>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001510:	2302      	movs	r3, #2
 8001512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2302      	movs	r3, #2
 800151a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	4619      	mov	r1, r3
 8001522:	4804      	ldr	r0, [pc, #16]	@ (8001534 <HAL_TIM_MspPostInit+0x5c>)
 8001524:	f000 fbb0 	bl	8001c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	40010800 	.word	0x40010800

08001538 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001538:	f7ff ff06 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800153c:	480b      	ldr	r0, [pc, #44]	@ (800156c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800153e:	490c      	ldr	r1, [pc, #48]	@ (8001570 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001540:	4a0c      	ldr	r2, [pc, #48]	@ (8001574 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001554:	4c09      	ldr	r4, [pc, #36]	@ (800157c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001562:	f002 fb27 	bl	8003bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001566:	f7ff fe21 	bl	80011ac <main>
  bx lr
 800156a:	4770      	bx	lr
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001574:	08003ff0 	.word	0x08003ff0
  ldr r2, =_sbss
 8001578:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800157c:	20001980 	.word	0x20001980

08001580 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC1_2_IRQHandler>
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <HAL_Init+0x28>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <HAL_Init+0x28>)
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 f947 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	200f      	movs	r0, #15
 800159c:	f000 f808 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fe6a 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40022000 	.word	0x40022000

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_InitTick+0x54>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_InitTick+0x58>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f95f 	bl	8001892 <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f000 f927 	bl	800183e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	@ (800160c <HAL_InitTick+0x5c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000000 	.word	0x20000000
 8001608:	20000008 	.word	0x20000008
 800160c:	20000004 	.word	0x20000004

08001610 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <HAL_IncTick+0x1c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <HAL_IncTick+0x20>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a03      	ldr	r2, [pc, #12]	@ (8001630 <HAL_IncTick+0x20>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000008 	.word	0x20000008
 8001630:	20000104 	.word	0x20000104

08001634 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b02      	ldr	r3, [pc, #8]	@ (8001644 <HAL_GetTick+0x10>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000104 	.word	0x20000104

08001648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff fff0 	bl	8001634 <HAL_GetTick>
 8001654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d005      	beq.n	800166e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_Delay+0x44>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800166e:	bf00      	nop
 8001670:	f7ff ffe0 	bl	8001634 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d8f7      	bhi.n	8001670 <HAL_Delay+0x28>
  {
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008

08001690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016ac:	4013      	ands	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c2:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	60d3      	str	r3, [r2, #12]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <__NVIC_GetPriorityGrouping+0x18>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	f003 0307 	and.w	r3, r3, #7
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	db0b      	blt.n	800171e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	f003 021f 	and.w	r2, r3, #31
 800170c:	4906      	ldr	r1, [pc, #24]	@ (8001728 <__NVIC_EnableIRQ+0x34>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	2001      	movs	r0, #1
 8001716:	fa00 f202 	lsl.w	r2, r0, r2
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	@ (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	@ (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	@ 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	@ 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017f4:	d301      	bcc.n	80017fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <SysTick_Config+0x40>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001802:	210f      	movs	r1, #15
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f7ff ff90 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <SysTick_Config+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <SysTick_Config+0x40>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff2d 	bl	8001690 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff42 	bl	80016d8 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff90 	bl	8001780 <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5f 	bl	800172c <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff35 	bl	80016f4 <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa2 	bl	80017e4 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e043      	b.n	800194a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <HAL_DMA_Init+0xa8>)
 80018ca:	4413      	add	r3, r2
 80018cc:	4a22      	ldr	r2, [pc, #136]	@ (8001958 <HAL_DMA_Init+0xac>)
 80018ce:	fba2 2303 	umull	r2, r3, r2, r3
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	009a      	lsls	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a1f      	ldr	r2, [pc, #124]	@ (800195c <HAL_DMA_Init+0xb0>)
 80018de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018f6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	bffdfff8 	.word	0xbffdfff8
 8001958:	cccccccd 	.word	0xcccccccd
 800195c:	40020000 	.word	0x40020000

08001960 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_DMA_Start_IT+0x20>
 800197c:	2302      	movs	r3, #2
 800197e:	e04b      	b.n	8001a18 <HAL_DMA_Start_IT+0xb8>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d13a      	bne.n	8001a0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 f937 	bl	8001c2c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 020e 	orr.w	r2, r2, #14
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e00f      	b.n	80019f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0204 	bic.w	r2, r2, #4
 80019e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 020a 	orr.w	r2, r2, #10
 80019f6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	e005      	b.n	8001a16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a12:	2302      	movs	r3, #2
 8001a14:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d04f      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0xc8>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d04a      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d107      	bne.n	8001a70 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0204 	bic.w	r2, r2, #4
 8001a6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a66      	ldr	r2, [pc, #408]	@ (8001c10 <HAL_DMA_IRQHandler+0x1f0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d029      	beq.n	8001ace <HAL_DMA_IRQHandler+0xae>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a65      	ldr	r2, [pc, #404]	@ (8001c14 <HAL_DMA_IRQHandler+0x1f4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d022      	beq.n	8001aca <HAL_DMA_IRQHandler+0xaa>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a63      	ldr	r2, [pc, #396]	@ (8001c18 <HAL_DMA_IRQHandler+0x1f8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01a      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0xa4>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a62      	ldr	r2, [pc, #392]	@ (8001c1c <HAL_DMA_IRQHandler+0x1fc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d012      	beq.n	8001abe <HAL_DMA_IRQHandler+0x9e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a60      	ldr	r2, [pc, #384]	@ (8001c20 <HAL_DMA_IRQHandler+0x200>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00a      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x98>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a5f      	ldr	r2, [pc, #380]	@ (8001c24 <HAL_DMA_IRQHandler+0x204>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d102      	bne.n	8001ab2 <HAL_DMA_IRQHandler+0x92>
 8001aac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ab0:	e00e      	b.n	8001ad0 <HAL_DMA_IRQHandler+0xb0>
 8001ab2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001ab6:	e00b      	b.n	8001ad0 <HAL_DMA_IRQHandler+0xb0>
 8001ab8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001abc:	e008      	b.n	8001ad0 <HAL_DMA_IRQHandler+0xb0>
 8001abe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ac2:	e005      	b.n	8001ad0 <HAL_DMA_IRQHandler+0xb0>
 8001ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ac8:	e002      	b.n	8001ad0 <HAL_DMA_IRQHandler+0xb0>
 8001aca:	2340      	movs	r3, #64	@ 0x40
 8001acc:	e000      	b.n	8001ad0 <HAL_DMA_IRQHandler+0xb0>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	4a55      	ldr	r2, [pc, #340]	@ (8001c28 <HAL_DMA_IRQHandler+0x208>)
 8001ad2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8094 	beq.w	8001c06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ae6:	e08e      	b.n	8001c06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	2202      	movs	r2, #2
 8001aee:	409a      	lsls	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d056      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x186>
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d051      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10b      	bne.n	8001b28 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 020a 	bic.w	r2, r2, #10
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a38      	ldr	r2, [pc, #224]	@ (8001c10 <HAL_DMA_IRQHandler+0x1f0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d029      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x166>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a37      	ldr	r2, [pc, #220]	@ (8001c14 <HAL_DMA_IRQHandler+0x1f4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d022      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x162>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a35      	ldr	r2, [pc, #212]	@ (8001c18 <HAL_DMA_IRQHandler+0x1f8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d01a      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x15c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a34      	ldr	r2, [pc, #208]	@ (8001c1c <HAL_DMA_IRQHandler+0x1fc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d012      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x156>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a32      	ldr	r2, [pc, #200]	@ (8001c20 <HAL_DMA_IRQHandler+0x200>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00a      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x150>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a31      	ldr	r2, [pc, #196]	@ (8001c24 <HAL_DMA_IRQHandler+0x204>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d102      	bne.n	8001b6a <HAL_DMA_IRQHandler+0x14a>
 8001b64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b68:	e00e      	b.n	8001b88 <HAL_DMA_IRQHandler+0x168>
 8001b6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b6e:	e00b      	b.n	8001b88 <HAL_DMA_IRQHandler+0x168>
 8001b70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b74:	e008      	b.n	8001b88 <HAL_DMA_IRQHandler+0x168>
 8001b76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b7a:	e005      	b.n	8001b88 <HAL_DMA_IRQHandler+0x168>
 8001b7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b80:	e002      	b.n	8001b88 <HAL_DMA_IRQHandler+0x168>
 8001b82:	2320      	movs	r3, #32
 8001b84:	e000      	b.n	8001b88 <HAL_DMA_IRQHandler+0x168>
 8001b86:	2302      	movs	r3, #2
 8001b88:	4a27      	ldr	r2, [pc, #156]	@ (8001c28 <HAL_DMA_IRQHandler+0x208>)
 8001b8a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d034      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ba4:	e02f      	b.n	8001c06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	2208      	movs	r2, #8
 8001bac:	409a      	lsls	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d028      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x1e8>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d023      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 020e 	bic.w	r2, r2, #14
 8001bce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd8:	2101      	movs	r1, #1
 8001bda:	fa01 f202 	lsl.w	r2, r1, r2
 8001bde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	4798      	blx	r3
    }
  }
  return;
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
}
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40020008 	.word	0x40020008
 8001c14:	4002001c 	.word	0x4002001c
 8001c18:	40020030 	.word	0x40020030
 8001c1c:	40020044 	.word	0x40020044
 8001c20:	40020058 	.word	0x40020058
 8001c24:	4002006c 	.word	0x4002006c
 8001c28:	40020000 	.word	0x40020000

08001c2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c42:	2101      	movs	r1, #1
 8001c44:	fa01 f202 	lsl.w	r2, r1, r2
 8001c48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d108      	bne.n	8001c6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c6a:	e007      	b.n	8001c7c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	60da      	str	r2, [r3, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b08b      	sub	sp, #44	@ 0x2c
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9a:	e169      	b.n	8001f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 8158 	bne.w	8001f6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4a9a      	ldr	r2, [pc, #616]	@ (8001f28 <HAL_GPIO_Init+0x2a0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d05e      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cc4:	4a98      	ldr	r2, [pc, #608]	@ (8001f28 <HAL_GPIO_Init+0x2a0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d875      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cca:	4a98      	ldr	r2, [pc, #608]	@ (8001f2c <HAL_GPIO_Init+0x2a4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d058      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cd0:	4a96      	ldr	r2, [pc, #600]	@ (8001f2c <HAL_GPIO_Init+0x2a4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d86f      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cd6:	4a96      	ldr	r2, [pc, #600]	@ (8001f30 <HAL_GPIO_Init+0x2a8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d052      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cdc:	4a94      	ldr	r2, [pc, #592]	@ (8001f30 <HAL_GPIO_Init+0x2a8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d869      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001ce2:	4a94      	ldr	r2, [pc, #592]	@ (8001f34 <HAL_GPIO_Init+0x2ac>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d04c      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001ce8:	4a92      	ldr	r2, [pc, #584]	@ (8001f34 <HAL_GPIO_Init+0x2ac>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d863      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cee:	4a92      	ldr	r2, [pc, #584]	@ (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d046      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a90      	ldr	r2, [pc, #576]	@ (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d85d      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cfa:	2b12      	cmp	r3, #18
 8001cfc:	d82a      	bhi.n	8001d54 <HAL_GPIO_Init+0xcc>
 8001cfe:	2b12      	cmp	r3, #18
 8001d00:	d859      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001d02:	a201      	add	r2, pc, #4	@ (adr r2, 8001d08 <HAL_GPIO_Init+0x80>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d83 	.word	0x08001d83
 8001d0c:	08001d5d 	.word	0x08001d5d
 8001d10:	08001d6f 	.word	0x08001d6f
 8001d14:	08001db1 	.word	0x08001db1
 8001d18:	08001db7 	.word	0x08001db7
 8001d1c:	08001db7 	.word	0x08001db7
 8001d20:	08001db7 	.word	0x08001db7
 8001d24:	08001db7 	.word	0x08001db7
 8001d28:	08001db7 	.word	0x08001db7
 8001d2c:	08001db7 	.word	0x08001db7
 8001d30:	08001db7 	.word	0x08001db7
 8001d34:	08001db7 	.word	0x08001db7
 8001d38:	08001db7 	.word	0x08001db7
 8001d3c:	08001db7 	.word	0x08001db7
 8001d40:	08001db7 	.word	0x08001db7
 8001d44:	08001db7 	.word	0x08001db7
 8001d48:	08001db7 	.word	0x08001db7
 8001d4c:	08001d65 	.word	0x08001d65
 8001d50:	08001d79 	.word	0x08001d79
 8001d54:	4a79      	ldr	r2, [pc, #484]	@ (8001f3c <HAL_GPIO_Init+0x2b4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d5a:	e02c      	b.n	8001db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	623b      	str	r3, [r7, #32]
          break;
 8001d62:	e029      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	623b      	str	r3, [r7, #32]
          break;
 8001d6c:	e024      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	3308      	adds	r3, #8
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e01f      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	e01a      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e013      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d98:	2308      	movs	r3, #8
 8001d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	611a      	str	r2, [r3, #16]
          break;
 8001da2:	e009      	b.n	8001db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da4:	2308      	movs	r3, #8
 8001da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	615a      	str	r2, [r3, #20]
          break;
 8001dae:	e003      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
          break;
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          break;
 8001db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2bff      	cmp	r3, #255	@ 0xff
 8001dbc:	d801      	bhi.n	8001dc2 <HAL_GPIO_Init+0x13a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	e001      	b.n	8001dc6 <HAL_GPIO_Init+0x13e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2bff      	cmp	r3, #255	@ 0xff
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_GPIO_Init+0x14c>
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x152>
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	3b08      	subs	r3, #8
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	210f      	movs	r1, #15
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	6a39      	ldr	r1, [r7, #32]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80b1 	beq.w	8001f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e08:	4b4d      	ldr	r3, [pc, #308]	@ (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b4a      	ldr	r3, [pc, #296]	@ (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e20:	4a48      	ldr	r2, [pc, #288]	@ (8001f44 <HAL_GPIO_Init+0x2bc>)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a40      	ldr	r2, [pc, #256]	@ (8001f48 <HAL_GPIO_Init+0x2c0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x1ec>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f4c <HAL_GPIO_Init+0x2c4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1e8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3e      	ldr	r2, [pc, #248]	@ (8001f50 <HAL_GPIO_Init+0x2c8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1e4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f54 <HAL_GPIO_Init+0x2cc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1e0>
 8001e64:	2303      	movs	r3, #3
 8001e66:	e006      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e68:	2304      	movs	r3, #4
 8001e6a:	e004      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e74:	2300      	movs	r3, #0
 8001e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	4093      	lsls	r3, r2
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e86:	492f      	ldr	r1, [pc, #188]	@ (8001f44 <HAL_GPIO_Init+0x2bc>)
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	492c      	ldr	r1, [pc, #176]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eae:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4928      	ldr	r1, [pc, #160]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ec8:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4922      	ldr	r1, [pc, #136]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60cb      	str	r3, [r1, #12]
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	491e      	ldr	r1, [pc, #120]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4918      	ldr	r1, [pc, #96]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4914      	ldr	r1, [pc, #80]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d021      	beq.n	8001f5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	490e      	ldr	r1, [pc, #56]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e021      	b.n	8001f6a <HAL_GPIO_Init+0x2e2>
 8001f26:	bf00      	nop
 8001f28:	10320000 	.word	0x10320000
 8001f2c:	10310000 	.word	0x10310000
 8001f30:	10220000 	.word	0x10220000
 8001f34:	10210000 	.word	0x10210000
 8001f38:	10120000 	.word	0x10120000
 8001f3c:	10110000 	.word	0x10110000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010000 	.word	0x40010000
 8001f48:	40010800 	.word	0x40010800
 8001f4c:	40010c00 	.word	0x40010c00
 8001f50:	40011000 	.word	0x40011000
 8001f54:	40011400 	.word	0x40011400
 8001f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	4909      	ldr	r1, [pc, #36]	@ (8001f8c <HAL_GPIO_Init+0x304>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f47f ae8e 	bne.w	8001c9c <HAL_GPIO_Init+0x14>
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	372c      	adds	r7, #44	@ 0x2c
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40010400 	.word	0x40010400

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e272      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8087 	beq.w	80020ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe0:	4b92      	ldr	r3, [pc, #584]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d00c      	beq.n	8002006 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fec:	4b8f      	ldr	r3, [pc, #572]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d112      	bne.n	800201e <HAL_RCC_OscConfig+0x5e>
 8001ff8:	4b8c      	ldr	r3, [pc, #560]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002004:	d10b      	bne.n	800201e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002006:	4b89      	ldr	r3, [pc, #548]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d06c      	beq.n	80020ec <HAL_RCC_OscConfig+0x12c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d168      	bne.n	80020ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e24c      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x76>
 8002028:	4b80      	ldr	r3, [pc, #512]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a7f      	ldr	r2, [pc, #508]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 800202e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e02e      	b.n	8002094 <HAL_RCC_OscConfig+0xd4>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x98>
 800203e:	4b7b      	ldr	r3, [pc, #492]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7a      	ldr	r2, [pc, #488]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b78      	ldr	r3, [pc, #480]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a77      	ldr	r2, [pc, #476]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002050:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e01d      	b.n	8002094 <HAL_RCC_OscConfig+0xd4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0xbc>
 8002062:	4b72      	ldr	r3, [pc, #456]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a71      	ldr	r2, [pc, #452]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b6f      	ldr	r3, [pc, #444]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a6e      	ldr	r2, [pc, #440]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0xd4>
 800207c:	4b6b      	ldr	r3, [pc, #428]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a6a      	ldr	r2, [pc, #424]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b68      	ldr	r3, [pc, #416]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a67      	ldr	r2, [pc, #412]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002092:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff faca 	bl	8001634 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff fac6 	bl	8001634 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	@ 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e200      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b5d      	ldr	r3, [pc, #372]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0xe4>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fab6 	bl	8001634 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff fab2 	bl	8001634 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	@ 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e1ec      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	4b53      	ldr	r3, [pc, #332]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x10c>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d063      	beq.n	80021c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fa:	4b4c      	ldr	r3, [pc, #304]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002106:	4b49      	ldr	r3, [pc, #292]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b08      	cmp	r3, #8
 8002110:	d11c      	bne.n	800214c <HAL_RCC_OscConfig+0x18c>
 8002112:	4b46      	ldr	r3, [pc, #280]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d116      	bne.n	800214c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	4b43      	ldr	r3, [pc, #268]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x176>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e1c0      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b3d      	ldr	r3, [pc, #244]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4939      	ldr	r1, [pc, #228]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	e03a      	b.n	80021c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002154:	4b36      	ldr	r3, [pc, #216]	@ (8002230 <HAL_RCC_OscConfig+0x270>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7ff fa6b 	bl	8001634 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002162:	f7ff fa67 	bl	8001634 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e1a1      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	4b2d      	ldr	r3, [pc, #180]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002180:	4b2a      	ldr	r3, [pc, #168]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4927      	ldr	r1, [pc, #156]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
 8002194:	e015      	b.n	80021c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002196:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <HAL_RCC_OscConfig+0x270>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7ff fa4a 	bl	8001634 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a4:	f7ff fa46 	bl	8001634 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e180      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d03a      	beq.n	8002244 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d019      	beq.n	800220a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d6:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <HAL_RCC_OscConfig+0x274>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021dc:	f7ff fa2a 	bl	8001634 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e4:	f7ff fa26 	bl	8001634 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e160      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f6:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002202:	2001      	movs	r0, #1
 8002204:	f000 fa9c 	bl	8002740 <RCC_Delay>
 8002208:	e01c      	b.n	8002244 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_RCC_OscConfig+0x274>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002210:	f7ff fa10 	bl	8001634 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002216:	e00f      	b.n	8002238 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002218:	f7ff fa0c 	bl	8001634 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d908      	bls.n	8002238 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e146      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
 8002230:	42420000 	.word	0x42420000
 8002234:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002238:	4b92      	ldr	r3, [pc, #584]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1e9      	bne.n	8002218 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80a6 	beq.w	800239e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002256:	4b8b      	ldr	r3, [pc, #556]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10d      	bne.n	800227e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4b88      	ldr	r3, [pc, #544]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4a87      	ldr	r2, [pc, #540]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226c:	61d3      	str	r3, [r2, #28]
 800226e:	4b85      	ldr	r3, [pc, #532]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227a:	2301      	movs	r3, #1
 800227c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227e:	4b82      	ldr	r3, [pc, #520]	@ (8002488 <HAL_RCC_OscConfig+0x4c8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d118      	bne.n	80022bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228a:	4b7f      	ldr	r3, [pc, #508]	@ (8002488 <HAL_RCC_OscConfig+0x4c8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7e      	ldr	r2, [pc, #504]	@ (8002488 <HAL_RCC_OscConfig+0x4c8>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002296:	f7ff f9cd 	bl	8001634 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229e:	f7ff f9c9 	bl	8001634 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b64      	cmp	r3, #100	@ 0x64
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e103      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	4b75      	ldr	r3, [pc, #468]	@ (8002488 <HAL_RCC_OscConfig+0x4c8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d106      	bne.n	80022d2 <HAL_RCC_OscConfig+0x312>
 80022c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	e02d      	b.n	800232e <HAL_RCC_OscConfig+0x36e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x334>
 80022da:	4b6a      	ldr	r3, [pc, #424]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a69      	ldr	r2, [pc, #420]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6213      	str	r3, [r2, #32]
 80022e6:	4b67      	ldr	r3, [pc, #412]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a66      	ldr	r2, [pc, #408]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	f023 0304 	bic.w	r3, r3, #4
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	e01c      	b.n	800232e <HAL_RCC_OscConfig+0x36e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	d10c      	bne.n	8002316 <HAL_RCC_OscConfig+0x356>
 80022fc:	4b61      	ldr	r3, [pc, #388]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4a60      	ldr	r2, [pc, #384]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	6213      	str	r3, [r2, #32]
 8002308:	4b5e      	ldr	r3, [pc, #376]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a5d      	ldr	r2, [pc, #372]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	e00b      	b.n	800232e <HAL_RCC_OscConfig+0x36e>
 8002316:	4b5b      	ldr	r3, [pc, #364]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a5a      	ldr	r2, [pc, #360]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	6213      	str	r3, [r2, #32]
 8002322:	4b58      	ldr	r3, [pc, #352]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a57      	ldr	r2, [pc, #348]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f023 0304 	bic.w	r3, r3, #4
 800232c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d015      	beq.n	8002362 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7ff f97d 	bl	8001634 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7ff f979 	bl	8001634 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0b1      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	4b4b      	ldr	r3, [pc, #300]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ee      	beq.n	800233e <HAL_RCC_OscConfig+0x37e>
 8002360:	e014      	b.n	800238c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7ff f967 	bl	8001634 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002368:	e00a      	b.n	8002380 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7ff f963 	bl	8001634 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e09b      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	4b40      	ldr	r3, [pc, #256]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ee      	bne.n	800236a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800238c:	7dfb      	ldrb	r3, [r7, #23]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d105      	bne.n	800239e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002392:	4b3c      	ldr	r3, [pc, #240]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4a3b      	ldr	r2, [pc, #236]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800239c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8087 	beq.w	80024b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a8:	4b36      	ldr	r3, [pc, #216]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d061      	beq.n	8002478 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d146      	bne.n	800244a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023bc:	4b33      	ldr	r3, [pc, #204]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7ff f937 	bl	8001634 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ca:	f7ff f933 	bl	8001634 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e06d      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023dc:	4b29      	ldr	r3, [pc, #164]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f0      	bne.n	80023ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f0:	d108      	bne.n	8002404 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023f2:	4b24      	ldr	r3, [pc, #144]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4921      	ldr	r1, [pc, #132]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002404:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a19      	ldr	r1, [r3, #32]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	430b      	orrs	r3, r1
 8002416:	491b      	ldr	r1, [pc, #108]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800241c:	4b1b      	ldr	r3, [pc, #108]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7ff f907 	bl	8001634 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7ff f903 	bl	8001634 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e03d      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x46a>
 8002448:	e035      	b.n	80024b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff f8f0 	bl	8001634 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff f8ec 	bl	8001634 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e026      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x498>
 8002476:	e01e      	b.n	80024b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d107      	bne.n	8002490 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e019      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
 8002484:	40021000 	.word	0x40021000
 8002488:	40007000 	.word	0x40007000
 800248c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_RCC_OscConfig+0x500>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000

080024c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0d0      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d910      	bls.n	8002508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b67      	ldr	r3, [pc, #412]	@ (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0207 	bic.w	r2, r3, #7
 80024ee:	4965      	ldr	r1, [pc, #404]	@ (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b63      	ldr	r3, [pc, #396]	@ (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0b8      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002520:	4b59      	ldr	r3, [pc, #356]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a58      	ldr	r2, [pc, #352]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800252a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002538:	4b53      	ldr	r3, [pc, #332]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a52      	ldr	r2, [pc, #328]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002542:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b50      	ldr	r3, [pc, #320]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	494d      	ldr	r1, [pc, #308]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d040      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d115      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e07f      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	4b41      	ldr	r3, [pc, #260]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e073      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b3d      	ldr	r3, [pc, #244]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e06b      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b39      	ldr	r3, [pc, #228]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4936      	ldr	r1, [pc, #216]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7ff f83e 	bl	8001634 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7ff f83a 	bl	8001634 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e053      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d210      	bcs.n	8002614 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b24      	ldr	r3, [pc, #144]	@ (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4922      	ldr	r1, [pc, #136]	@ (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b20      	ldr	r3, [pc, #128]	@ (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e032      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002620:	4b19      	ldr	r3, [pc, #100]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4916      	ldr	r1, [pc, #88]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800263e:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	490e      	ldr	r1, [pc, #56]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002652:	f000 f821 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8002656:	4602      	mov	r2, r0
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	490a      	ldr	r1, [pc, #40]	@ (800268c <HAL_RCC_ClockConfig+0x1c8>)
 8002664:	5ccb      	ldrb	r3, [r1, r3]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	4a09      	ldr	r2, [pc, #36]	@ (8002690 <HAL_RCC_ClockConfig+0x1cc>)
 800266c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800266e:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <HAL_RCC_ClockConfig+0x1d0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe ff9c 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40022000 	.word	0x40022000
 8002688:	40021000 	.word	0x40021000
 800268c:	08003fac 	.word	0x08003fac
 8002690:	20000000 	.word	0x20000000
 8002694:	20000004 	.word	0x20000004

08002698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026b2:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <HAL_RCC_GetSysClockFreq+0x94>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d002      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x30>
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x36>
 80026c6:	e027      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026c8:	4b19      	ldr	r3, [pc, #100]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ca:	613b      	str	r3, [r7, #16]
      break;
 80026cc:	e027      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	0c9b      	lsrs	r3, r3, #18
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	4a17      	ldr	r2, [pc, #92]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
 80026da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d010      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026e6:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_RCC_GetSysClockFreq+0x94>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0c5b      	lsrs	r3, r3, #17
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fa:	fb03 f202 	mul.w	r2, r3, r2
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	e004      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a0c      	ldr	r2, [pc, #48]	@ (800273c <HAL_RCC_GetSysClockFreq+0xa4>)
 800270c:	fb02 f303 	mul.w	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	613b      	str	r3, [r7, #16]
      break;
 8002716:	e002      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x98>)
 800271a:	613b      	str	r3, [r7, #16]
      break;
 800271c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271e:	693b      	ldr	r3, [r7, #16]
}
 8002720:	4618      	mov	r0, r3
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	007a1200 	.word	0x007a1200
 8002734:	08003fbc 	.word	0x08003fbc
 8002738:	08003fcc 	.word	0x08003fcc
 800273c:	003d0900 	.word	0x003d0900

08002740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002748:	4b0a      	ldr	r3, [pc, #40]	@ (8002774 <RCC_Delay+0x34>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0a      	ldr	r2, [pc, #40]	@ (8002778 <RCC_Delay+0x38>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0a5b      	lsrs	r3, r3, #9
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800275c:	bf00      	nop
  }
  while (Delay --);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1e5a      	subs	r2, r3, #1
 8002762:	60fa      	str	r2, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f9      	bne.n	800275c <RCC_Delay+0x1c>
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000000 	.word	0x20000000
 8002778:	10624dd3 	.word	0x10624dd3

0800277c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e041      	b.n	8002812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fe4a 	bl	800143c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f000 fc9e 	bl	80030fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e041      	b.n	80028b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d106      	bne.n	8002846 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f839 	bl	80028b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f000 fc4f 	bl	80030fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	e022      	b.n	800293e <HAL_TIM_PWM_Start_DMA+0x72>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d109      	bne.n	8002912 <HAL_TIM_PWM_Start_DMA+0x46>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	e015      	b.n	800293e <HAL_TIM_PWM_Start_DMA+0x72>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d109      	bne.n	800292c <HAL_TIM_PWM_Start_DMA+0x60>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	e008      	b.n	800293e <HAL_TIM_PWM_Start_DMA+0x72>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
 8002944:	e153      	b.n	8002bee <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_TIM_PWM_Start_DMA+0x94>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	e022      	b.n	80029a6 <HAL_TIM_PWM_Start_DMA+0xda>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d109      	bne.n	800297a <HAL_TIM_PWM_Start_DMA+0xae>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	bf0c      	ite	eq
 8002972:	2301      	moveq	r3, #1
 8002974:	2300      	movne	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e015      	b.n	80029a6 <HAL_TIM_PWM_Start_DMA+0xda>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d109      	bne.n	8002994 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e008      	b.n	80029a6 <HAL_TIM_PWM_Start_DMA+0xda>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d024      	beq.n	80029f4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_TIM_PWM_Start_DMA+0xea>
 80029b0:	887b      	ldrh	r3, [r7, #2]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e119      	b.n	8002bee <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <HAL_TIM_PWM_Start_DMA+0xfe>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029c8:	e016      	b.n	80029f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d104      	bne.n	80029da <HAL_TIM_PWM_Start_DMA+0x10e>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029d8:	e00e      	b.n	80029f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d104      	bne.n	80029ea <HAL_TIM_PWM_Start_DMA+0x11e>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029e8:	e006      	b.n	80029f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029f2:	e001      	b.n	80029f8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0fa      	b.n	8002bee <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	f200 80ae 	bhi.w	8002b5c <HAL_TIM_PWM_Start_DMA+0x290>
 8002a00:	a201      	add	r2, pc, #4	@ (adr r2, 8002a08 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a3d 	.word	0x08002a3d
 8002a0c:	08002b5d 	.word	0x08002b5d
 8002a10:	08002b5d 	.word	0x08002b5d
 8002a14:	08002b5d 	.word	0x08002b5d
 8002a18:	08002a85 	.word	0x08002a85
 8002a1c:	08002b5d 	.word	0x08002b5d
 8002a20:	08002b5d 	.word	0x08002b5d
 8002a24:	08002b5d 	.word	0x08002b5d
 8002a28:	08002acd 	.word	0x08002acd
 8002a2c:	08002b5d 	.word	0x08002b5d
 8002a30:	08002b5d 	.word	0x08002b5d
 8002a34:	08002b5d 	.word	0x08002b5d
 8002a38:	08002b15 	.word	0x08002b15
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	4a6d      	ldr	r2, [pc, #436]	@ (8002bf8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002a42:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	4a6c      	ldr	r2, [pc, #432]	@ (8002bfc <HAL_TIM_PWM_Start_DMA+0x330>)
 8002a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	4a6b      	ldr	r2, [pc, #428]	@ (8002c00 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002a52:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3334      	adds	r3, #52	@ 0x34
 8002a60:	461a      	mov	r2, r3
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	f7fe ff7c 	bl	8001960 <HAL_DMA_Start_IT>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0bd      	b.n	8002bee <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a80:	60da      	str	r2, [r3, #12]
      break;
 8002a82:	e06e      	b.n	8002b62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a88:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	4a5a      	ldr	r2, [pc, #360]	@ (8002bfc <HAL_TIM_PWM_Start_DMA+0x330>)
 8002a92:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	4a59      	ldr	r2, [pc, #356]	@ (8002c00 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3338      	adds	r3, #56	@ 0x38
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	f7fe ff58 	bl	8001960 <HAL_DMA_Start_IT>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e099      	b.n	8002bee <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ac8:	60da      	str	r2, [r3, #12]
      break;
 8002aca:	e04a      	b.n	8002b62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad0:	4a49      	ldr	r2, [pc, #292]	@ (8002bf8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002ad2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	4a48      	ldr	r2, [pc, #288]	@ (8002bfc <HAL_TIM_PWM_Start_DMA+0x330>)
 8002ada:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	4a47      	ldr	r2, [pc, #284]	@ (8002c00 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002ae2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	333c      	adds	r3, #60	@ 0x3c
 8002af0:	461a      	mov	r2, r3
 8002af2:	887b      	ldrh	r3, [r7, #2]
 8002af4:	f7fe ff34 	bl	8001960 <HAL_DMA_Start_IT>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e075      	b.n	8002bee <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b10:	60da      	str	r2, [r3, #12]
      break;
 8002b12:	e026      	b.n	8002b62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	4a37      	ldr	r2, [pc, #220]	@ (8002bf8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002b1a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	4a36      	ldr	r2, [pc, #216]	@ (8002bfc <HAL_TIM_PWM_Start_DMA+0x330>)
 8002b22:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	4a35      	ldr	r2, [pc, #212]	@ (8002c00 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3340      	adds	r3, #64	@ 0x40
 8002b38:	461a      	mov	r2, r3
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	f7fe ff10 	bl	8001960 <HAL_DMA_Start_IT>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e051      	b.n	8002bee <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b58:	60da      	str	r2, [r3, #12]
      break;
 8002b5a:	e002      	b.n	8002b62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b60:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d141      	bne.n	8002bec <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fd4f 	bl	8003614 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a22      	ldr	r2, [pc, #136]	@ (8002c04 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d107      	bne.n	8002b90 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b8e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00e      	beq.n	8002bb8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba2:	d009      	beq.n	8002bb8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a17      	ldr	r2, [pc, #92]	@ (8002c08 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <HAL_TIM_PWM_Start_DMA+0x340>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d111      	bne.n	8002bdc <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d010      	beq.n	8002bec <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	e007      	b.n	8002bec <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	08002feb 	.word	0x08002feb
 8002bfc:	08003093 	.word	0x08003093
 8002c00:	08002f59 	.word	0x08002f59
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40000800 	.word	0x40000800

08002c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e0ae      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	f200 809f 	bhi.w	8002d7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c79 	.word	0x08002c79
 8002c48:	08002d7d 	.word	0x08002d7d
 8002c4c:	08002d7d 	.word	0x08002d7d
 8002c50:	08002d7d 	.word	0x08002d7d
 8002c54:	08002cb9 	.word	0x08002cb9
 8002c58:	08002d7d 	.word	0x08002d7d
 8002c5c:	08002d7d 	.word	0x08002d7d
 8002c60:	08002d7d 	.word	0x08002d7d
 8002c64:	08002cfb 	.word	0x08002cfb
 8002c68:	08002d7d 	.word	0x08002d7d
 8002c6c:	08002d7d 	.word	0x08002d7d
 8002c70:	08002d7d 	.word	0x08002d7d
 8002c74:	08002d3b 	.word	0x08002d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 faaa 	bl	80031d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0208 	orr.w	r2, r2, #8
 8002c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0204 	bic.w	r2, r2, #4
 8002ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6999      	ldr	r1, [r3, #24]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	619a      	str	r2, [r3, #24]
      break;
 8002cb6:	e064      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 faf0 	bl	80032a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6999      	ldr	r1, [r3, #24]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	021a      	lsls	r2, r3, #8
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	619a      	str	r2, [r3, #24]
      break;
 8002cf8:	e043      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fb39 	bl	8003378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0208 	orr.w	r2, r2, #8
 8002d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0204 	bic.w	r2, r2, #4
 8002d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69d9      	ldr	r1, [r3, #28]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	61da      	str	r2, [r3, #28]
      break;
 8002d38:	e023      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fb83 	bl	800344c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69d9      	ldr	r1, [r3, #28]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	61da      	str	r2, [r3, #28]
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_TIM_ConfigClockSource+0x1c>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0b4      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x186>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002de8:	d03e      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0xd4>
 8002dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dee:	f200 8087 	bhi.w	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df6:	f000 8086 	beq.w	8002f06 <HAL_TIM_ConfigClockSource+0x172>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dfe:	d87f      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e00:	2b70      	cmp	r3, #112	@ 0x70
 8002e02:	d01a      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0xa6>
 8002e04:	2b70      	cmp	r3, #112	@ 0x70
 8002e06:	d87b      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e08:	2b60      	cmp	r3, #96	@ 0x60
 8002e0a:	d050      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x11a>
 8002e0c:	2b60      	cmp	r3, #96	@ 0x60
 8002e0e:	d877      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b50      	cmp	r3, #80	@ 0x50
 8002e12:	d03c      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0xfa>
 8002e14:	2b50      	cmp	r3, #80	@ 0x50
 8002e16:	d873      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b40      	cmp	r3, #64	@ 0x40
 8002e1a:	d058      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x13a>
 8002e1c:	2b40      	cmp	r3, #64	@ 0x40
 8002e1e:	d86f      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b30      	cmp	r3, #48	@ 0x30
 8002e22:	d064      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e24:	2b30      	cmp	r3, #48	@ 0x30
 8002e26:	d86b      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d060      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d867      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d05c      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d05a      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e38:	e062      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e4a:	f000 fbc4 	bl	80035d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	609a      	str	r2, [r3, #8]
      break;
 8002e66:	e04f      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e78:	f000 fbad 	bl	80035d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e8a:	609a      	str	r2, [r3, #8]
      break;
 8002e8c:	e03c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f000 fb24 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2150      	movs	r1, #80	@ 0x50
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fb7b 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8002eac:	e02c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f000 fb42 	bl	8003544 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2160      	movs	r1, #96	@ 0x60
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fb6b 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8002ecc:	e01c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eda:	461a      	mov	r2, r3
 8002edc:	f000 fb04 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2140      	movs	r1, #64	@ 0x40
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fb5b 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8002eec:	e00c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4610      	mov	r0, r2
 8002efa:	f000 fb52 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 8002efe:	e003      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e000      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d107      	bne.n	8002f80 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f7e:	e02a      	b.n	8002fd6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d107      	bne.n	8002f9a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f98:	e01d      	b.n	8002fd6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d107      	bne.n	8002fb4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fb2:	e010      	b.n	8002fd6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d107      	bne.n	8002fce <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fcc:	e003      	b.n	8002fd6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff ffb5 	bl	8002f46 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	771a      	strb	r2, [r3, #28]
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d10b      	bne.n	800301a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d136      	bne.n	800307e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003018:	e031      	b.n	800307e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d10b      	bne.n	800303c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2202      	movs	r2, #2
 8003028:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d125      	bne.n	800307e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800303a:	e020      	b.n	800307e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	d10b      	bne.n	800305e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2204      	movs	r2, #4
 800304a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d114      	bne.n	800307e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800305c:	e00f      	b.n	800307e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d10a      	bne.n	800307e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2208      	movs	r2, #8
 800306c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f7ff ff4f 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	771a      	strb	r2, [r3, #28]
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d103      	bne.n	80030b2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	771a      	strb	r2, [r3, #28]
 80030b0:	e019      	b.n	80030e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d103      	bne.n	80030c4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2202      	movs	r2, #2
 80030c0:	771a      	strb	r2, [r3, #28]
 80030c2:	e010      	b.n	80030e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d103      	bne.n	80030d6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2204      	movs	r2, #4
 80030d2:	771a      	strb	r2, [r3, #28]
 80030d4:	e007      	b.n	80030e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d102      	bne.n	80030e6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2208      	movs	r2, #8
 80030e4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7ff ff24 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	771a      	strb	r2, [r3, #28]
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a2f      	ldr	r2, [pc, #188]	@ (80031cc <TIM_Base_SetConfig+0xd0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00b      	beq.n	800312c <TIM_Base_SetConfig+0x30>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311a:	d007      	beq.n	800312c <TIM_Base_SetConfig+0x30>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a2c      	ldr	r2, [pc, #176]	@ (80031d0 <TIM_Base_SetConfig+0xd4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <TIM_Base_SetConfig+0x30>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a2b      	ldr	r2, [pc, #172]	@ (80031d4 <TIM_Base_SetConfig+0xd8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d108      	bne.n	800313e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a22      	ldr	r2, [pc, #136]	@ (80031cc <TIM_Base_SetConfig+0xd0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00b      	beq.n	800315e <TIM_Base_SetConfig+0x62>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314c:	d007      	beq.n	800315e <TIM_Base_SetConfig+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a1f      	ldr	r2, [pc, #124]	@ (80031d0 <TIM_Base_SetConfig+0xd4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <TIM_Base_SetConfig+0x62>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1e      	ldr	r2, [pc, #120]	@ (80031d4 <TIM_Base_SetConfig+0xd8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d108      	bne.n	8003170 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a0d      	ldr	r2, [pc, #52]	@ (80031cc <TIM_Base_SetConfig+0xd0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d103      	bne.n	80031a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f023 0201 	bic.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	611a      	str	r2, [r3, #16]
  }
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800

080031d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f023 0201 	bic.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0302 	bic.w	r3, r3, #2
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a1c      	ldr	r2, [pc, #112]	@ (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10c      	bne.n	800324e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0308 	bic.w	r3, r3, #8
 800323a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f023 0304 	bic.w	r3, r3, #4
 800324c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a13      	ldr	r2, [pc, #76]	@ (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d111      	bne.n	800327a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800325c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	621a      	str	r2, [r3, #32]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f023 0210 	bic.w	r2, r3, #16
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0320 	bic.w	r3, r3, #32
 80032ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10d      	bne.n	8003320 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800330a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800331e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a14      	ldr	r2, [pc, #80]	@ (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d113      	bne.n	8003350 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800332e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00

08003378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a14      	ldr	r2, [pc, #80]	@ (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d113      	bne.n	8003422 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00

0800344c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800347a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	031b      	lsls	r3, r3, #12
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0f      	ldr	r2, [pc, #60]	@ (80034e4 <TIM_OC4_SetConfig+0x98>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d109      	bne.n	80034c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	40012c00 	.word	0x40012c00

080034e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 030a 	bic.w	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f023 0210 	bic.w	r2, r3, #16
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800356e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	031b      	lsls	r3, r3, #12
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003580:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	f043 0307 	orr.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b087      	sub	sp, #28
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2201      	movs	r2, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	43db      	mvns	r3, r3
 8003636:	401a      	ands	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003670:	2302      	movs	r3, #2
 8003672:	e046      	b.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a16      	ldr	r2, [pc, #88]	@ (800370c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c0:	d009      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a12      	ldr	r2, [pc, #72]	@ (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a10      	ldr	r2, [pc, #64]	@ (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10c      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <hsv_to_rgb>:

    return hsv;
}

// HSV转RGB函数
RGBColor hsv_to_rgb(HSVColor hsv) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b08c      	sub	sp, #48	@ 0x30
 800371c:	af00      	add	r7, sp, #0
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    RGBColor rgb;
    float c = hsv.v * hsv.s; // 色度
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd fad8 	bl	8000ce0 <__aeabi_fmul>
 8003730:	4603      	mov	r3, r0
 8003732:	623b      	str	r3, [r7, #32]
    float x = c * (1.0f - fabsf(fmodf(hsv.h / 60.0f, 2.0f) - 1.0f));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4962      	ldr	r1, [pc, #392]	@ (80038c0 <hsv_to_rgb+0x1a8>)
 8003738:	4618      	mov	r0, r3
 800373a:	f7fd fb85 	bl	8000e48 <__aeabi_fdiv>
 800373e:	4603      	mov	r3, r0
 8003740:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fa81 	bl	8003c4c <fmodf>
 800374a:	4603      	mov	r3, r0
 800374c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003750:	4618      	mov	r0, r3
 8003752:	f7fd f9bb 	bl	8000acc <__aeabi_fsub>
 8003756:	4603      	mov	r3, r0
 8003758:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800375c:	4619      	mov	r1, r3
 800375e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003762:	f7fd f9b3 	bl	8000acc <__aeabi_fsub>
 8003766:	4603      	mov	r3, r0
 8003768:	4619      	mov	r1, r3
 800376a:	6a38      	ldr	r0, [r7, #32]
 800376c:	f7fd fab8 	bl	8000ce0 <__aeabi_fmul>
 8003770:	4603      	mov	r3, r0
 8003772:	61fb      	str	r3, [r7, #28]
    float m = hsv.v - c;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a39      	ldr	r1, [r7, #32]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd f9a7 	bl	8000acc <__aeabi_fsub>
 800377e:	4603      	mov	r3, r0
 8003780:	61bb      	str	r3, [r7, #24]

    float r, g, b;

    // 根据色相区间计算
    if (hsv.h < 60.0f) {
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	494e      	ldr	r1, [pc, #312]	@ (80038c0 <hsv_to_rgb+0x1a8>)
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fc48 	bl	800101c <__aeabi_fcmplt>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <hsv_to_rgb+0x8a>
        r = c; g = x; b = 0;
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a0:	e046      	b.n	8003830 <hsv_to_rgb+0x118>
    } else if (hsv.h < 120.0f) {
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4947      	ldr	r1, [pc, #284]	@ (80038c4 <hsv_to_rgb+0x1ac>)
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fd fc38 	bl	800101c <__aeabi_fcmplt>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <hsv_to_rgb+0xaa>
        r = x; g = c; b = 0;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c0:	e036      	b.n	8003830 <hsv_to_rgb+0x118>
    } else if (hsv.h < 180.0f) {
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4940      	ldr	r1, [pc, #256]	@ (80038c8 <hsv_to_rgb+0x1b0>)
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fc28 	bl	800101c <__aeabi_fcmplt>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <hsv_to_rgb+0xca>
        r = 0; g = c; b = x;
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e0:	e026      	b.n	8003830 <hsv_to_rgb+0x118>
    } else if (hsv.h < 240.0f) {
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4939      	ldr	r1, [pc, #228]	@ (80038cc <hsv_to_rgb+0x1b4>)
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fc18 	bl	800101c <__aeabi_fcmplt>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <hsv_to_rgb+0xea>
        r = 0; g = x; b = c;
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003800:	e016      	b.n	8003830 <hsv_to_rgb+0x118>
    } else if (hsv.h < 300.0f) {
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4932      	ldr	r1, [pc, #200]	@ (80038d0 <hsv_to_rgb+0x1b8>)
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd fc08 	bl	800101c <__aeabi_fcmplt>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <hsv_to_rgb+0x10a>
        r = x; g = 0; b = c;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003820:	e006      	b.n	8003830 <hsv_to_rgb+0x118>
    } else {
        r = c; g = 0; b = x;
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // 添加明度偏移并转换为0-255
    rgb.r = (unsigned char)((r + m) * 255.0f);
 8003830:	69b9      	ldr	r1, [r7, #24]
 8003832:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003834:	f7fd f94c 	bl	8000ad0 <__addsf3>
 8003838:	4603      	mov	r3, r0
 800383a:	4926      	ldr	r1, [pc, #152]	@ (80038d4 <hsv_to_rgb+0x1bc>)
 800383c:	4618      	mov	r0, r3
 800383e:	f7fd fa4f 	bl	8000ce0 <__aeabi_fmul>
 8003842:	4603      	mov	r3, r0
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fc27 	bl	8001098 <__aeabi_f2uiz>
 800384a:	4603      	mov	r3, r0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	743b      	strb	r3, [r7, #16]
    rgb.g = (unsigned char)((g + m) * 255.0f);
 8003850:	69b9      	ldr	r1, [r7, #24]
 8003852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003854:	f7fd f93c 	bl	8000ad0 <__addsf3>
 8003858:	4603      	mov	r3, r0
 800385a:	491e      	ldr	r1, [pc, #120]	@ (80038d4 <hsv_to_rgb+0x1bc>)
 800385c:	4618      	mov	r0, r3
 800385e:	f7fd fa3f 	bl	8000ce0 <__aeabi_fmul>
 8003862:	4603      	mov	r3, r0
 8003864:	4618      	mov	r0, r3
 8003866:	f7fd fc17 	bl	8001098 <__aeabi_f2uiz>
 800386a:	4603      	mov	r3, r0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	747b      	strb	r3, [r7, #17]
    rgb.b = (unsigned char)((b + m) * 255.0f);
 8003870:	69b9      	ldr	r1, [r7, #24]
 8003872:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003874:	f7fd f92c 	bl	8000ad0 <__addsf3>
 8003878:	4603      	mov	r3, r0
 800387a:	4916      	ldr	r1, [pc, #88]	@ (80038d4 <hsv_to_rgb+0x1bc>)
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fa2f 	bl	8000ce0 <__aeabi_fmul>
 8003882:	4603      	mov	r3, r0
 8003884:	4618      	mov	r0, r3
 8003886:	f7fd fc07 	bl	8001098 <__aeabi_f2uiz>
 800388a:	4603      	mov	r3, r0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	74bb      	strb	r3, [r7, #18]

    return rgb;
 8003890:	f107 0314 	add.w	r3, r7, #20
 8003894:	f107 0210 	add.w	r2, r7, #16
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	4611      	mov	r1, r2
 800389c:	8019      	strh	r1, [r3, #0]
 800389e:	3302      	adds	r3, #2
 80038a0:	0c12      	lsrs	r2, r2, #16
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	2300      	movs	r3, #0
 80038a6:	7d3a      	ldrb	r2, [r7, #20]
 80038a8:	f362 0307 	bfi	r3, r2, #0, #8
 80038ac:	7d7a      	ldrb	r2, [r7, #21]
 80038ae:	f362 230f 	bfi	r3, r2, #8, #8
 80038b2:	7dba      	ldrb	r2, [r7, #22]
 80038b4:	f362 4317 	bfi	r3, r2, #16, #8
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3730      	adds	r7, #48	@ 0x30
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	42700000 	.word	0x42700000
 80038c4:	42f00000 	.word	0x42f00000
 80038c8:	43340000 	.word	0x43340000
 80038cc:	43700000 	.word	0x43700000
 80038d0:	43960000 	.word	0x43960000
 80038d4:	437f0000 	.word	0x437f0000

080038d8 <rgb_to_int>:

uint32_t rgb_to_int(RGBColor rgb)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	uint32_t color = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
	color = (rgb.r << 16) | (rgb.g << 8) | (rgb.b);
 80038e4:	793b      	ldrb	r3, [r7, #4]
 80038e6:	041a      	lsls	r2, r3, #16
 80038e8:	797b      	ldrb	r3, [r7, #5]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	4313      	orrs	r3, r2
 80038ee:	79ba      	ldrb	r2, [r7, #6]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
	return color;
 80038f4:	68fb      	ldr	r3, [r7, #12]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <WS2812B_Reset>:
			WS2812B_BUFF[i][j] = 0;
		}
	}
}
void WS2812B_Reset(void)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
	int i = 0, j = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	2300      	movs	r3, #0
 800390c:	603b      	str	r3, [r7, #0]
	for (j = 0; j < RESET_NUM; j++)
 800390e:	2300      	movs	r3, #0
 8003910:	603b      	str	r3, [r7, #0]
 8003912:	e023      	b.n	800395c <WS2812B_Reset+0x5c>
	{
		for (i = 0; i < 24; i++)
 8003914:	2300      	movs	r3, #0
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	e01a      	b.n	8003950 <WS2812B_Reset+0x50>
		{
			WS2812B_BUFF[j][i] = 0;
 800391a:	4915      	ldr	r1, [pc, #84]	@ (8003970 <WS2812B_Reset+0x70>)
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	2200      	movs	r2, #0
 800392c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			WS2812B_BUFF[j+RESET_NUM+LED_NUM][i] = 0;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f103 023d 	add.w	r2, r3, #61	@ 0x3d
 8003936:	490e      	ldr	r1, [pc, #56]	@ (8003970 <WS2812B_Reset+0x70>)
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	2200      	movs	r2, #0
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < 24; i++)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3301      	adds	r3, #1
 800394e:	607b      	str	r3, [r7, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b17      	cmp	r3, #23
 8003954:	dde1      	ble.n	800391a <WS2812B_Reset+0x1a>
	for (j = 0; j < RESET_NUM; j++)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	ddd8      	ble.n	8003914 <WS2812B_Reset+0x14>
		}
	}
}
 8003962:	bf00      	nop
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000108 	.word	0x20000108

08003974 <PWM_WS2812B_Write_24Bits>:
void PWM_WS2812B_Write_24Bits(uint16_t index,uint32_t RGB_Data)
{
 8003974:	b490      	push	{r4, r7}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < 8; i++)
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	e04a      	b.n	8003a20 <PWM_WS2812B_Write_24Bits+0xac>
	{
		WS2812B_BUFF[index+RESET_NUM][i] = (((RGB_Data << (8+i)) & 0x00800000))? (T1H):(T0H); 	//G
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3308      	adds	r3, #8
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <PWM_WS2812B_Write_24Bits+0x2c>
 800399c:	213c      	movs	r1, #60	@ 0x3c
 800399e:	e000      	b.n	80039a2 <PWM_WS2812B_Write_24Bits+0x2e>
 80039a0:	211e      	movs	r1, #30
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	4823      	ldr	r0, [pc, #140]	@ (8003a34 <PWM_WS2812B_Write_24Bits+0xc0>)
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		WS2812B_BUFF[index+RESET_NUM][i+8] = (((RGB_Data << (i)) & 0x00800000))? (T1H):(T0H);		//R
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <PWM_WS2812B_Write_24Bits+0x58>
 80039c8:	213c      	movs	r1, #60	@ 0x3c
 80039ca:	e000      	b.n	80039ce <PWM_WS2812B_Write_24Bits+0x5a>
 80039cc:	211e      	movs	r1, #30
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f103 0008 	add.w	r0, r3, #8
 80039d8:	4c16      	ldr	r4, [pc, #88]	@ (8003a34 <PWM_WS2812B_Write_24Bits+0xc0>)
 80039da:	4613      	mov	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4403      	add	r3, r0
 80039e4:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		WS2812B_BUFF[index+RESET_NUM][i+16] = (((RGB_Data << (16+i)) & 0x00800000))? (T1H):(T0H);	//B
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3310      	adds	r3, #16
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <PWM_WS2812B_Write_24Bits+0x8a>
 80039fa:	213c      	movs	r1, #60	@ 0x3c
 80039fc:	e000      	b.n	8003a00 <PWM_WS2812B_Write_24Bits+0x8c>
 80039fe:	211e      	movs	r1, #30
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f103 0010 	add.w	r0, r3, #16
 8003a0a:	4c0a      	ldr	r4, [pc, #40]	@ (8003a34 <PWM_WS2812B_Write_24Bits+0xc0>)
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4403      	add	r3, r0
 8003a16:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	for(i = 0; i < 8; i++)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b07      	cmp	r3, #7
 8003a24:	ddb1      	ble.n	800398a <PWM_WS2812B_Write_24Bits+0x16>
	}
}
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc90      	pop	{r4, r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000108 	.word	0x20000108

08003a38 <WS2812B_Set_Color>:
void WS2812B_Set_Color(uint16_t head, uint16_t num ,uint32_t RGB_Data)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	603a      	str	r2, [r7, #0]
 8003a42:	80fb      	strh	r3, [r7, #6]
 8003a44:	460b      	mov	r3, r1
 8003a46:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < num; i++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	81fb      	strh	r3, [r7, #14]
 8003a50:	e00a      	b.n	8003a68 <WS2812B_Set_Color+0x30>
	{
		PWM_WS2812B_Write_24Bits(head+i ,RGB_Data);
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	89fb      	ldrh	r3, [r7, #14]
 8003a56:	4413      	add	r3, r2
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	6839      	ldr	r1, [r7, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff89 	bl	8003974 <PWM_WS2812B_Write_24Bits>
	for (i = 0; i < num; i++)
 8003a62:	89fb      	ldrh	r3, [r7, #14]
 8003a64:	3301      	adds	r3, #1
 8003a66:	81fb      	strh	r3, [r7, #14]
 8003a68:	89fa      	ldrh	r2, [r7, #14]
 8003a6a:	88bb      	ldrh	r3, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d3f0      	bcc.n	8003a52 <WS2812B_Set_Color+0x1a>
	}
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <PWM_WS2812B_Refresh>:
void PWM_WS2812B_Refresh()
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
	WS2812B_Reset();
 8003a80:	f7ff ff3e 	bl	8003900 <WS2812B_Reset>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)WS2812B_BUFF, (LED_NUM+RESET_NUM*2)*24);
 8003a84:	f44f 63ba 	mov.w	r3, #1488	@ 0x5d0
 8003a88:	4a03      	ldr	r2, [pc, #12]	@ (8003a98 <PWM_WS2812B_Refresh+0x1c>)
 8003a8a:	2104      	movs	r1, #4
 8003a8c:	4803      	ldr	r0, [pc, #12]	@ (8003a9c <PWM_WS2812B_Refresh+0x20>)
 8003a8e:	f7fe ff1d 	bl	80028cc <HAL_TIM_PWM_Start_DMA>
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000108 	.word	0x20000108
 8003a9c:	20000078 	.word	0x20000078

08003aa0 <PWM_WS2812B_Rainbow>:
	  PWM_WS2812B_Refresh();
//	  RGB_Show_64();
	  HAL_Delay(20);
}
void PWM_WS2812B_Rainbow(HSVColor* HSV)
{
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	uint16_t i = 0,j = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	81fb      	strh	r3, [r7, #14]
 8003aac:	2300      	movs	r3, #0
 8003aae:	81bb      	strh	r3, [r7, #12]
	for (i = LED_NUM; i > 0; i--)
 8003ab0:	233c      	movs	r3, #60	@ 0x3c
 8003ab2:	81fb      	strh	r3, [r7, #14]
 8003ab4:	e020      	b.n	8003af8 <PWM_WS2812B_Rainbow+0x58>
	{
	  for (j = 0; j < 24; j++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	81bb      	strh	r3, [r7, #12]
 8003aba:	e017      	b.n	8003aec <PWM_WS2812B_Rainbow+0x4c>
	  	{
	  		WS2812B_BUFF[i+RESET_NUM][j] = WS2812B_BUFF[i-1+RESET_NUM][j];
 8003abc:	89f9      	ldrh	r1, [r7, #14]
 8003abe:	89bc      	ldrh	r4, [r7, #12]
 8003ac0:	89fb      	ldrh	r3, [r7, #14]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	89b8      	ldrh	r0, [r7, #12]
 8003ac6:	4d20      	ldr	r5, [pc, #128]	@ (8003b48 <PWM_WS2812B_Rainbow+0xa8>)
 8003ac8:	460b      	mov	r3, r1
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	440b      	add	r3, r1
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4423      	add	r3, r4
 8003ad2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8003ad6:	4c1c      	ldr	r4, [pc, #112]	@ (8003b48 <PWM_WS2812B_Rainbow+0xa8>)
 8003ad8:	4613      	mov	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4403      	add	r3, r0
 8003ae2:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	  for (j = 0; j < 24; j++)
 8003ae6:	89bb      	ldrh	r3, [r7, #12]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	81bb      	strh	r3, [r7, #12]
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	2b17      	cmp	r3, #23
 8003af0:	d9e4      	bls.n	8003abc <PWM_WS2812B_Rainbow+0x1c>
	for (i = LED_NUM; i > 0; i--)
 8003af2:	89fb      	ldrh	r3, [r7, #14]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	81fb      	strh	r3, [r7, #14]
 8003af8:	89fb      	ldrh	r3, [r7, #14]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1db      	bne.n	8003ab6 <PWM_WS2812B_Rainbow+0x16>
	  	}
	}

	  Color_Gradual(HSV,7);
 8003afe:	4913      	ldr	r1, [pc, #76]	@ (8003b4c <PWM_WS2812B_Rainbow+0xac>)
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f825 	bl	8003b50 <Color_Gradual>
	  WS2812B_Set_Color(0,1,rgb_to_int(hsv_to_rgb(*HSV)));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b0c:	f7ff fe04 	bl	8003718 <hsv_to_rgb>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	723a      	strb	r2, [r7, #8]
 8003b16:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003b1a:	727a      	strb	r2, [r7, #9]
 8003b1c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003b20:	72bb      	strb	r3, [r7, #10]
 8003b22:	68b8      	ldr	r0, [r7, #8]
 8003b24:	f7ff fed8 	bl	80038d8 <rgb_to_int>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f7ff ff82 	bl	8003a38 <WS2812B_Set_Color>
	  PWM_WS2812B_Refresh();
 8003b34:	f7ff ffa2 	bl	8003a7c <PWM_WS2812B_Refresh>
//	  RGB_Show_64();
	  HAL_Delay(40);
 8003b38:	2028      	movs	r0, #40	@ 0x28
 8003b3a:	f7fd fd85 	bl	8001648 <HAL_Delay>
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bdb0      	pop	{r4, r5, r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000108 	.word	0x20000108
 8003b4c:	40e00000 	.word	0x40e00000

08003b50 <Color_Gradual>:



void Color_Gradual(HSVColor* Color,float step)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]

		Color->h = fmod((Color->h + step), 360);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6839      	ldr	r1, [r7, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fc ffb5 	bl	8000ad0 <__addsf3>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fc fc53 	bl	8000414 <__aeabi_f2d>
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	4b08      	ldr	r3, [pc, #32]	@ (8003b94 <Color_Gradual+0x44>)
 8003b74:	f000 f842 	bl	8003bfc <fmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f7fc ff50 	bl	8000a24 <__aeabi_d2f>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40768000 	.word	0x40768000

08003b98 <memset>:
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4402      	add	r2, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <__errno>:
 8003ba8:	4b01      	ldr	r3, [pc, #4]	@ (8003bb0 <__errno+0x8>)
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	2000000c 	.word	0x2000000c

08003bb4 <__libc_init_array>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	4d0c      	ldr	r5, [pc, #48]	@ (8003bec <__libc_init_array+0x38>)
 8003bba:	4c0d      	ldr	r4, [pc, #52]	@ (8003bf0 <__libc_init_array+0x3c>)
 8003bbc:	1b64      	subs	r4, r4, r5
 8003bbe:	10a4      	asrs	r4, r4, #2
 8003bc0:	42a6      	cmp	r6, r4
 8003bc2:	d109      	bne.n	8003bd8 <__libc_init_array+0x24>
 8003bc4:	f000 f9e0 	bl	8003f88 <_init>
 8003bc8:	2600      	movs	r6, #0
 8003bca:	4d0a      	ldr	r5, [pc, #40]	@ (8003bf4 <__libc_init_array+0x40>)
 8003bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf8 <__libc_init_array+0x44>)
 8003bce:	1b64      	subs	r4, r4, r5
 8003bd0:	10a4      	asrs	r4, r4, #2
 8003bd2:	42a6      	cmp	r6, r4
 8003bd4:	d105      	bne.n	8003be2 <__libc_init_array+0x2e>
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bdc:	4798      	blx	r3
 8003bde:	3601      	adds	r6, #1
 8003be0:	e7ee      	b.n	8003bc0 <__libc_init_array+0xc>
 8003be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be6:	4798      	blx	r3
 8003be8:	3601      	adds	r6, #1
 8003bea:	e7f2      	b.n	8003bd2 <__libc_init_array+0x1e>
 8003bec:	08003fe8 	.word	0x08003fe8
 8003bf0:	08003fe8 	.word	0x08003fe8
 8003bf4:	08003fe8 	.word	0x08003fe8
 8003bf8:	08003fec 	.word	0x08003fec

08003bfc <fmod>:
 8003bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c00:	4680      	mov	r8, r0
 8003c02:	4689      	mov	r9, r1
 8003c04:	4616      	mov	r6, r2
 8003c06:	461f      	mov	r7, r3
 8003c08:	f000 f83c 	bl	8003c84 <__ieee754_fmod>
 8003c0c:	4632      	mov	r2, r6
 8003c0e:	4604      	mov	r4, r0
 8003c10:	460d      	mov	r5, r1
 8003c12:	463b      	mov	r3, r7
 8003c14:	4640      	mov	r0, r8
 8003c16:	4649      	mov	r1, r9
 8003c18:	f7fc feee 	bl	80009f8 <__aeabi_dcmpun>
 8003c1c:	b990      	cbnz	r0, 8003c44 <fmod+0x48>
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2300      	movs	r3, #0
 8003c22:	4630      	mov	r0, r6
 8003c24:	4639      	mov	r1, r7
 8003c26:	f7fc feb5 	bl	8000994 <__aeabi_dcmpeq>
 8003c2a:	b158      	cbz	r0, 8003c44 <fmod+0x48>
 8003c2c:	f7ff ffbc 	bl	8003ba8 <__errno>
 8003c30:	2321      	movs	r3, #33	@ 0x21
 8003c32:	2200      	movs	r2, #0
 8003c34:	6003      	str	r3, [r0, #0]
 8003c36:	2300      	movs	r3, #0
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f7fc fd6c 	bl	8000718 <__aeabi_ddiv>
 8003c40:	4604      	mov	r4, r0
 8003c42:	460d      	mov	r5, r1
 8003c44:	4620      	mov	r0, r4
 8003c46:	4629      	mov	r1, r5
 8003c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003c4c <fmodf>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	4606      	mov	r6, r0
 8003c50:	460d      	mov	r5, r1
 8003c52:	f000 f919 	bl	8003e88 <__ieee754_fmodf>
 8003c56:	4629      	mov	r1, r5
 8003c58:	4604      	mov	r4, r0
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f7fd fa06 	bl	800106c <__aeabi_fcmpun>
 8003c60:	b968      	cbnz	r0, 8003c7e <fmodf+0x32>
 8003c62:	2100      	movs	r1, #0
 8003c64:	4628      	mov	r0, r5
 8003c66:	f7fd f9cf 	bl	8001008 <__aeabi_fcmpeq>
 8003c6a:	b140      	cbz	r0, 8003c7e <fmodf+0x32>
 8003c6c:	f7ff ff9c 	bl	8003ba8 <__errno>
 8003c70:	2321      	movs	r3, #33	@ 0x21
 8003c72:	2100      	movs	r1, #0
 8003c74:	6003      	str	r3, [r0, #0]
 8003c76:	4608      	mov	r0, r1
 8003c78:	f7fd f8e6 	bl	8000e48 <__aeabi_fdiv>
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	4620      	mov	r0, r4
 8003c80:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c84 <__ieee754_fmod>:
 8003c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c88:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 8003c8c:	ea52 0408 	orrs.w	r4, r2, r8
 8003c90:	461e      	mov	r6, r3
 8003c92:	4696      	mov	lr, r2
 8003c94:	4694      	mov	ip, r2
 8003c96:	d00c      	beq.n	8003cb2 <__ieee754_fmod+0x2e>
 8003c98:	4d75      	ldr	r5, [pc, #468]	@ (8003e70 <__ieee754_fmod+0x1ec>)
 8003c9a:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 8003c9e:	45a9      	cmp	r9, r5
 8003ca0:	460c      	mov	r4, r1
 8003ca2:	d806      	bhi.n	8003cb2 <__ieee754_fmod+0x2e>
 8003ca4:	4255      	negs	r5, r2
 8003ca6:	4f73      	ldr	r7, [pc, #460]	@ (8003e74 <__ieee754_fmod+0x1f0>)
 8003ca8:	4315      	orrs	r5, r2
 8003caa:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 8003cae:	42bd      	cmp	r5, r7
 8003cb0:	d907      	bls.n	8003cc2 <__ieee754_fmod+0x3e>
 8003cb2:	f7fc fc07 	bl	80004c4 <__aeabi_dmul>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	f7fc fd2d 	bl	8000718 <__aeabi_ddiv>
 8003cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc2:	45c1      	cmp	r9, r8
 8003cc4:	4682      	mov	sl, r0
 8003cc6:	4607      	mov	r7, r0
 8003cc8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8003ccc:	dc09      	bgt.n	8003ce2 <__ieee754_fmod+0x5e>
 8003cce:	dbf6      	blt.n	8003cbe <__ieee754_fmod+0x3a>
 8003cd0:	4282      	cmp	r2, r0
 8003cd2:	d8f4      	bhi.n	8003cbe <__ieee754_fmod+0x3a>
 8003cd4:	d105      	bne.n	8003ce2 <__ieee754_fmod+0x5e>
 8003cd6:	4b68      	ldr	r3, [pc, #416]	@ (8003e78 <__ieee754_fmod+0x1f4>)
 8003cd8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8003cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ce0:	e7ed      	b.n	8003cbe <__ieee754_fmod+0x3a>
 8003ce2:	4964      	ldr	r1, [pc, #400]	@ (8003e74 <__ieee754_fmod+0x1f0>)
 8003ce4:	420c      	tst	r4, r1
 8003ce6:	d148      	bne.n	8003d7a <__ieee754_fmod+0xf6>
 8003ce8:	f1b9 0f00 	cmp.w	r9, #0
 8003cec:	d13d      	bne.n	8003d6a <__ieee754_fmod+0xe6>
 8003cee:	4653      	mov	r3, sl
 8003cf0:	4a62      	ldr	r2, [pc, #392]	@ (8003e7c <__ieee754_fmod+0x1f8>)
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	dc36      	bgt.n	8003d64 <__ieee754_fmod+0xe0>
 8003cf6:	420e      	tst	r6, r1
 8003cf8:	d14f      	bne.n	8003d9a <__ieee754_fmod+0x116>
 8003cfa:	f1b8 0f00 	cmp.w	r8, #0
 8003cfe:	d144      	bne.n	8003d8a <__ieee754_fmod+0x106>
 8003d00:	4671      	mov	r1, lr
 8003d02:	4b5e      	ldr	r3, [pc, #376]	@ (8003e7c <__ieee754_fmod+0x1f8>)
 8003d04:	2900      	cmp	r1, #0
 8003d06:	dc3d      	bgt.n	8003d84 <__ieee754_fmod+0x100>
 8003d08:	485d      	ldr	r0, [pc, #372]	@ (8003e80 <__ieee754_fmod+0x1fc>)
 8003d0a:	4282      	cmp	r2, r0
 8003d0c:	db4a      	blt.n	8003da4 <__ieee754_fmod+0x120>
 8003d0e:	f3c4 0113 	ubfx	r1, r4, #0, #20
 8003d12:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8003d16:	485a      	ldr	r0, [pc, #360]	@ (8003e80 <__ieee754_fmod+0x1fc>)
 8003d18:	4283      	cmp	r3, r0
 8003d1a:	db57      	blt.n	8003dcc <__ieee754_fmod+0x148>
 8003d1c:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8003d20:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8003d24:	1ad0      	subs	r0, r2, r3
 8003d26:	1b8a      	subs	r2, r1, r6
 8003d28:	eba7 040c 	sub.w	r4, r7, ip
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d162      	bne.n	8003df6 <__ieee754_fmod+0x172>
 8003d30:	4567      	cmp	r7, ip
 8003d32:	bf38      	it	cc
 8003d34:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8003d38:	2a00      	cmp	r2, #0
 8003d3a:	bfbc      	itt	lt
 8003d3c:	463c      	movlt	r4, r7
 8003d3e:	460a      	movlt	r2, r1
 8003d40:	ea52 0104 	orrs.w	r1, r2, r4
 8003d44:	d0c7      	beq.n	8003cd6 <__ieee754_fmod+0x52>
 8003d46:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8003d4a:	db69      	blt.n	8003e20 <__ieee754_fmod+0x19c>
 8003d4c:	494c      	ldr	r1, [pc, #304]	@ (8003e80 <__ieee754_fmod+0x1fc>)
 8003d4e:	428b      	cmp	r3, r1
 8003d50:	db6c      	blt.n	8003e2c <__ieee754_fmod+0x1a8>
 8003d52:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8003d56:	432a      	orrs	r2, r5
 8003d58:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 8003d62:	e7ac      	b.n	8003cbe <__ieee754_fmod+0x3a>
 8003d64:	3a01      	subs	r2, #1
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	e7c3      	b.n	8003cf2 <__ieee754_fmod+0x6e>
 8003d6a:	4a45      	ldr	r2, [pc, #276]	@ (8003e80 <__ieee754_fmod+0x1fc>)
 8003d6c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	ddc0      	ble.n	8003cf6 <__ieee754_fmod+0x72>
 8003d74:	3a01      	subs	r2, #1
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	e7fa      	b.n	8003d70 <__ieee754_fmod+0xec>
 8003d7a:	ea4f 5229 	mov.w	r2, r9, asr #20
 8003d7e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8003d82:	e7b8      	b.n	8003cf6 <__ieee754_fmod+0x72>
 8003d84:	3b01      	subs	r3, #1
 8003d86:	0049      	lsls	r1, r1, #1
 8003d88:	e7bc      	b.n	8003d04 <__ieee754_fmod+0x80>
 8003d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e80 <__ieee754_fmod+0x1fc>)
 8003d8c:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8003d90:	2900      	cmp	r1, #0
 8003d92:	ddb9      	ble.n	8003d08 <__ieee754_fmod+0x84>
 8003d94:	3b01      	subs	r3, #1
 8003d96:	0049      	lsls	r1, r1, #1
 8003d98:	e7fa      	b.n	8003d90 <__ieee754_fmod+0x10c>
 8003d9a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003d9e:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8003da2:	e7b1      	b.n	8003d08 <__ieee754_fmod+0x84>
 8003da4:	1a80      	subs	r0, r0, r2
 8003da6:	281f      	cmp	r0, #31
 8003da8:	dc0a      	bgt.n	8003dc0 <__ieee754_fmod+0x13c>
 8003daa:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 8003dae:	fa09 f900 	lsl.w	r9, r9, r0
 8003db2:	fa2a f101 	lsr.w	r1, sl, r1
 8003db6:	ea41 0109 	orr.w	r1, r1, r9
 8003dba:	fa0a f700 	lsl.w	r7, sl, r0
 8003dbe:	e7aa      	b.n	8003d16 <__ieee754_fmod+0x92>
 8003dc0:	4930      	ldr	r1, [pc, #192]	@ (8003e84 <__ieee754_fmod+0x200>)
 8003dc2:	2700      	movs	r7, #0
 8003dc4:	1a89      	subs	r1, r1, r2
 8003dc6:	fa0a f101 	lsl.w	r1, sl, r1
 8003dca:	e7a4      	b.n	8003d16 <__ieee754_fmod+0x92>
 8003dcc:	1ac0      	subs	r0, r0, r3
 8003dce:	281f      	cmp	r0, #31
 8003dd0:	dc0a      	bgt.n	8003de8 <__ieee754_fmod+0x164>
 8003dd2:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 8003dd6:	fa08 f800 	lsl.w	r8, r8, r0
 8003dda:	fa2e f606 	lsr.w	r6, lr, r6
 8003dde:	ea46 0608 	orr.w	r6, r6, r8
 8003de2:	fa0e fc00 	lsl.w	ip, lr, r0
 8003de6:	e79d      	b.n	8003d24 <__ieee754_fmod+0xa0>
 8003de8:	4e26      	ldr	r6, [pc, #152]	@ (8003e84 <__ieee754_fmod+0x200>)
 8003dea:	f04f 0c00 	mov.w	ip, #0
 8003dee:	1af6      	subs	r6, r6, r3
 8003df0:	fa0e f606 	lsl.w	r6, lr, r6
 8003df4:	e796      	b.n	8003d24 <__ieee754_fmod+0xa0>
 8003df6:	4567      	cmp	r7, ip
 8003df8:	bf38      	it	cc
 8003dfa:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8003dfe:	2a00      	cmp	r2, #0
 8003e00:	da05      	bge.n	8003e0e <__ieee754_fmod+0x18a>
 8003e02:	0ffa      	lsrs	r2, r7, #31
 8003e04:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003e08:	007f      	lsls	r7, r7, #1
 8003e0a:	3801      	subs	r0, #1
 8003e0c:	e78b      	b.n	8003d26 <__ieee754_fmod+0xa2>
 8003e0e:	ea52 0104 	orrs.w	r1, r2, r4
 8003e12:	f43f af60 	beq.w	8003cd6 <__ieee754_fmod+0x52>
 8003e16:	0fe1      	lsrs	r1, r4, #31
 8003e18:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8003e1c:	0067      	lsls	r7, r4, #1
 8003e1e:	e7f4      	b.n	8003e0a <__ieee754_fmod+0x186>
 8003e20:	0fe1      	lsrs	r1, r4, #31
 8003e22:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003e26:	0064      	lsls	r4, r4, #1
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	e78c      	b.n	8003d46 <__ieee754_fmod+0xc2>
 8003e2c:	1ac9      	subs	r1, r1, r3
 8003e2e:	2914      	cmp	r1, #20
 8003e30:	dc0a      	bgt.n	8003e48 <__ieee754_fmod+0x1c4>
 8003e32:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	40cc      	lsrs	r4, r1
 8003e3c:	4323      	orrs	r3, r4
 8003e3e:	410a      	asrs	r2, r1
 8003e40:	4618      	mov	r0, r3
 8003e42:	ea42 0105 	orr.w	r1, r2, r5
 8003e46:	e73a      	b.n	8003cbe <__ieee754_fmod+0x3a>
 8003e48:	291f      	cmp	r1, #31
 8003e4a:	dc07      	bgt.n	8003e5c <__ieee754_fmod+0x1d8>
 8003e4c:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8003e50:	40cc      	lsrs	r4, r1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	4323      	orrs	r3, r4
 8003e58:	462a      	mov	r2, r5
 8003e5a:	e7f1      	b.n	8003e40 <__ieee754_fmod+0x1bc>
 8003e5c:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 8003e60:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8003e64:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 8003e68:	33e2      	adds	r3, #226	@ 0xe2
 8003e6a:	fa42 f303 	asr.w	r3, r2, r3
 8003e6e:	e7f3      	b.n	8003e58 <__ieee754_fmod+0x1d4>
 8003e70:	7fefffff 	.word	0x7fefffff
 8003e74:	7ff00000 	.word	0x7ff00000
 8003e78:	08003fd0 	.word	0x08003fd0
 8003e7c:	fffffbed 	.word	0xfffffbed
 8003e80:	fffffc02 	.word	0xfffffc02
 8003e84:	fffffbe2 	.word	0xfffffbe2

08003e88 <__ieee754_fmodf>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8003e8e:	1e63      	subs	r3, r4, #1
 8003e90:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003e94:	460f      	mov	r7, r1
 8003e96:	d205      	bcs.n	8003ea4 <__ieee754_fmodf+0x1c>
 8003e98:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003e9c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	d305      	bcc.n	8003eb0 <__ieee754_fmodf+0x28>
 8003ea4:	f7fc ff1c 	bl	8000ce0 <__aeabi_fmul>
 8003ea8:	4601      	mov	r1, r0
 8003eaa:	f7fc ffcd 	bl	8000e48 <__aeabi_fdiv>
 8003eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	dbfc      	blt.n	8003eae <__ieee754_fmodf+0x26>
 8003eb4:	f000 4600 	and.w	r6, r0, #2147483648	@ 0x80000000
 8003eb8:	d104      	bne.n	8003ec4 <__ieee754_fmodf+0x3c>
 8003eba:	4b32      	ldr	r3, [pc, #200]	@ (8003f84 <__ieee754_fmodf+0xfc>)
 8003ebc:	0ff6      	lsrs	r6, r6, #31
 8003ebe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003ec2:	e7f4      	b.n	8003eae <__ieee754_fmodf+0x26>
 8003ec4:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8003ec8:	d144      	bne.n	8003f54 <__ieee754_fmodf+0xcc>
 8003eca:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8003ece:	021a      	lsls	r2, r3, #8
 8003ed0:	2a00      	cmp	r2, #0
 8003ed2:	dc3c      	bgt.n	8003f4e <__ieee754_fmodf+0xc6>
 8003ed4:	f017 4fff 	tst.w	r7, #2139095040	@ 0x7f800000
 8003ed8:	bf03      	ittte	eq
 8003eda:	0222      	lsleq	r2, r4, #8
 8003edc:	fab2 f282 	clzeq	r2, r2
 8003ee0:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8003ee4:	15e2      	asrne	r2, r4, #23
 8003ee6:	bf06      	itte	eq
 8003ee8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8003eec:	3282      	addeq	r2, #130	@ 0x82
 8003eee:	3a7f      	subne	r2, #127	@ 0x7f
 8003ef0:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8003ef4:	bfb7      	itett	lt
 8003ef6:	f06f 017d 	mvnlt.w	r1, #125	@ 0x7d
 8003efa:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 8003efe:	1a09      	sublt	r1, r1, r0
 8003f00:	fa03 f101 	lsllt.w	r1, r3, r1
 8003f04:	bfa8      	it	ge
 8003f06:	f445 0100 	orrge.w	r1, r5, #8388608	@ 0x800000
 8003f0a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8003f0e:	bfb5      	itete	lt
 8003f10:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 8003f14:	f3c7 0316 	ubfxge	r3, r7, #0, #23
 8003f18:	1a9b      	sublt	r3, r3, r2
 8003f1a:	f443 0400 	orrge.w	r4, r3, #8388608	@ 0x800000
 8003f1e:	bfb8      	it	lt
 8003f20:	409c      	lsllt	r4, r3
 8003f22:	1a80      	subs	r0, r0, r2
 8003f24:	1b0b      	subs	r3, r1, r4
 8003f26:	b9c0      	cbnz	r0, 8003f5a <__ieee754_fmodf+0xd2>
 8003f28:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8003f2c:	bf28      	it	cs
 8003f2e:	460b      	movcs	r3, r1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0c2      	beq.n	8003eba <__ieee754_fmodf+0x32>
 8003f34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f38:	db17      	blt.n	8003f6a <__ieee754_fmodf+0xe2>
 8003f3a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8003f3e:	db17      	blt.n	8003f70 <__ieee754_fmodf+0xe8>
 8003f40:	f5a3 0000 	sub.w	r0, r3, #8388608	@ 0x800000
 8003f44:	327f      	adds	r2, #127	@ 0x7f
 8003f46:	4330      	orrs	r0, r6
 8003f48:	ea40 50c2 	orr.w	r0, r0, r2, lsl #23
 8003f4c:	e7af      	b.n	8003eae <__ieee754_fmodf+0x26>
 8003f4e:	3801      	subs	r0, #1
 8003f50:	0052      	lsls	r2, r2, #1
 8003f52:	e7bd      	b.n	8003ed0 <__ieee754_fmodf+0x48>
 8003f54:	15d8      	asrs	r0, r3, #23
 8003f56:	387f      	subs	r0, #127	@ 0x7f
 8003f58:	e7bc      	b.n	8003ed4 <__ieee754_fmodf+0x4c>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da02      	bge.n	8003f64 <__ieee754_fmodf+0xdc>
 8003f5e:	0049      	lsls	r1, r1, #1
 8003f60:	3801      	subs	r0, #1
 8003f62:	e7df      	b.n	8003f24 <__ieee754_fmodf+0x9c>
 8003f64:	d0a9      	beq.n	8003eba <__ieee754_fmodf+0x32>
 8003f66:	0059      	lsls	r1, r3, #1
 8003f68:	e7fa      	b.n	8003f60 <__ieee754_fmodf+0xd8>
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	3a01      	subs	r2, #1
 8003f6e:	e7e1      	b.n	8003f34 <__ieee754_fmodf+0xac>
 8003f70:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8003f74:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8003f78:	3282      	adds	r2, #130	@ 0x82
 8003f7a:	fa43 f002 	asr.w	r0, r3, r2
 8003f7e:	4330      	orrs	r0, r6
 8003f80:	e795      	b.n	8003eae <__ieee754_fmodf+0x26>
 8003f82:	bf00      	nop
 8003f84:	08003fe0 	.word	0x08003fe0

08003f88 <_init>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr

08003f94 <_fini>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr
