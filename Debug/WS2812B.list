
WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003944  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003a50  08003a50  00004a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b50  08003b50  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003b50  08003b50  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b50  08003b50  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b50  08003b50  00004b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b54  08003b54  00004b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003b58  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a9c  20000068  08003bc0  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003b04  08003bc0  00005b04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cd5  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3a  00000000  00000000  0000dd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0000fba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087e  00000000  00000000  000106d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188e9  00000000  00000000  00010f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d44c  00000000  00000000  00029837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089dd3  00000000  00000000  00036c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0a56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003610  00000000  00000000  000c0a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c40ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a38 	.word	0x08003a38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003a38 	.word	0x08003a38

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	@ (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	@ (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	@ (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	2011      	movs	r0, #17
 8000170:	f000 fc31 	bl	80009d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000174:	2011      	movs	r0, #17
 8000176:	f000 fc4a 	bl	8000a0e <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800018e:	4b0e      	ldr	r3, [pc, #56]	@ (80001c8 <MX_GPIO_Init+0x40>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a0d      	ldr	r2, [pc, #52]	@ (80001c8 <MX_GPIO_Init+0x40>)
 8000194:	f043 0320 	orr.w	r3, r3, #32
 8000198:	6193      	str	r3, [r2, #24]
 800019a:	4b0b      	ldr	r3, [pc, #44]	@ (80001c8 <MX_GPIO_Init+0x40>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	f003 0320 	and.w	r3, r3, #32
 80001a2:	607b      	str	r3, [r7, #4]
 80001a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a6:	4b08      	ldr	r3, [pc, #32]	@ (80001c8 <MX_GPIO_Init+0x40>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a07      	ldr	r2, [pc, #28]	@ (80001c8 <MX_GPIO_Init+0x40>)
 80001ac:	f043 0304 	orr.w	r3, r3, #4
 80001b0:	6193      	str	r3, [r2, #24]
 80001b2:	4b05      	ldr	r3, [pc, #20]	@ (80001c8 <MX_GPIO_Init+0x40>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	f003 0304 	and.w	r3, r3, #4
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	683b      	ldr	r3, [r7, #0]

}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40021000 	.word	0x40021000

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 faa4 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f80e 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f7ff ffd6 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f7ff ffb6 	bl	800014c <MX_DMA_Init>
  MX_TIM2_Init();
 80001e0:	f000 f984 	bl	80004ec <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RGB_Show_64();
 80001e4:	f002 fc28 	bl	8002a38 <RGB_Show_64>
	  HAL_Delay(1000);
 80001e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ec:	f000 faf8 	bl	80007e0 <HAL_Delay>
	  RGB_Show_64();
 80001f0:	bf00      	nop
 80001f2:	e7f7      	b.n	80001e4 <main+0x18>

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	@ 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	@ 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fd73 	bl	8002cee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000216:	2301      	movs	r3, #1
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800021e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000230:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000232:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	4618      	mov	r0, r3
 800023e:	f000 ff73 	bl	8001128 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000248:	f000 f819 	bl	800027e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2302      	movs	r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2102      	movs	r1, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f001 f9e0 	bl	800162c <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000272:	f000 f804 	bl	800027e <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	@ 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000282:	b672      	cpsid	i
}
 8000284:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000286:	bf00      	nop
 8000288:	e7fd      	b.n	8000286 <Error_Handler+0x8>
	...

0800028c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000292:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <HAL_MspInit+0x5c>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	4a14      	ldr	r2, [pc, #80]	@ (80002e8 <HAL_MspInit+0x5c>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6193      	str	r3, [r2, #24]
 800029e:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <HAL_MspInit+0x5c>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f003 0301 	and.w	r3, r3, #1
 80002a6:	60bb      	str	r3, [r7, #8]
 80002a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002aa:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <HAL_MspInit+0x5c>)
 80002ac:	69db      	ldr	r3, [r3, #28]
 80002ae:	4a0e      	ldr	r2, [pc, #56]	@ (80002e8 <HAL_MspInit+0x5c>)
 80002b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002b4:	61d3      	str	r3, [r2, #28]
 80002b6:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <HAL_MspInit+0x5c>)
 80002b8:	69db      	ldr	r3, [r3, #28]
 80002ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002c2:	4b0a      	ldr	r3, [pc, #40]	@ (80002ec <HAL_MspInit+0x60>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	4a04      	ldr	r2, [pc, #16]	@ (80002ec <HAL_MspInit+0x60>)
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002de:	bf00      	nop
 80002e0:	3714      	adds	r7, #20
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40010000 	.word	0x40010000

080002f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002f4:	bf00      	nop
 80002f6:	e7fd      	b.n	80002f4 <NMI_Handler+0x4>

080002f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <HardFault_Handler+0x4>

08000300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000304:	bf00      	nop
 8000306:	e7fd      	b.n	8000304 <MemManage_Handler+0x4>

08000308 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800030c:	bf00      	nop
 800030e:	e7fd      	b.n	800030c <BusFault_Handler+0x4>

08000310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000314:	bf00      	nop
 8000316:	e7fd      	b.n	8000314 <UsageFault_Handler+0x4>

08000318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr

08000324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000340:	f000 fa32 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}

08000348 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800034c:	4802      	ldr	r0, [pc, #8]	@ (8000358 <DMA1_Channel7_IRQHandler+0x10>)
 800034e:	f000 fc33 	bl	8000bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000d0 	.word	0x200000d0

0800035c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  return 1;
 8000360:	2301      	movs	r3, #1
}
 8000362:	4618      	mov	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <_kill>:

int _kill(int pid, int sig)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b082      	sub	sp, #8
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000374:	f002 fd0a 	bl	8002d8c <__errno>
 8000378:	4603      	mov	r3, r0
 800037a:	2216      	movs	r2, #22
 800037c:	601a      	str	r2, [r3, #0]
  return -1;
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000382:	4618      	mov	r0, r3
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}

0800038a <_exit>:

void _exit (int status)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b082      	sub	sp, #8
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000392:	f04f 31ff 	mov.w	r1, #4294967295
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f7ff ffe7 	bl	800036a <_kill>
  while (1) {}    /* Make sure we hang here */
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <_exit+0x12>

080003a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	e00a      	b.n	80003c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003b2:	f3af 8000 	nop.w
 80003b6:	4601      	mov	r1, r0
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	1c5a      	adds	r2, r3, #1
 80003bc:	60ba      	str	r2, [r7, #8]
 80003be:	b2ca      	uxtb	r2, r1
 80003c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	3301      	adds	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697a      	ldr	r2, [r7, #20]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	dbf0      	blt.n	80003b2 <_read+0x12>
  }

  return len;
 80003d0:	687b      	ldr	r3, [r7, #4]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3718      	adds	r7, #24
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	b086      	sub	sp, #24
 80003de:	af00      	add	r7, sp, #0
 80003e0:	60f8      	str	r0, [r7, #12]
 80003e2:	60b9      	str	r1, [r7, #8]
 80003e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	e009      	b.n	8000400 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	1c5a      	adds	r2, r3, #1
 80003f0:	60ba      	str	r2, [r7, #8]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	3301      	adds	r3, #1
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	697a      	ldr	r2, [r7, #20]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	429a      	cmp	r2, r3
 8000406:	dbf1      	blt.n	80003ec <_write+0x12>
  }
  return len;
 8000408:	687b      	ldr	r3, [r7, #4]
}
 800040a:	4618      	mov	r0, r3
 800040c:	3718      	adds	r7, #24
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <_close>:

int _close(int file)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800041a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800041e:	4618      	mov	r0, r3
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000438:	605a      	str	r2, [r3, #4]
  return 0;
 800043a:	2300      	movs	r3, #0
}
 800043c:	4618      	mov	r0, r3
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <_isatty>:

int _isatty(int file)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800044e:	2301      	movs	r3, #1
}
 8000450:	4618      	mov	r0, r3
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr

0800045a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800045a:	b480      	push	{r7}
 800045c:	b085      	sub	sp, #20
 800045e:	af00      	add	r7, sp, #0
 8000460:	60f8      	str	r0, [r7, #12]
 8000462:	60b9      	str	r1, [r7, #8]
 8000464:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000466:	2300      	movs	r3, #0
}
 8000468:	4618      	mov	r0, r3
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
	...

08000474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800047c:	4a14      	ldr	r2, [pc, #80]	@ (80004d0 <_sbrk+0x5c>)
 800047e:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <_sbrk+0x60>)
 8000480:	1ad3      	subs	r3, r2, r3
 8000482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <_sbrk+0x64>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d102      	bne.n	8000496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000490:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <_sbrk+0x64>)
 8000492:	4a12      	ldr	r2, [pc, #72]	@ (80004dc <_sbrk+0x68>)
 8000494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000496:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <_sbrk+0x64>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4413      	add	r3, r2
 800049e:	693a      	ldr	r2, [r7, #16]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d207      	bcs.n	80004b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004a4:	f002 fc72 	bl	8002d8c <__errno>
 80004a8:	4603      	mov	r3, r0
 80004aa:	220c      	movs	r2, #12
 80004ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ae:	f04f 33ff 	mov.w	r3, #4294967295
 80004b2:	e009      	b.n	80004c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004b4:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <_sbrk+0x64>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ba:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <_sbrk+0x64>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	4a05      	ldr	r2, [pc, #20]	@ (80004d8 <_sbrk+0x64>)
 80004c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3718      	adds	r7, #24
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20005000 	.word	0x20005000
 80004d4:	00000400 	.word	0x00000400
 80004d8:	20000084 	.word	0x20000084
 80004dc:	20003b08 	.word	0x20003b08

080004e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08e      	sub	sp, #56	@ 0x38
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000500:	f107 0320 	add.w	r3, r7, #32
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800051c:	4b2c      	ldr	r3, [pc, #176]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 800051e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000524:	4b2a      	ldr	r3, [pc, #168]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052a:	4b29      	ldr	r3, [pc, #164]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8000530:	4b27      	ldr	r3, [pc, #156]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 8000532:	2259      	movs	r2, #89	@ 0x59
 8000534:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000536:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053c:	4b24      	ldr	r3, [pc, #144]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000542:	4823      	ldr	r0, [pc, #140]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 8000544:	f001 f9ce 	bl	80018e4 <HAL_TIM_Base_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800054e:	f7ff fe96 	bl	800027e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000552:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000556:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000558:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800055c:	4619      	mov	r1, r3
 800055e:	481c      	ldr	r0, [pc, #112]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 8000560:	f001 fccc 	bl	8001efc <HAL_TIM_ConfigClockSource>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800056a:	f7ff fe88 	bl	800027e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800056e:	4818      	ldr	r0, [pc, #96]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 8000570:	f001 fa07 	bl	8001982 <HAL_TIM_PWM_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800057a:	f7ff fe80 	bl	800027e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800057e:	2300      	movs	r3, #0
 8000580:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000582:	2300      	movs	r3, #0
 8000584:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	4619      	mov	r1, r3
 800058c:	4810      	ldr	r0, [pc, #64]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 800058e:	f002 f919 	bl	80027c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000598:	f7ff fe71 	bl	800027e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800059c:	2360      	movs	r3, #96	@ 0x60
 800059e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2204      	movs	r2, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	4807      	ldr	r0, [pc, #28]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 80005b4:	f001 fbe0 	bl	8001d78 <HAL_TIM_PWM_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80005be:	f7ff fe5e 	bl	800027e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005c2:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <MX_TIM2_Init+0xe4>)
 80005c4:	f000 f854 	bl	8000670 <HAL_TIM_MspPostInit>

}
 80005c8:	bf00      	nop
 80005ca:	3738      	adds	r7, #56	@ 0x38
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000088 	.word	0x20000088

080005d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005e4:	d13a      	bne.n	800065c <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <HAL_TIM_Base_MspInit+0x90>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000664 <HAL_TIM_Base_MspInit+0x90>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	61d3      	str	r3, [r2, #28]
 80005f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <HAL_TIM_Base_MspInit+0x90>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 8000600:	4a1a      	ldr	r2, [pc, #104]	@ (800066c <HAL_TIM_Base_MspInit+0x98>)
 8000602:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000604:	4b18      	ldr	r3, [pc, #96]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 8000606:	2210      	movs	r2, #16
 8000608:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800060a:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000610:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 8000612:	2280      	movs	r2, #128	@ 0x80
 8000614:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000616:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 8000618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800061c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800061e:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 8000620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000624:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 800062e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000632:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 8000636:	f000 fa05 	bl	8000a44 <HAL_DMA_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000640:	f7ff fe1d 	bl	800027e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a08      	ldr	r2, [pc, #32]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 8000648:	629a      	str	r2, [r3, #40]	@ 0x28
 800064a:	4a07      	ldr	r2, [pc, #28]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 8000654:	631a      	str	r2, [r3, #48]	@ 0x30
 8000656:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <HAL_TIM_Base_MspInit+0x94>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	200000d0 	.word	0x200000d0
 800066c:	40020080 	.word	0x40020080

08000670 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800068e:	d117      	bne.n	80006c0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <HAL_TIM_MspPostInit+0x58>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <HAL_TIM_MspPostInit+0x58>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <HAL_TIM_MspPostInit+0x58>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	4804      	ldr	r0, [pc, #16]	@ (80006cc <HAL_TIM_MspPostInit+0x5c>)
 80006bc:	f000 fbb0 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800

080006d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d0:	f7ff ff06 	bl	80004e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480b      	ldr	r0, [pc, #44]	@ (8000704 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006d6:	490c      	ldr	r1, [pc, #48]	@ (8000708 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006d8:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <LoopFillZerobss+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a09      	ldr	r2, [pc, #36]	@ (8000710 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006ec:	4c09      	ldr	r4, [pc, #36]	@ (8000714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fa:	f002 fb4d 	bl	8002d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fd65 	bl	80001cc <main>
  bx lr
 8000702:	4770      	bx	lr
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800070c:	08003b58 	.word	0x08003b58
  ldr r2, =_sbss
 8000710:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000714:	20003b04 	.word	0x20003b04

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	@ (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f947 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	200f      	movs	r0, #15
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fda8 	bl	800028c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f95f 	bl	8000a2a <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 f927 	bl	80009d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	@ (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <HAL_IncTick+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <HAL_IncTick+0x20>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a03      	ldr	r2, [pc, #12]	@ (80007c8 <HAL_IncTick+0x20>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000114 	.word	0x20000114

080007cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b02      	ldr	r3, [pc, #8]	@ (80007dc <HAL_GetTick+0x10>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	20000114 	.word	0x20000114

080007e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e8:	f7ff fff0 	bl	80007cc <HAL_GetTick>
 80007ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f8:	d005      	beq.n	8000806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <HAL_Delay+0x44>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000806:	bf00      	nop
 8000808:	f7ff ffe0 	bl	80007cc <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f7      	bhi.n	8000808 <HAL_Delay+0x28>
  {
  }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	@ (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4906      	ldr	r1, [pc, #24]	@ (80008c0 <__NVIC_EnableIRQ+0x34>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	@ (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	@ (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	@ 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	@ 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f7ff ff90 	bl	80008c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff2d 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff42 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff90 	bl	8000918 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5f 	bl	80008c4 <__NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff35 	bl	800088c <__NVIC_EnableIRQ>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffa2 	bl	800097c <SysTick_Config>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e043      	b.n	8000ae2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <HAL_DMA_Init+0xa8>)
 8000a62:	4413      	add	r3, r2
 8000a64:	4a22      	ldr	r2, [pc, #136]	@ (8000af0 <HAL_DMA_Init+0xac>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	091b      	lsrs	r3, r3, #4
 8000a6c:	009a      	lsls	r2, r3, #2
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a1f      	ldr	r2, [pc, #124]	@ (8000af4 <HAL_DMA_Init+0xb0>)
 8000a76:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000a8e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000a92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	bffdfff8 	.word	0xbffdfff8
 8000af0:	cccccccd 	.word	0xcccccccd
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d101      	bne.n	8000b18 <HAL_DMA_Start_IT+0x20>
 8000b14:	2302      	movs	r3, #2
 8000b16:	e04b      	b.n	8000bb0 <HAL_DMA_Start_IT+0xb8>
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d13a      	bne.n	8000ba2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2202      	movs	r2, #2
 8000b30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2200      	movs	r2, #0
 8000b38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 0201 	bic.w	r2, r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 f937 	bl	8000dc4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d008      	beq.n	8000b70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f042 020e 	orr.w	r2, r2, #14
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	e00f      	b.n	8000b90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0204 	bic.w	r2, r2, #4
 8000b7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f042 020a 	orr.w	r2, r2, #10
 8000b8e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f042 0201 	orr.w	r2, r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	e005      	b.n	8000bae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000baa:	2302      	movs	r3, #2
 8000bac:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d04f      	beq.n	8000c80 <HAL_DMA_IRQHandler+0xc8>
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d04a      	beq.n	8000c80 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d107      	bne.n	8000c08 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0204 	bic.w	r2, r2, #4
 8000c06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a66      	ldr	r2, [pc, #408]	@ (8000da8 <HAL_DMA_IRQHandler+0x1f0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d029      	beq.n	8000c66 <HAL_DMA_IRQHandler+0xae>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a65      	ldr	r2, [pc, #404]	@ (8000dac <HAL_DMA_IRQHandler+0x1f4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d022      	beq.n	8000c62 <HAL_DMA_IRQHandler+0xaa>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a63      	ldr	r2, [pc, #396]	@ (8000db0 <HAL_DMA_IRQHandler+0x1f8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d01a      	beq.n	8000c5c <HAL_DMA_IRQHandler+0xa4>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a62      	ldr	r2, [pc, #392]	@ (8000db4 <HAL_DMA_IRQHandler+0x1fc>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d012      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x9e>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a60      	ldr	r2, [pc, #384]	@ (8000db8 <HAL_DMA_IRQHandler+0x200>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d00a      	beq.n	8000c50 <HAL_DMA_IRQHandler+0x98>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a5f      	ldr	r2, [pc, #380]	@ (8000dbc <HAL_DMA_IRQHandler+0x204>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d102      	bne.n	8000c4a <HAL_DMA_IRQHandler+0x92>
 8000c44:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c48:	e00e      	b.n	8000c68 <HAL_DMA_IRQHandler+0xb0>
 8000c4a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000c4e:	e00b      	b.n	8000c68 <HAL_DMA_IRQHandler+0xb0>
 8000c50:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000c54:	e008      	b.n	8000c68 <HAL_DMA_IRQHandler+0xb0>
 8000c56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c5a:	e005      	b.n	8000c68 <HAL_DMA_IRQHandler+0xb0>
 8000c5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c60:	e002      	b.n	8000c68 <HAL_DMA_IRQHandler+0xb0>
 8000c62:	2340      	movs	r3, #64	@ 0x40
 8000c64:	e000      	b.n	8000c68 <HAL_DMA_IRQHandler+0xb0>
 8000c66:	2304      	movs	r3, #4
 8000c68:	4a55      	ldr	r2, [pc, #340]	@ (8000dc0 <HAL_DMA_IRQHandler+0x208>)
 8000c6a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f000 8094 	beq.w	8000d9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000c7e:	e08e      	b.n	8000d9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c84:	2202      	movs	r2, #2
 8000c86:	409a      	lsls	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d056      	beq.n	8000d3e <HAL_DMA_IRQHandler+0x186>
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d051      	beq.n	8000d3e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0320 	and.w	r3, r3, #32
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10b      	bne.n	8000cc0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 020a 	bic.w	r2, r2, #10
 8000cb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a38      	ldr	r2, [pc, #224]	@ (8000da8 <HAL_DMA_IRQHandler+0x1f0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d029      	beq.n	8000d1e <HAL_DMA_IRQHandler+0x166>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a37      	ldr	r2, [pc, #220]	@ (8000dac <HAL_DMA_IRQHandler+0x1f4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d022      	beq.n	8000d1a <HAL_DMA_IRQHandler+0x162>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a35      	ldr	r2, [pc, #212]	@ (8000db0 <HAL_DMA_IRQHandler+0x1f8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d01a      	beq.n	8000d14 <HAL_DMA_IRQHandler+0x15c>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a34      	ldr	r2, [pc, #208]	@ (8000db4 <HAL_DMA_IRQHandler+0x1fc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d012      	beq.n	8000d0e <HAL_DMA_IRQHandler+0x156>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a32      	ldr	r2, [pc, #200]	@ (8000db8 <HAL_DMA_IRQHandler+0x200>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d00a      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x150>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a31      	ldr	r2, [pc, #196]	@ (8000dbc <HAL_DMA_IRQHandler+0x204>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d102      	bne.n	8000d02 <HAL_DMA_IRQHandler+0x14a>
 8000cfc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d00:	e00e      	b.n	8000d20 <HAL_DMA_IRQHandler+0x168>
 8000d02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d06:	e00b      	b.n	8000d20 <HAL_DMA_IRQHandler+0x168>
 8000d08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d0c:	e008      	b.n	8000d20 <HAL_DMA_IRQHandler+0x168>
 8000d0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d12:	e005      	b.n	8000d20 <HAL_DMA_IRQHandler+0x168>
 8000d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d18:	e002      	b.n	8000d20 <HAL_DMA_IRQHandler+0x168>
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	e000      	b.n	8000d20 <HAL_DMA_IRQHandler+0x168>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	4a27      	ldr	r2, [pc, #156]	@ (8000dc0 <HAL_DMA_IRQHandler+0x208>)
 8000d22:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d034      	beq.n	8000d9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d3c:	e02f      	b.n	8000d9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	2208      	movs	r2, #8
 8000d44:	409a      	lsls	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d028      	beq.n	8000da0 <HAL_DMA_IRQHandler+0x1e8>
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d023      	beq.n	8000da0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 020e 	bic.w	r2, r2, #14
 8000d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d004      	beq.n	8000da0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	4798      	blx	r3
    }
  }
  return;
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
}
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40020008 	.word	0x40020008
 8000dac:	4002001c 	.word	0x4002001c
 8000db0:	40020030 	.word	0x40020030
 8000db4:	40020044 	.word	0x40020044
 8000db8:	40020058 	.word	0x40020058
 8000dbc:	4002006c 	.word	0x4002006c
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8000de0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b10      	cmp	r3, #16
 8000df0:	d108      	bne.n	8000e04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e02:	e007      	b.n	8000e14 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	60da      	str	r2, [r3, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
	...

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b08b      	sub	sp, #44	@ 0x2c
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	e169      	b.n	8001108 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e34:	2201      	movs	r2, #1
 8000e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8158 	bne.w	8001102 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	4a9a      	ldr	r2, [pc, #616]	@ (80010c0 <HAL_GPIO_Init+0x2a0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d05e      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
 8000e5c:	4a98      	ldr	r2, [pc, #608]	@ (80010c0 <HAL_GPIO_Init+0x2a0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d875      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e62:	4a98      	ldr	r2, [pc, #608]	@ (80010c4 <HAL_GPIO_Init+0x2a4>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d058      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
 8000e68:	4a96      	ldr	r2, [pc, #600]	@ (80010c4 <HAL_GPIO_Init+0x2a4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d86f      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e6e:	4a96      	ldr	r2, [pc, #600]	@ (80010c8 <HAL_GPIO_Init+0x2a8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d052      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
 8000e74:	4a94      	ldr	r2, [pc, #592]	@ (80010c8 <HAL_GPIO_Init+0x2a8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d869      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e7a:	4a94      	ldr	r2, [pc, #592]	@ (80010cc <HAL_GPIO_Init+0x2ac>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d04c      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
 8000e80:	4a92      	ldr	r2, [pc, #584]	@ (80010cc <HAL_GPIO_Init+0x2ac>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d863      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e86:	4a92      	ldr	r2, [pc, #584]	@ (80010d0 <HAL_GPIO_Init+0x2b0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d046      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
 8000e8c:	4a90      	ldr	r2, [pc, #576]	@ (80010d0 <HAL_GPIO_Init+0x2b0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d85d      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d82a      	bhi.n	8000eec <HAL_GPIO_Init+0xcc>
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	d859      	bhi.n	8000f4e <HAL_GPIO_Init+0x12e>
 8000e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea0 <HAL_GPIO_Init+0x80>)
 8000e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea0:	08000f1b 	.word	0x08000f1b
 8000ea4:	08000ef5 	.word	0x08000ef5
 8000ea8:	08000f07 	.word	0x08000f07
 8000eac:	08000f49 	.word	0x08000f49
 8000eb0:	08000f4f 	.word	0x08000f4f
 8000eb4:	08000f4f 	.word	0x08000f4f
 8000eb8:	08000f4f 	.word	0x08000f4f
 8000ebc:	08000f4f 	.word	0x08000f4f
 8000ec0:	08000f4f 	.word	0x08000f4f
 8000ec4:	08000f4f 	.word	0x08000f4f
 8000ec8:	08000f4f 	.word	0x08000f4f
 8000ecc:	08000f4f 	.word	0x08000f4f
 8000ed0:	08000f4f 	.word	0x08000f4f
 8000ed4:	08000f4f 	.word	0x08000f4f
 8000ed8:	08000f4f 	.word	0x08000f4f
 8000edc:	08000f4f 	.word	0x08000f4f
 8000ee0:	08000f4f 	.word	0x08000f4f
 8000ee4:	08000efd 	.word	0x08000efd
 8000ee8:	08000f11 	.word	0x08000f11
 8000eec:	4a79      	ldr	r2, [pc, #484]	@ (80010d4 <HAL_GPIO_Init+0x2b4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d013      	beq.n	8000f1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ef2:	e02c      	b.n	8000f4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	623b      	str	r3, [r7, #32]
          break;
 8000efa:	e029      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	3304      	adds	r3, #4
 8000f02:	623b      	str	r3, [r7, #32]
          break;
 8000f04:	e024      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	3308      	adds	r3, #8
 8000f0c:	623b      	str	r3, [r7, #32]
          break;
 8000f0e:	e01f      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	330c      	adds	r3, #12
 8000f16:	623b      	str	r3, [r7, #32]
          break;
 8000f18:	e01a      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d102      	bne.n	8000f28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f22:	2304      	movs	r3, #4
 8000f24:	623b      	str	r3, [r7, #32]
          break;
 8000f26:	e013      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d105      	bne.n	8000f3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f30:	2308      	movs	r3, #8
 8000f32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	611a      	str	r2, [r3, #16]
          break;
 8000f3a:	e009      	b.n	8000f50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	615a      	str	r2, [r3, #20]
          break;
 8000f46:	e003      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
          break;
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x130>
          break;
 8000f4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	2bff      	cmp	r3, #255	@ 0xff
 8000f54:	d801      	bhi.n	8000f5a <HAL_GPIO_Init+0x13a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	e001      	b.n	8000f5e <HAL_GPIO_Init+0x13e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	2bff      	cmp	r3, #255	@ 0xff
 8000f64:	d802      	bhi.n	8000f6c <HAL_GPIO_Init+0x14c>
 8000f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	e002      	b.n	8000f72 <HAL_GPIO_Init+0x152>
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6e:	3b08      	subs	r3, #8
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	210f      	movs	r1, #15
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	401a      	ands	r2, r3
 8000f84:	6a39      	ldr	r1, [r7, #32]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 80b1 	beq.w	8001102 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80010d8 <HAL_GPIO_Init+0x2b8>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a4c      	ldr	r2, [pc, #304]	@ (80010d8 <HAL_GPIO_Init+0x2b8>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b4a      	ldr	r3, [pc, #296]	@ (80010d8 <HAL_GPIO_Init+0x2b8>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fb8:	4a48      	ldr	r2, [pc, #288]	@ (80010dc <HAL_GPIO_Init+0x2bc>)
 8000fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a40      	ldr	r2, [pc, #256]	@ (80010e0 <HAL_GPIO_Init+0x2c0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d013      	beq.n	800100c <HAL_GPIO_Init+0x1ec>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a3f      	ldr	r2, [pc, #252]	@ (80010e4 <HAL_GPIO_Init+0x2c4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d00d      	beq.n	8001008 <HAL_GPIO_Init+0x1e8>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a3e      	ldr	r2, [pc, #248]	@ (80010e8 <HAL_GPIO_Init+0x2c8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d007      	beq.n	8001004 <HAL_GPIO_Init+0x1e4>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a3d      	ldr	r2, [pc, #244]	@ (80010ec <HAL_GPIO_Init+0x2cc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d101      	bne.n	8001000 <HAL_GPIO_Init+0x1e0>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x1ee>
 8001000:	2304      	movs	r3, #4
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x1ee>
 8001004:	2302      	movs	r3, #2
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x1ee>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x1ee>
 800100c:	2300      	movs	r3, #0
 800100e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800101e:	492f      	ldr	r1, [pc, #188]	@ (80010dc <HAL_GPIO_Init+0x2bc>)
 8001020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001038:	4b2d      	ldr	r3, [pc, #180]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	492c      	ldr	r1, [pc, #176]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	608b      	str	r3, [r1, #8]
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001046:	4b2a      	ldr	r3, [pc, #168]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	43db      	mvns	r3, r3
 800104e:	4928      	ldr	r1, [pc, #160]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001050:	4013      	ands	r3, r2
 8001052:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001060:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	4922      	ldr	r1, [pc, #136]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	60cb      	str	r3, [r1, #12]
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800106e:	4b20      	ldr	r3, [pc, #128]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	43db      	mvns	r3, r3
 8001076:	491e      	ldr	r1, [pc, #120]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001078:	4013      	ands	r3, r2
 800107a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d006      	beq.n	8001096 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001088:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4918      	ldr	r1, [pc, #96]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001096:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	43db      	mvns	r3, r3
 800109e:	4914      	ldr	r1, [pc, #80]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d021      	beq.n	80010f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	490e      	ldr	r1, [pc, #56]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
 80010bc:	e021      	b.n	8001102 <HAL_GPIO_Init+0x2e2>
 80010be:	bf00      	nop
 80010c0:	10320000 	.word	0x10320000
 80010c4:	10310000 	.word	0x10310000
 80010c8:	10220000 	.word	0x10220000
 80010cc:	10210000 	.word	0x10210000
 80010d0:	10120000 	.word	0x10120000
 80010d4:	10110000 	.word	0x10110000
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000
 80010e0:	40010800 	.word	0x40010800
 80010e4:	40010c00 	.word	0x40010c00
 80010e8:	40011000 	.word	0x40011000
 80010ec:	40011400 	.word	0x40011400
 80010f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_GPIO_Init+0x304>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	4909      	ldr	r1, [pc, #36]	@ (8001124 <HAL_GPIO_Init+0x304>)
 80010fe:	4013      	ands	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	3301      	adds	r3, #1
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	fa22 f303 	lsr.w	r3, r2, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	f47f ae8e 	bne.w	8000e34 <HAL_GPIO_Init+0x14>
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	372c      	adds	r7, #44	@ 0x2c
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	40010400 	.word	0x40010400

08001128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e272      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8087 	beq.w	8001256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001148:	4b92      	ldr	r3, [pc, #584]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b04      	cmp	r3, #4
 8001152:	d00c      	beq.n	800116e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001154:	4b8f      	ldr	r3, [pc, #572]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	d112      	bne.n	8001186 <HAL_RCC_OscConfig+0x5e>
 8001160:	4b8c      	ldr	r3, [pc, #560]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800116c:	d10b      	bne.n	8001186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116e:	4b89      	ldr	r3, [pc, #548]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d06c      	beq.n	8001254 <HAL_RCC_OscConfig+0x12c>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d168      	bne.n	8001254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e24c      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x76>
 8001190:	4b80      	ldr	r3, [pc, #512]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a7f      	ldr	r2, [pc, #508]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e02e      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x98>
 80011a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a7a      	ldr	r2, [pc, #488]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b78      	ldr	r3, [pc, #480]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a77      	ldr	r2, [pc, #476]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e01d      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0xbc>
 80011ca:	4b72      	ldr	r3, [pc, #456]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a71      	ldr	r2, [pc, #452]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6e      	ldr	r2, [pc, #440]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e00b      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 80011e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b68      	ldr	r3, [pc, #416]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a67      	ldr	r2, [pc, #412]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fae2 	bl	80007cc <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fade 	bl	80007cc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	@ 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e200      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0xe4>
 800122a:	e014      	b.n	8001256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff face 	bl	80007cc <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff faca 	bl	80007cc <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	@ 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e1ec      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x10c>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d063      	beq.n	800132a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001262:	4b4c      	ldr	r3, [pc, #304]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00b      	beq.n	8001286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800126e:	4b49      	ldr	r3, [pc, #292]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b08      	cmp	r3, #8
 8001278:	d11c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x18c>
 800127a:	4b46      	ldr	r3, [pc, #280]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d116      	bne.n	80012b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	4b43      	ldr	r3, [pc, #268]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x176>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e1c0      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b3d      	ldr	r3, [pc, #244]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4939      	ldr	r1, [pc, #228]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	e03a      	b.n	800132a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012bc:	4b36      	ldr	r3, [pc, #216]	@ (8001398 <HAL_RCC_OscConfig+0x270>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fa83 	bl	80007cc <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff fa7f 	bl	80007cc <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e1a1      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4927      	ldr	r1, [pc, #156]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
 80012fc:	e015      	b.n	800132a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fe:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <HAL_RCC_OscConfig+0x270>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fa62 	bl	80007cc <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130c:	f7ff fa5e 	bl	80007cc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e180      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d03a      	beq.n	80013ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d019      	beq.n	8001372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <HAL_RCC_OscConfig+0x274>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fa42 	bl	80007cc <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fa3e 	bl	80007cc <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e160      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f000 fa9c 	bl	80018a8 <RCC_Delay>
 8001370:	e01c      	b.n	80013ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <HAL_RCC_OscConfig+0x274>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7ff fa28 	bl	80007cc <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137e:	e00f      	b.n	80013a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fa24 	bl	80007cc <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d908      	bls.n	80013a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e146      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	42420000 	.word	0x42420000
 800139c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	4b92      	ldr	r3, [pc, #584]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e9      	bne.n	8001380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80a6 	beq.w	8001506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b8b      	ldr	r3, [pc, #556]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10d      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b88      	ldr	r3, [pc, #544]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a87      	ldr	r2, [pc, #540]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b85      	ldr	r3, [pc, #532]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b82      	ldr	r3, [pc, #520]	@ (80015f0 <HAL_RCC_OscConfig+0x4c8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d118      	bne.n	8001424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f2:	4b7f      	ldr	r3, [pc, #508]	@ (80015f0 <HAL_RCC_OscConfig+0x4c8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7e      	ldr	r2, [pc, #504]	@ (80015f0 <HAL_RCC_OscConfig+0x4c8>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fe:	f7ff f9e5 	bl	80007cc <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001406:	f7ff f9e1 	bl	80007cc <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b64      	cmp	r3, #100	@ 0x64
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e103      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b75      	ldr	r3, [pc, #468]	@ (80015f0 <HAL_RCC_OscConfig+0x4c8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x312>
 800142c:	4b6f      	ldr	r3, [pc, #444]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4a6e      	ldr	r2, [pc, #440]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6213      	str	r3, [r2, #32]
 8001438:	e02d      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x334>
 8001442:	4b6a      	ldr	r3, [pc, #424]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a69      	ldr	r2, [pc, #420]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6213      	str	r3, [r2, #32]
 800144e:	4b67      	ldr	r3, [pc, #412]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a66      	ldr	r2, [pc, #408]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	6213      	str	r3, [r2, #32]
 800145a:	e01c      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d10c      	bne.n	800147e <HAL_RCC_OscConfig+0x356>
 8001464:	4b61      	ldr	r3, [pc, #388]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a60      	ldr	r2, [pc, #384]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	4b5e      	ldr	r3, [pc, #376]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a5d      	ldr	r2, [pc, #372]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6213      	str	r3, [r2, #32]
 800147c:	e00b      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800147e:	4b5b      	ldr	r3, [pc, #364]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a5a      	ldr	r2, [pc, #360]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	4b58      	ldr	r3, [pc, #352]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a57      	ldr	r2, [pc, #348]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d015      	beq.n	80014ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff f995 	bl	80007cc <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff f991 	bl	80007cc <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0b1      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014bc:	4b4b      	ldr	r3, [pc, #300]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0ee      	beq.n	80014a6 <HAL_RCC_OscConfig+0x37e>
 80014c8:	e014      	b.n	80014f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff f97f 	bl	80007cc <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff f97b 	bl	80007cc <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e09b      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e8:	4b40      	ldr	r3, [pc, #256]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1ee      	bne.n	80014d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d105      	bne.n	8001506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fa:	4b3c      	ldr	r3, [pc, #240]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a3b      	ldr	r2, [pc, #236]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8087 	beq.w	800161e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001510:	4b36      	ldr	r3, [pc, #216]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d061      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d146      	bne.n	80015b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001524:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <HAL_RCC_OscConfig+0x4cc>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff f94f 	bl	80007cc <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff f94b 	bl	80007cc <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e06d      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001544:	4b29      	ldr	r3, [pc, #164]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001558:	d108      	bne.n	800156c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800155a:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	4921      	ldr	r1, [pc, #132]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a19      	ldr	r1, [r3, #32]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157c:	430b      	orrs	r3, r1
 800157e:	491b      	ldr	r1, [pc, #108]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_RCC_OscConfig+0x4cc>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff f91f 	bl	80007cc <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff f91b 	bl	80007cc <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e03d      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x46a>
 80015b0:	e035      	b.n	800161e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <HAL_RCC_OscConfig+0x4cc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff f908 	bl	80007cc <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff f904 	bl	80007cc <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e026      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x498>
 80015de:	e01e      	b.n	800161e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d107      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e019      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40007000 	.word	0x40007000
 80015f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <HAL_RCC_OscConfig+0x500>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	429a      	cmp	r2, r3
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000

0800162c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0d0      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001640:	4b6a      	ldr	r3, [pc, #424]	@ (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d910      	bls.n	8001670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b67      	ldr	r3, [pc, #412]	@ (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0207 	bic.w	r2, r3, #7
 8001656:	4965      	ldr	r1, [pc, #404]	@ (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b63      	ldr	r3, [pc, #396]	@ (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0b8      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001688:	4b59      	ldr	r3, [pc, #356]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a58      	ldr	r2, [pc, #352]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001692:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a0:	4b53      	ldr	r3, [pc, #332]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a52      	ldr	r2, [pc, #328]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ac:	4b50      	ldr	r3, [pc, #320]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	494d      	ldr	r1, [pc, #308]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d040      	beq.n	800174c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b47      	ldr	r3, [pc, #284]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d115      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e07f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ea:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e073      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fa:	4b3d      	ldr	r3, [pc, #244]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e06b      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170a:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f023 0203 	bic.w	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4936      	ldr	r1, [pc, #216]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800171c:	f7ff f856 	bl	80007cc <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	e00a      	b.n	800173a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7ff f852 	bl	80007cc <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e053      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173a:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 020c 	and.w	r2, r3, #12
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	429a      	cmp	r2, r3
 800174a:	d1eb      	bne.n	8001724 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800174c:	4b27      	ldr	r3, [pc, #156]	@ (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d210      	bcs.n	800177c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b24      	ldr	r3, [pc, #144]	@ (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 0207 	bic.w	r2, r3, #7
 8001762:	4922      	ldr	r1, [pc, #136]	@ (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e032      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4916      	ldr	r1, [pc, #88]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	490e      	ldr	r1, [pc, #56]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ba:	f000 f821 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80017be:	4602      	mov	r2, r0
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	490a      	ldr	r1, [pc, #40]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c8>)
 80017cc:	5ccb      	ldrb	r3, [r1, r3]
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	4a09      	ldr	r2, [pc, #36]	@ (80017f8 <HAL_RCC_ClockConfig+0x1cc>)
 80017d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_RCC_ClockConfig+0x1d0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ffb4 	bl	8000748 <HAL_InitTick>

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000
 80017f0:	40021000 	.word	0x40021000
 80017f4:	08003a50 	.word	0x08003a50
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800181a:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x94>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b04      	cmp	r3, #4
 8001828:	d002      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x30>
 800182a:	2b08      	cmp	r3, #8
 800182c:	d003      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x36>
 800182e:	e027      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x98>)
 8001832:	613b      	str	r3, [r7, #16]
      break;
 8001834:	e027      	b.n	8001886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	0c9b      	lsrs	r3, r3, #18
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	4a17      	ldr	r2, [pc, #92]	@ (800189c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001840:	5cd3      	ldrb	r3, [r2, r3]
 8001842:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d010      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x94>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0c5b      	lsrs	r3, r3, #17
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	4a11      	ldr	r2, [pc, #68]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x98>)
 8001862:	fb03 f202 	mul.w	r2, r3, r2
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e004      	b.n	800187a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a0c      	ldr	r2, [pc, #48]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	613b      	str	r3, [r7, #16]
      break;
 800187e:	e002      	b.n	8001886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x98>)
 8001882:	613b      	str	r3, [r7, #16]
      break;
 8001884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001886:	693b      	ldr	r3, [r7, #16]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	007a1200 	.word	0x007a1200
 800189c:	08003a60 	.word	0x08003a60
 80018a0:	08003a70 	.word	0x08003a70
 80018a4:	003d0900 	.word	0x003d0900

080018a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <RCC_Delay+0x34>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <RCC_Delay+0x38>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	0a5b      	lsrs	r3, r3, #9
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018c4:	bf00      	nop
  }
  while (Delay --);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1e5a      	subs	r2, r3, #1
 80018ca:	60fa      	str	r2, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f9      	bne.n	80018c4 <RCC_Delay+0x1c>
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	20000000 	.word	0x20000000
 80018e0:	10624dd3 	.word	0x10624dd3

080018e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e041      	b.n	800197a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7fe fe62 	bl	80005d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f000 fc9e 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e041      	b.n	8001a18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d106      	bne.n	80019ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f839 	bl	8001a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2202      	movs	r2, #2
 80019b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	4610      	mov	r0, r2
 80019c2:	f000 fc4f 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <HAL_TIM_PWM_Start_DMA+0x2c>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	e022      	b.n	8001aa6 <HAL_TIM_PWM_Start_DMA+0x72>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d109      	bne.n	8001a7a <HAL_TIM_PWM_Start_DMA+0x46>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	e015      	b.n	8001aa6 <HAL_TIM_PWM_Start_DMA+0x72>
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d109      	bne.n	8001a94 <HAL_TIM_PWM_Start_DMA+0x60>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	e008      	b.n	8001aa6 <HAL_TIM_PWM_Start_DMA+0x72>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e153      	b.n	8001d56 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <HAL_TIM_PWM_Start_DMA+0x94>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	e022      	b.n	8001b0e <HAL_TIM_PWM_Start_DMA+0xda>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d109      	bne.n	8001ae2 <HAL_TIM_PWM_Start_DMA+0xae>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	e015      	b.n	8001b0e <HAL_TIM_PWM_Start_DMA+0xda>
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d109      	bne.n	8001afc <HAL_TIM_PWM_Start_DMA+0xc8>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	bf0c      	ite	eq
 8001af4:	2301      	moveq	r3, #1
 8001af6:	2300      	movne	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	e008      	b.n	8001b0e <HAL_TIM_PWM_Start_DMA+0xda>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d024      	beq.n	8001b5c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <HAL_TIM_PWM_Start_DMA+0xea>
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e119      	b.n	8001d56 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d104      	bne.n	8001b32 <HAL_TIM_PWM_Start_DMA+0xfe>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b30:	e016      	b.n	8001b60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d104      	bne.n	8001b42 <HAL_TIM_PWM_Start_DMA+0x10e>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b40:	e00e      	b.n	8001b60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d104      	bne.n	8001b52 <HAL_TIM_PWM_Start_DMA+0x11e>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b50:	e006      	b.n	8001b60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b5a:	e001      	b.n	8001b60 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0fa      	b.n	8001d56 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	f200 80ae 	bhi.w	8001cc4 <HAL_TIM_PWM_Start_DMA+0x290>
 8001b68:	a201      	add	r2, pc, #4	@ (adr r2, 8001b70 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001ba5 	.word	0x08001ba5
 8001b74:	08001cc5 	.word	0x08001cc5
 8001b78:	08001cc5 	.word	0x08001cc5
 8001b7c:	08001cc5 	.word	0x08001cc5
 8001b80:	08001bed 	.word	0x08001bed
 8001b84:	08001cc5 	.word	0x08001cc5
 8001b88:	08001cc5 	.word	0x08001cc5
 8001b8c:	08001cc5 	.word	0x08001cc5
 8001b90:	08001c35 	.word	0x08001c35
 8001b94:	08001cc5 	.word	0x08001cc5
 8001b98:	08001cc5 	.word	0x08001cc5
 8001b9c:	08001cc5 	.word	0x08001cc5
 8001ba0:	08001c7d 	.word	0x08001c7d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	4a6d      	ldr	r2, [pc, #436]	@ (8001d60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb0:	4a6c      	ldr	r2, [pc, #432]	@ (8001d64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	4a6b      	ldr	r2, [pc, #428]	@ (8001d68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001bba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3334      	adds	r3, #52	@ 0x34
 8001bc8:	461a      	mov	r2, r3
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	f7fe ff94 	bl	8000af8 <HAL_DMA_Start_IT>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0bd      	b.n	8001d56 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be8:	60da      	str	r2, [r3, #12]
      break;
 8001bea:	e06e      	b.n	8001cca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf0:	4a5b      	ldr	r2, [pc, #364]	@ (8001d60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001bf2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf8:	4a5a      	ldr	r2, [pc, #360]	@ (8001d64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c00:	4a59      	ldr	r2, [pc, #356]	@ (8001d68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001c02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3338      	adds	r3, #56	@ 0x38
 8001c10:	461a      	mov	r2, r3
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	f7fe ff70 	bl	8000af8 <HAL_DMA_Start_IT>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e099      	b.n	8001d56 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c30:	60da      	str	r2, [r3, #12]
      break;
 8001c32:	e04a      	b.n	8001cca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c38:	4a49      	ldr	r2, [pc, #292]	@ (8001d60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001c3a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	4a48      	ldr	r2, [pc, #288]	@ (8001d64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001c42:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c48:	4a47      	ldr	r2, [pc, #284]	@ (8001d68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001c4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	333c      	adds	r3, #60	@ 0x3c
 8001c58:	461a      	mov	r2, r3
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	f7fe ff4c 	bl	8000af8 <HAL_DMA_Start_IT>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e075      	b.n	8001d56 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c78:	60da      	str	r2, [r3, #12]
      break;
 8001c7a:	e026      	b.n	8001cca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	4a37      	ldr	r2, [pc, #220]	@ (8001d60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001c82:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	4a36      	ldr	r2, [pc, #216]	@ (8001d64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	4a35      	ldr	r2, [pc, #212]	@ (8001d68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001c92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3340      	adds	r3, #64	@ 0x40
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	f7fe ff28 	bl	8000af8 <HAL_DMA_Start_IT>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e051      	b.n	8001d56 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001cc0:	60da      	str	r2, [r3, #12]
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8001cc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d141      	bne.n	8001d54 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fd4f 	bl	800277c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a22      	ldr	r2, [pc, #136]	@ (8001d6c <HAL_TIM_PWM_Start_DMA+0x338>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d107      	bne.n	8001cf8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cf6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d6c <HAL_TIM_PWM_Start_DMA+0x338>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00e      	beq.n	8001d20 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0a:	d009      	beq.n	8001d20 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a17      	ldr	r2, [pc, #92]	@ (8001d70 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a16      	ldr	r2, [pc, #88]	@ (8001d74 <HAL_TIM_PWM_Start_DMA+0x340>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d111      	bne.n	8001d44 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d010      	beq.n	8001d54 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d42:	e007      	b.n	8001d54 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	08002153 	.word	0x08002153
 8001d64:	080021fb 	.word	0x080021fb
 8001d68:	080020c1 	.word	0x080020c1
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40000800 	.word	0x40000800

08001d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e0ae      	b.n	8001ef4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0c      	cmp	r3, #12
 8001da2:	f200 809f 	bhi.w	8001ee4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001da6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001de1 	.word	0x08001de1
 8001db0:	08001ee5 	.word	0x08001ee5
 8001db4:	08001ee5 	.word	0x08001ee5
 8001db8:	08001ee5 	.word	0x08001ee5
 8001dbc:	08001e21 	.word	0x08001e21
 8001dc0:	08001ee5 	.word	0x08001ee5
 8001dc4:	08001ee5 	.word	0x08001ee5
 8001dc8:	08001ee5 	.word	0x08001ee5
 8001dcc:	08001e63 	.word	0x08001e63
 8001dd0:	08001ee5 	.word	0x08001ee5
 8001dd4:	08001ee5 	.word	0x08001ee5
 8001dd8:	08001ee5 	.word	0x08001ee5
 8001ddc:	08001ea3 	.word	0x08001ea3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 faaa 	bl	8002340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0208 	orr.w	r2, r2, #8
 8001dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0204 	bic.w	r2, r2, #4
 8001e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6999      	ldr	r1, [r3, #24]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	619a      	str	r2, [r3, #24]
      break;
 8001e1e:	e064      	b.n	8001eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 faf0 	bl	800240c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6999      	ldr	r1, [r3, #24]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	021a      	lsls	r2, r3, #8
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	619a      	str	r2, [r3, #24]
      break;
 8001e60:	e043      	b.n	8001eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fb39 	bl	80024e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0208 	orr.w	r2, r2, #8
 8001e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0204 	bic.w	r2, r2, #4
 8001e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	69d9      	ldr	r1, [r3, #28]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	61da      	str	r2, [r3, #28]
      break;
 8001ea0:	e023      	b.n	8001eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fb83 	bl	80025b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69d9      	ldr	r1, [r3, #28]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	021a      	lsls	r2, r3, #8
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	61da      	str	r2, [r3, #28]
      break;
 8001ee2:	e002      	b.n	8001eea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8001ee8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_TIM_ConfigClockSource+0x1c>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e0b4      	b.n	8002082 <HAL_TIM_ConfigClockSource+0x186>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f50:	d03e      	beq.n	8001fd0 <HAL_TIM_ConfigClockSource+0xd4>
 8001f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f56:	f200 8087 	bhi.w	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f5e:	f000 8086 	beq.w	800206e <HAL_TIM_ConfigClockSource+0x172>
 8001f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f66:	d87f      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f68:	2b70      	cmp	r3, #112	@ 0x70
 8001f6a:	d01a      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0xa6>
 8001f6c:	2b70      	cmp	r3, #112	@ 0x70
 8001f6e:	d87b      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f70:	2b60      	cmp	r3, #96	@ 0x60
 8001f72:	d050      	beq.n	8002016 <HAL_TIM_ConfigClockSource+0x11a>
 8001f74:	2b60      	cmp	r3, #96	@ 0x60
 8001f76:	d877      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f78:	2b50      	cmp	r3, #80	@ 0x50
 8001f7a:	d03c      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0xfa>
 8001f7c:	2b50      	cmp	r3, #80	@ 0x50
 8001f7e:	d873      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f80:	2b40      	cmp	r3, #64	@ 0x40
 8001f82:	d058      	beq.n	8002036 <HAL_TIM_ConfigClockSource+0x13a>
 8001f84:	2b40      	cmp	r3, #64	@ 0x40
 8001f86:	d86f      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f88:	2b30      	cmp	r3, #48	@ 0x30
 8001f8a:	d064      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f8c:	2b30      	cmp	r3, #48	@ 0x30
 8001f8e:	d86b      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d060      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d867      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d05c      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d05a      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001fa0:	e062      	b.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fb2:	f000 fbc4 	bl	800273e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	609a      	str	r2, [r3, #8]
      break;
 8001fce:	e04f      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fe0:	f000 fbad 	bl	800273e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ff2:	609a      	str	r2, [r3, #8]
      break;
 8001ff4:	e03c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002002:	461a      	mov	r2, r3
 8002004:	f000 fb24 	bl	8002650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2150      	movs	r1, #80	@ 0x50
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fb7b 	bl	800270a <TIM_ITRx_SetConfig>
      break;
 8002014:	e02c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002022:	461a      	mov	r2, r3
 8002024:	f000 fb42 	bl	80026ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2160      	movs	r1, #96	@ 0x60
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fb6b 	bl	800270a <TIM_ITRx_SetConfig>
      break;
 8002034:	e01c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002042:	461a      	mov	r2, r3
 8002044:	f000 fb04 	bl	8002650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2140      	movs	r1, #64	@ 0x40
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fb5b 	bl	800270a <TIM_ITRx_SetConfig>
      break;
 8002054:	e00c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f000 fb52 	bl	800270a <TIM_ITRx_SetConfig>
      break;
 8002066:	e003      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
      break;
 800206c:	e000      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800206e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d107      	bne.n	80020e8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020e6:	e02a      	b.n	800213e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d107      	bne.n	8002102 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2202      	movs	r2, #2
 80020f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002100:	e01d      	b.n	800213e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	d107      	bne.n	800211c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2204      	movs	r2, #4
 8002110:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800211a:	e010      	b.n	800213e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	d107      	bne.n	8002136 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2208      	movs	r2, #8
 800212a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002134:	e003      	b.n	800213e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff ffb5 	bl	80020ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	771a      	strb	r2, [r3, #28]
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d10b      	bne.n	8002182 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d136      	bne.n	80021e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002180:	e031      	b.n	80021e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	d10b      	bne.n	80021a4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2202      	movs	r2, #2
 8002190:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d125      	bne.n	80021e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021a2:	e020      	b.n	80021e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d10b      	bne.n	80021c6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2204      	movs	r2, #4
 80021b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d114      	bne.n	80021e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021c4:	e00f      	b.n	80021e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d10a      	bne.n	80021e6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2208      	movs	r2, #8
 80021d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d103      	bne.n	80021e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff ff4f 	bl	800208a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	771a      	strb	r2, [r3, #28]
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	d103      	bne.n	800221a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	771a      	strb	r2, [r3, #28]
 8002218:	e019      	b.n	800224e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d103      	bne.n	800222c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2202      	movs	r2, #2
 8002228:	771a      	strb	r2, [r3, #28]
 800222a:	e010      	b.n	800224e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	d103      	bne.n	800223e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2204      	movs	r2, #4
 800223a:	771a      	strb	r2, [r3, #28]
 800223c:	e007      	b.n	800224e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	d102      	bne.n	800224e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2208      	movs	r2, #8
 800224c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7ff ff24 	bl	800209c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	771a      	strb	r2, [r3, #28]
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a2f      	ldr	r2, [pc, #188]	@ (8002334 <TIM_Base_SetConfig+0xd0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00b      	beq.n	8002294 <TIM_Base_SetConfig+0x30>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002282:	d007      	beq.n	8002294 <TIM_Base_SetConfig+0x30>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a2c      	ldr	r2, [pc, #176]	@ (8002338 <TIM_Base_SetConfig+0xd4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d003      	beq.n	8002294 <TIM_Base_SetConfig+0x30>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a2b      	ldr	r2, [pc, #172]	@ (800233c <TIM_Base_SetConfig+0xd8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d108      	bne.n	80022a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800229a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a22      	ldr	r2, [pc, #136]	@ (8002334 <TIM_Base_SetConfig+0xd0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00b      	beq.n	80022c6 <TIM_Base_SetConfig+0x62>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b4:	d007      	beq.n	80022c6 <TIM_Base_SetConfig+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002338 <TIM_Base_SetConfig+0xd4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_Base_SetConfig+0x62>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1e      	ldr	r2, [pc, #120]	@ (800233c <TIM_Base_SetConfig+0xd8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d108      	bne.n	80022d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <TIM_Base_SetConfig+0xd0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d103      	bne.n	800230c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f023 0201 	bic.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	611a      	str	r2, [r3, #16]
  }
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40012c00 	.word	0x40012c00
 8002338:	40000400 	.word	0x40000400
 800233c:	40000800 	.word	0x40000800

08002340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f023 0201 	bic.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800236e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f023 0302 	bic.w	r3, r3, #2
 8002388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a1c      	ldr	r2, [pc, #112]	@ (8002408 <TIM_OC1_SetConfig+0xc8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d10c      	bne.n	80023b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f023 0308 	bic.w	r3, r3, #8
 80023a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f023 0304 	bic.w	r3, r3, #4
 80023b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a13      	ldr	r2, [pc, #76]	@ (8002408 <TIM_OC1_SetConfig+0xc8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d111      	bne.n	80023e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	621a      	str	r2, [r3, #32]
}
 80023fc:	bf00      	nop
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40012c00 	.word	0x40012c00

0800240c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f023 0210 	bic.w	r2, r3, #16
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800243a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f023 0320 	bic.w	r3, r3, #32
 8002456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a1d      	ldr	r2, [pc, #116]	@ (80024dc <TIM_OC2_SetConfig+0xd0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d10d      	bne.n	8002488 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002486:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a14      	ldr	r2, [pc, #80]	@ (80024dc <TIM_OC2_SetConfig+0xd0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d113      	bne.n	80024b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800249e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	621a      	str	r2, [r3, #32]
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40012c00 	.word	0x40012c00

080024e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800250e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <TIM_OC3_SetConfig+0xd0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10d      	bne.n	800255a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a14      	ldr	r2, [pc, #80]	@ (80025b0 <TIM_OC3_SetConfig+0xd0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d113      	bne.n	800258a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	621a      	str	r2, [r3, #32]
}
 80025a4:	bf00      	nop
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00

080025b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	031b      	lsls	r3, r3, #12
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a0f      	ldr	r2, [pc, #60]	@ (800264c <TIM_OC4_SetConfig+0x98>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d109      	bne.n	8002628 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800261a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	019b      	lsls	r3, r3, #6
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	621a      	str	r2, [r3, #32]
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	40012c00 	.word	0x40012c00

08002650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f023 0201 	bic.w	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800267a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 030a 	bic.w	r3, r3, #10
 800268c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	621a      	str	r2, [r3, #32]
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	f023 0210 	bic.w	r2, r3, #16
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80026d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	031b      	lsls	r3, r3, #12
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80026e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	621a      	str	r2, [r3, #32]
}
 8002700:	bf00      	nop
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	f043 0307 	orr.w	r3, r3, #7
 800272c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	609a      	str	r2, [r3, #8]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800273e:	b480      	push	{r7}
 8002740:	b087      	sub	sp, #28
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002758:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	021a      	lsls	r2, r3, #8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	431a      	orrs	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	4313      	orrs	r3, r2
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	609a      	str	r2, [r3, #8]
}
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2201      	movs	r2, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a1a      	ldr	r2, [r3, #32]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	43db      	mvns	r3, r3
 800279e:	401a      	ands	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a1a      	ldr	r2, [r3, #32]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	431a      	orrs	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	621a      	str	r2, [r3, #32]
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027d8:	2302      	movs	r3, #2
 80027da:	e046      	b.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a16      	ldr	r2, [pc, #88]	@ (8002874 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00e      	beq.n	800283e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002828:	d009      	beq.n	800283e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d004      	beq.n	800283e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a10      	ldr	r2, [pc, #64]	@ (800287c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d10c      	bne.n	8002858 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002844:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	4313      	orrs	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40000400 	.word	0x40000400
 800287c:	40000800 	.word	0x40000800

08002880 <WS2812B_Buf_Clear>:
void PWM_WS2812B_Init()
{
	WS2812B_Buf_Clear();
}
void WS2812B_Buf_Clear()
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
	int i = 0,j = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	2300      	movs	r3, #0
 800288c:	603b      	str	r3, [r7, #0]
	for (i = 0; i < LED_NUM+1; i++)
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	e016      	b.n	80028c2 <WS2812B_Buf_Clear+0x42>
	{
		for (j = 0; j < 24; j++)
 8002894:	2300      	movs	r3, #0
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	e00d      	b.n	80028b6 <WS2812B_Buf_Clear+0x36>
		{
			WS2812B_BUFF[i][j] = 0;
 800289a:	490e      	ldr	r1, [pc, #56]	@ (80028d4 <WS2812B_Buf_Clear+0x54>)
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	4413      	add	r3, r2
 80028aa:	2200      	movs	r2, #0
 80028ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < 24; j++)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b17      	cmp	r3, #23
 80028ba:	ddee      	ble.n	800289a <WS2812B_Buf_Clear+0x1a>
	for (i = 0; i < LED_NUM+1; i++)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3301      	adds	r3, #1
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b96      	cmp	r3, #150	@ 0x96
 80028c6:	dde5      	ble.n	8002894 <WS2812B_Buf_Clear+0x14>
		}
	}
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	20000118 	.word	0x20000118

080028d8 <WS2812B_Reset>:
void WS2812B_Reset(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
	int i = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 24; i++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	e009      	b.n	80028fc <WS2812B_Reset+0x24>
	{
		WS2812B_BUFF[LED_NUM][i] = 0;
 80028e8:	4a09      	ldr	r2, [pc, #36]	@ (8002910 <WS2812B_Reset+0x38>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 80028f0:	2100      	movs	r1, #0
 80028f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 24; i++)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3301      	adds	r3, #1
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b17      	cmp	r3, #23
 8002900:	ddf2      	ble.n	80028e8 <WS2812B_Reset+0x10>
	}

}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000118 	.word	0x20000118

08002914 <PWM_WS2812B_Write_24Bits>:
void PWM_WS2812B_Write_24Bits(uint16_t index,uint32_t RGB_Data)
{
 8002914:	b490      	push	{r4, r7}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < 8; i++)
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e047      	b.n	80029ba <PWM_WS2812B_Write_24Bits+0xa6>
	{
		WS2812B_BUFF[index][i] = (((RGB_Data << (8+i)) & 0x00800000))? (T1H):(T0H); 	//G
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3308      	adds	r3, #8
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <PWM_WS2812B_Write_24Bits+0x2c>
 800293c:	213c      	movs	r1, #60	@ 0x3c
 800293e:	e000      	b.n	8002942 <PWM_WS2812B_Write_24Bits+0x2e>
 8002940:	211e      	movs	r1, #30
 8002942:	88fa      	ldrh	r2, [r7, #6]
 8002944:	4821      	ldr	r0, [pc, #132]	@ (80029cc <PWM_WS2812B_Write_24Bits+0xb8>)
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4413      	add	r3, r2
 8002952:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		WS2812B_BUFF[index][i+8] = (((RGB_Data << (i)) & 0x00800000))? (T1H):(T0H);		//R
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <PWM_WS2812B_Write_24Bits+0x56>
 8002966:	213c      	movs	r1, #60	@ 0x3c
 8002968:	e000      	b.n	800296c <PWM_WS2812B_Write_24Bits+0x58>
 800296a:	211e      	movs	r1, #30
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f103 0008 	add.w	r0, r3, #8
 8002974:	4c15      	ldr	r4, [pc, #84]	@ (80029cc <PWM_WS2812B_Write_24Bits+0xb8>)
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4403      	add	r3, r0
 8002980:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		WS2812B_BUFF[index][i+16] = (((RGB_Data << (16+i)) & 0x00800000))? (T1H):(T0H);	//B
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3310      	adds	r3, #16
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <PWM_WS2812B_Write_24Bits+0x86>
 8002996:	213c      	movs	r1, #60	@ 0x3c
 8002998:	e000      	b.n	800299c <PWM_WS2812B_Write_24Bits+0x88>
 800299a:	211e      	movs	r1, #30
 800299c:	88fa      	ldrh	r2, [r7, #6]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f103 0010 	add.w	r0, r3, #16
 80029a4:	4c09      	ldr	r4, [pc, #36]	@ (80029cc <PWM_WS2812B_Write_24Bits+0xb8>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4403      	add	r3, r0
 80029b0:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	for(i = 0; i < 8; i++)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3301      	adds	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b07      	cmp	r3, #7
 80029be:	ddb4      	ble.n	800292a <PWM_WS2812B_Write_24Bits+0x16>
	}
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc90      	pop	{r4, r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000118 	.word	0x20000118

080029d0 <WS2812B_Set_Color>:
void WS2812B_Set_Color(uint16_t head, uint16_t num ,uint32_t RGB_Data)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	603a      	str	r2, [r7, #0]
 80029da:	80fb      	strh	r3, [r7, #6]
 80029dc:	460b      	mov	r3, r1
 80029de:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < num; i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	81fb      	strh	r3, [r7, #14]
 80029e8:	e00a      	b.n	8002a00 <WS2812B_Set_Color+0x30>
	{
		PWM_WS2812B_Write_24Bits(head+i ,RGB_Data);
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	89fb      	ldrh	r3, [r7, #14]
 80029ee:	4413      	add	r3, r2
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	6839      	ldr	r1, [r7, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff8d 	bl	8002914 <PWM_WS2812B_Write_24Bits>
	for (i = 0; i < num; i++)
 80029fa:	89fb      	ldrh	r3, [r7, #14]
 80029fc:	3301      	adds	r3, #1
 80029fe:	81fb      	strh	r3, [r7, #14]
 8002a00:	89fa      	ldrh	r2, [r7, #14]
 8002a02:	88bb      	ldrh	r3, [r7, #4]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d3f0      	bcc.n	80029ea <WS2812B_Set_Color+0x1a>
	}
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <PWM_WS2812B_Refresh>:
void PWM_WS2812B_Refresh()
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
	WS2812B_Reset();
 8002a18:	f7ff ff5e 	bl	80028d8 <WS2812B_Reset>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)WS2812B_BUFF, (LED_NUM+1)*24);
 8002a1c:	f640 6328 	movw	r3, #3624	@ 0xe28
 8002a20:	4a03      	ldr	r2, [pc, #12]	@ (8002a30 <PWM_WS2812B_Refresh+0x1c>)
 8002a22:	2104      	movs	r1, #4
 8002a24:	4803      	ldr	r0, [pc, #12]	@ (8002a34 <PWM_WS2812B_Refresh+0x20>)
 8002a26:	f7ff f805 	bl	8001a34 <HAL_TIM_PWM_Start_DMA>
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000118 	.word	0x20000118
 8002a34:	20000088 	.word	0x20000088

08002a38 <RGB_Show_64>:
{

}

void RGB_Show_64(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
	WS2812B_Buf_Clear();
 8002a3c:	f7ff ff20 	bl	8002880 <WS2812B_Buf_Clear>
	WS2812B_Set_Color(0,60,rand()%0x1000000);
 8002a40:	f000 f812 	bl	8002a68 <rand>
 8002a44:	4603      	mov	r3, r0
 8002a46:	425a      	negs	r2, r3
 8002a48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a4c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002a50:	bf58      	it	pl
 8002a52:	4253      	negpl	r3, r2
 8002a54:	461a      	mov	r2, r3
 8002a56:	213c      	movs	r1, #60	@ 0x3c
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7ff ffb9 	bl	80029d0 <WS2812B_Set_Color>
//	WS2812B_Set_Color(0,60,0xffffff);
//	WS2812B_Set_Color(30,15,0x00ff00);
//	WS2812B_Set_Color(45,15,0x0000ff);

	PWM_WS2812B_Refresh();
 8002a5e:	f7ff ffd9 	bl	8002a14 <PWM_WS2812B_Refresh>
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <rand>:
 8002a68:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <rand+0x5c>)
 8002a6a:	b510      	push	{r4, lr}
 8002a6c:	681c      	ldr	r4, [r3, #0]
 8002a6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002a70:	b9b3      	cbnz	r3, 8002aa0 <rand+0x38>
 8002a72:	2018      	movs	r0, #24
 8002a74:	f000 fa1e 	bl	8002eb4 <malloc>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6320      	str	r0, [r4, #48]	@ 0x30
 8002a7c:	b920      	cbnz	r0, 8002a88 <rand+0x20>
 8002a7e:	2152      	movs	r1, #82	@ 0x52
 8002a80:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <rand+0x60>)
 8002a82:	4812      	ldr	r0, [pc, #72]	@ (8002acc <rand+0x64>)
 8002a84:	f000 f9b0 	bl	8002de8 <__assert_func>
 8002a88:	4911      	ldr	r1, [pc, #68]	@ (8002ad0 <rand+0x68>)
 8002a8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <rand+0x6c>)
 8002a8c:	e9c0 1300 	strd	r1, r3, [r0]
 8002a90:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <rand+0x70>)
 8002a92:	2100      	movs	r1, #0
 8002a94:	6083      	str	r3, [r0, #8]
 8002a96:	230b      	movs	r3, #11
 8002a98:	8183      	strh	r3, [r0, #12]
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002aa0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002aa2:	480e      	ldr	r0, [pc, #56]	@ (8002adc <rand+0x74>)
 8002aa4:	690b      	ldr	r3, [r1, #16]
 8002aa6:	694c      	ldr	r4, [r1, #20]
 8002aa8:	4358      	muls	r0, r3
 8002aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae0 <rand+0x78>)
 8002aac:	fb02 0004 	mla	r0, r2, r4, r0
 8002ab0:	fba3 3202 	umull	r3, r2, r3, r2
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	eb40 0002 	adc.w	r0, r0, r2
 8002aba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002abe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002ac2:	bd10      	pop	{r4, pc}
 8002ac4:	20000018 	.word	0x20000018
 8002ac8:	08003a72 	.word	0x08003a72
 8002acc:	08003a89 	.word	0x08003a89
 8002ad0:	abcd330e 	.word	0xabcd330e
 8002ad4:	e66d1234 	.word	0xe66d1234
 8002ad8:	0005deec 	.word	0x0005deec
 8002adc:	5851f42d 	.word	0x5851f42d
 8002ae0:	4c957f2d 	.word	0x4c957f2d

08002ae4 <std>:
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	b510      	push	{r4, lr}
 8002ae8:	4604      	mov	r4, r0
 8002aea:	e9c0 3300 	strd	r3, r3, [r0]
 8002aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002af2:	6083      	str	r3, [r0, #8]
 8002af4:	8181      	strh	r1, [r0, #12]
 8002af6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002af8:	81c2      	strh	r2, [r0, #14]
 8002afa:	6183      	str	r3, [r0, #24]
 8002afc:	4619      	mov	r1, r3
 8002afe:	2208      	movs	r2, #8
 8002b00:	305c      	adds	r0, #92	@ 0x5c
 8002b02:	f000 f8f4 	bl	8002cee <memset>
 8002b06:	4b0d      	ldr	r3, [pc, #52]	@ (8002b3c <std+0x58>)
 8002b08:	6224      	str	r4, [r4, #32]
 8002b0a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <std+0x5c>)
 8002b0e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <std+0x60>)
 8002b12:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <std+0x64>)
 8002b16:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b18:	4b0c      	ldr	r3, [pc, #48]	@ (8002b4c <std+0x68>)
 8002b1a:	429c      	cmp	r4, r3
 8002b1c:	d006      	beq.n	8002b2c <std+0x48>
 8002b1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b22:	4294      	cmp	r4, r2
 8002b24:	d002      	beq.n	8002b2c <std+0x48>
 8002b26:	33d0      	adds	r3, #208	@ 0xd0
 8002b28:	429c      	cmp	r4, r3
 8002b2a:	d105      	bne.n	8002b38 <std+0x54>
 8002b2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b34:	f000 b954 	b.w	8002de0 <__retarget_lock_init_recursive>
 8002b38:	bd10      	pop	{r4, pc}
 8002b3a:	bf00      	nop
 8002b3c:	08002c69 	.word	0x08002c69
 8002b40:	08002c8b 	.word	0x08002c8b
 8002b44:	08002cc3 	.word	0x08002cc3
 8002b48:	08002ce7 	.word	0x08002ce7
 8002b4c:	200039b8 	.word	0x200039b8

08002b50 <stdio_exit_handler>:
 8002b50:	4a02      	ldr	r2, [pc, #8]	@ (8002b5c <stdio_exit_handler+0xc>)
 8002b52:	4903      	ldr	r1, [pc, #12]	@ (8002b60 <stdio_exit_handler+0x10>)
 8002b54:	4803      	ldr	r0, [pc, #12]	@ (8002b64 <stdio_exit_handler+0x14>)
 8002b56:	f000 b869 	b.w	8002c2c <_fwalk_sglue>
 8002b5a:	bf00      	nop
 8002b5c:	2000000c 	.word	0x2000000c
 8002b60:	08003121 	.word	0x08003121
 8002b64:	2000001c 	.word	0x2000001c

08002b68 <cleanup_stdio>:
 8002b68:	6841      	ldr	r1, [r0, #4]
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <cleanup_stdio+0x34>)
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	4299      	cmp	r1, r3
 8002b70:	4604      	mov	r4, r0
 8002b72:	d001      	beq.n	8002b78 <cleanup_stdio+0x10>
 8002b74:	f000 fad4 	bl	8003120 <_fflush_r>
 8002b78:	68a1      	ldr	r1, [r4, #8]
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <cleanup_stdio+0x38>)
 8002b7c:	4299      	cmp	r1, r3
 8002b7e:	d002      	beq.n	8002b86 <cleanup_stdio+0x1e>
 8002b80:	4620      	mov	r0, r4
 8002b82:	f000 facd 	bl	8003120 <_fflush_r>
 8002b86:	68e1      	ldr	r1, [r4, #12]
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <cleanup_stdio+0x3c>)
 8002b8a:	4299      	cmp	r1, r3
 8002b8c:	d004      	beq.n	8002b98 <cleanup_stdio+0x30>
 8002b8e:	4620      	mov	r0, r4
 8002b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b94:	f000 bac4 	b.w	8003120 <_fflush_r>
 8002b98:	bd10      	pop	{r4, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200039b8 	.word	0x200039b8
 8002ba0:	20003a20 	.word	0x20003a20
 8002ba4:	20003a88 	.word	0x20003a88

08002ba8 <global_stdio_init.part.0>:
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <global_stdio_init.part.0+0x30>)
 8002bac:	4c0b      	ldr	r4, [pc, #44]	@ (8002bdc <global_stdio_init.part.0+0x34>)
 8002bae:	4a0c      	ldr	r2, [pc, #48]	@ (8002be0 <global_stdio_init.part.0+0x38>)
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f7ff ff94 	bl	8002ae4 <std>
 8002bbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2109      	movs	r1, #9
 8002bc4:	f7ff ff8e 	bl	8002ae4 <std>
 8002bc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002bcc:	2202      	movs	r2, #2
 8002bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bd2:	2112      	movs	r1, #18
 8002bd4:	f7ff bf86 	b.w	8002ae4 <std>
 8002bd8:	20003af0 	.word	0x20003af0
 8002bdc:	200039b8 	.word	0x200039b8
 8002be0:	08002b51 	.word	0x08002b51

08002be4 <__sfp_lock_acquire>:
 8002be4:	4801      	ldr	r0, [pc, #4]	@ (8002bec <__sfp_lock_acquire+0x8>)
 8002be6:	f000 b8fc 	b.w	8002de2 <__retarget_lock_acquire_recursive>
 8002bea:	bf00      	nop
 8002bec:	20003af9 	.word	0x20003af9

08002bf0 <__sfp_lock_release>:
 8002bf0:	4801      	ldr	r0, [pc, #4]	@ (8002bf8 <__sfp_lock_release+0x8>)
 8002bf2:	f000 b8f7 	b.w	8002de4 <__retarget_lock_release_recursive>
 8002bf6:	bf00      	nop
 8002bf8:	20003af9 	.word	0x20003af9

08002bfc <__sinit>:
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	4604      	mov	r4, r0
 8002c00:	f7ff fff0 	bl	8002be4 <__sfp_lock_acquire>
 8002c04:	6a23      	ldr	r3, [r4, #32]
 8002c06:	b11b      	cbz	r3, 8002c10 <__sinit+0x14>
 8002c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c0c:	f7ff bff0 	b.w	8002bf0 <__sfp_lock_release>
 8002c10:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <__sinit+0x28>)
 8002c12:	6223      	str	r3, [r4, #32]
 8002c14:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <__sinit+0x2c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f5      	bne.n	8002c08 <__sinit+0xc>
 8002c1c:	f7ff ffc4 	bl	8002ba8 <global_stdio_init.part.0>
 8002c20:	e7f2      	b.n	8002c08 <__sinit+0xc>
 8002c22:	bf00      	nop
 8002c24:	08002b69 	.word	0x08002b69
 8002c28:	20003af0 	.word	0x20003af0

08002c2c <_fwalk_sglue>:
 8002c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c30:	4607      	mov	r7, r0
 8002c32:	4688      	mov	r8, r1
 8002c34:	4614      	mov	r4, r2
 8002c36:	2600      	movs	r6, #0
 8002c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8002c40:	d505      	bpl.n	8002c4e <_fwalk_sglue+0x22>
 8002c42:	6824      	ldr	r4, [r4, #0]
 8002c44:	2c00      	cmp	r4, #0
 8002c46:	d1f7      	bne.n	8002c38 <_fwalk_sglue+0xc>
 8002c48:	4630      	mov	r0, r6
 8002c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c4e:	89ab      	ldrh	r3, [r5, #12]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d907      	bls.n	8002c64 <_fwalk_sglue+0x38>
 8002c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	d003      	beq.n	8002c64 <_fwalk_sglue+0x38>
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	4638      	mov	r0, r7
 8002c60:	47c0      	blx	r8
 8002c62:	4306      	orrs	r6, r0
 8002c64:	3568      	adds	r5, #104	@ 0x68
 8002c66:	e7e9      	b.n	8002c3c <_fwalk_sglue+0x10>

08002c68 <__sread>:
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c70:	f000 f868 	bl	8002d44 <_read_r>
 8002c74:	2800      	cmp	r0, #0
 8002c76:	bfab      	itete	ge
 8002c78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8002c7c:	181b      	addge	r3, r3, r0
 8002c7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002c82:	bfac      	ite	ge
 8002c84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002c86:	81a3      	strhlt	r3, [r4, #12]
 8002c88:	bd10      	pop	{r4, pc}

08002c8a <__swrite>:
 8002c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c8e:	461f      	mov	r7, r3
 8002c90:	898b      	ldrh	r3, [r1, #12]
 8002c92:	4605      	mov	r5, r0
 8002c94:	05db      	lsls	r3, r3, #23
 8002c96:	460c      	mov	r4, r1
 8002c98:	4616      	mov	r6, r2
 8002c9a:	d505      	bpl.n	8002ca8 <__swrite+0x1e>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ca4:	f000 f83c 	bl	8002d20 <_lseek_r>
 8002ca8:	89a3      	ldrh	r3, [r4, #12]
 8002caa:	4632      	mov	r2, r6
 8002cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cb0:	81a3      	strh	r3, [r4, #12]
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	463b      	mov	r3, r7
 8002cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cbe:	f000 b853 	b.w	8002d68 <_write_r>

08002cc2 <__sseek>:
 8002cc2:	b510      	push	{r4, lr}
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cca:	f000 f829 	bl	8002d20 <_lseek_r>
 8002cce:	1c43      	adds	r3, r0, #1
 8002cd0:	89a3      	ldrh	r3, [r4, #12]
 8002cd2:	bf15      	itete	ne
 8002cd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002cd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002cda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002cde:	81a3      	strheq	r3, [r4, #12]
 8002ce0:	bf18      	it	ne
 8002ce2:	81a3      	strhne	r3, [r4, #12]
 8002ce4:	bd10      	pop	{r4, pc}

08002ce6 <__sclose>:
 8002ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cea:	f000 b809 	b.w	8002d00 <_close_r>

08002cee <memset>:
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4402      	add	r2, r0
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d100      	bne.n	8002cf8 <memset+0xa>
 8002cf6:	4770      	bx	lr
 8002cf8:	f803 1b01 	strb.w	r1, [r3], #1
 8002cfc:	e7f9      	b.n	8002cf2 <memset+0x4>
	...

08002d00 <_close_r>:
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	2300      	movs	r3, #0
 8002d04:	4d05      	ldr	r5, [pc, #20]	@ (8002d1c <_close_r+0x1c>)
 8002d06:	4604      	mov	r4, r0
 8002d08:	4608      	mov	r0, r1
 8002d0a:	602b      	str	r3, [r5, #0]
 8002d0c:	f7fd fb81 	bl	8000412 <_close>
 8002d10:	1c43      	adds	r3, r0, #1
 8002d12:	d102      	bne.n	8002d1a <_close_r+0x1a>
 8002d14:	682b      	ldr	r3, [r5, #0]
 8002d16:	b103      	cbz	r3, 8002d1a <_close_r+0x1a>
 8002d18:	6023      	str	r3, [r4, #0]
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
 8002d1c:	20003af4 	.word	0x20003af4

08002d20 <_lseek_r>:
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	4604      	mov	r4, r0
 8002d24:	4608      	mov	r0, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4d05      	ldr	r5, [pc, #20]	@ (8002d40 <_lseek_r+0x20>)
 8002d2c:	602a      	str	r2, [r5, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f7fd fb93 	bl	800045a <_lseek>
 8002d34:	1c43      	adds	r3, r0, #1
 8002d36:	d102      	bne.n	8002d3e <_lseek_r+0x1e>
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	b103      	cbz	r3, 8002d3e <_lseek_r+0x1e>
 8002d3c:	6023      	str	r3, [r4, #0]
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
 8002d40:	20003af4 	.word	0x20003af4

08002d44 <_read_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4604      	mov	r4, r0
 8002d48:	4608      	mov	r0, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	4d05      	ldr	r5, [pc, #20]	@ (8002d64 <_read_r+0x20>)
 8002d50:	602a      	str	r2, [r5, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f7fd fb24 	bl	80003a0 <_read>
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	d102      	bne.n	8002d62 <_read_r+0x1e>
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	b103      	cbz	r3, 8002d62 <_read_r+0x1e>
 8002d60:	6023      	str	r3, [r4, #0]
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	20003af4 	.word	0x20003af4

08002d68 <_write_r>:
 8002d68:	b538      	push	{r3, r4, r5, lr}
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	2200      	movs	r2, #0
 8002d72:	4d05      	ldr	r5, [pc, #20]	@ (8002d88 <_write_r+0x20>)
 8002d74:	602a      	str	r2, [r5, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f7fd fb2f 	bl	80003da <_write>
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d102      	bne.n	8002d86 <_write_r+0x1e>
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	b103      	cbz	r3, 8002d86 <_write_r+0x1e>
 8002d84:	6023      	str	r3, [r4, #0]
 8002d86:	bd38      	pop	{r3, r4, r5, pc}
 8002d88:	20003af4 	.word	0x20003af4

08002d8c <__errno>:
 8002d8c:	4b01      	ldr	r3, [pc, #4]	@ (8002d94 <__errno+0x8>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000018 	.word	0x20000018

08002d98 <__libc_init_array>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	4d0c      	ldr	r5, [pc, #48]	@ (8002dd0 <__libc_init_array+0x38>)
 8002d9e:	4c0d      	ldr	r4, [pc, #52]	@ (8002dd4 <__libc_init_array+0x3c>)
 8002da0:	1b64      	subs	r4, r4, r5
 8002da2:	10a4      	asrs	r4, r4, #2
 8002da4:	42a6      	cmp	r6, r4
 8002da6:	d109      	bne.n	8002dbc <__libc_init_array+0x24>
 8002da8:	f000 fe46 	bl	8003a38 <_init>
 8002dac:	2600      	movs	r6, #0
 8002dae:	4d0a      	ldr	r5, [pc, #40]	@ (8002dd8 <__libc_init_array+0x40>)
 8002db0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ddc <__libc_init_array+0x44>)
 8002db2:	1b64      	subs	r4, r4, r5
 8002db4:	10a4      	asrs	r4, r4, #2
 8002db6:	42a6      	cmp	r6, r4
 8002db8:	d105      	bne.n	8002dc6 <__libc_init_array+0x2e>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc0:	4798      	blx	r3
 8002dc2:	3601      	adds	r6, #1
 8002dc4:	e7ee      	b.n	8002da4 <__libc_init_array+0xc>
 8002dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dca:	4798      	blx	r3
 8002dcc:	3601      	adds	r6, #1
 8002dce:	e7f2      	b.n	8002db6 <__libc_init_array+0x1e>
 8002dd0:	08003b50 	.word	0x08003b50
 8002dd4:	08003b50 	.word	0x08003b50
 8002dd8:	08003b50 	.word	0x08003b50
 8002ddc:	08003b54 	.word	0x08003b54

08002de0 <__retarget_lock_init_recursive>:
 8002de0:	4770      	bx	lr

08002de2 <__retarget_lock_acquire_recursive>:
 8002de2:	4770      	bx	lr

08002de4 <__retarget_lock_release_recursive>:
 8002de4:	4770      	bx	lr
	...

08002de8 <__assert_func>:
 8002de8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002dea:	4614      	mov	r4, r2
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <__assert_func+0x2c>)
 8002df0:	4605      	mov	r5, r0
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68d8      	ldr	r0, [r3, #12]
 8002df6:	b954      	cbnz	r4, 8002e0e <__assert_func+0x26>
 8002df8:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <__assert_func+0x30>)
 8002dfa:	461c      	mov	r4, r3
 8002dfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002e00:	9100      	str	r1, [sp, #0]
 8002e02:	462b      	mov	r3, r5
 8002e04:	4905      	ldr	r1, [pc, #20]	@ (8002e1c <__assert_func+0x34>)
 8002e06:	f000 f9b3 	bl	8003170 <fiprintf>
 8002e0a:	f000 f9d3 	bl	80031b4 <abort>
 8002e0e:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <__assert_func+0x38>)
 8002e10:	e7f4      	b.n	8002dfc <__assert_func+0x14>
 8002e12:	bf00      	nop
 8002e14:	20000018 	.word	0x20000018
 8002e18:	08003b1c 	.word	0x08003b1c
 8002e1c:	08003aee 	.word	0x08003aee
 8002e20:	08003ae1 	.word	0x08003ae1

08002e24 <_free_r>:
 8002e24:	b538      	push	{r3, r4, r5, lr}
 8002e26:	4605      	mov	r5, r0
 8002e28:	2900      	cmp	r1, #0
 8002e2a:	d040      	beq.n	8002eae <_free_r+0x8a>
 8002e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e30:	1f0c      	subs	r4, r1, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bfb8      	it	lt
 8002e36:	18e4      	addlt	r4, r4, r3
 8002e38:	f000 f8e6 	bl	8003008 <__malloc_lock>
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb0 <_free_r+0x8c>)
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	b933      	cbnz	r3, 8002e50 <_free_r+0x2c>
 8002e42:	6063      	str	r3, [r4, #4]
 8002e44:	6014      	str	r4, [r2, #0]
 8002e46:	4628      	mov	r0, r5
 8002e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e4c:	f000 b8e2 	b.w	8003014 <__malloc_unlock>
 8002e50:	42a3      	cmp	r3, r4
 8002e52:	d908      	bls.n	8002e66 <_free_r+0x42>
 8002e54:	6820      	ldr	r0, [r4, #0]
 8002e56:	1821      	adds	r1, r4, r0
 8002e58:	428b      	cmp	r3, r1
 8002e5a:	bf01      	itttt	eq
 8002e5c:	6819      	ldreq	r1, [r3, #0]
 8002e5e:	685b      	ldreq	r3, [r3, #4]
 8002e60:	1809      	addeq	r1, r1, r0
 8002e62:	6021      	streq	r1, [r4, #0]
 8002e64:	e7ed      	b.n	8002e42 <_free_r+0x1e>
 8002e66:	461a      	mov	r2, r3
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	b10b      	cbz	r3, 8002e70 <_free_r+0x4c>
 8002e6c:	42a3      	cmp	r3, r4
 8002e6e:	d9fa      	bls.n	8002e66 <_free_r+0x42>
 8002e70:	6811      	ldr	r1, [r2, #0]
 8002e72:	1850      	adds	r0, r2, r1
 8002e74:	42a0      	cmp	r0, r4
 8002e76:	d10b      	bne.n	8002e90 <_free_r+0x6c>
 8002e78:	6820      	ldr	r0, [r4, #0]
 8002e7a:	4401      	add	r1, r0
 8002e7c:	1850      	adds	r0, r2, r1
 8002e7e:	4283      	cmp	r3, r0
 8002e80:	6011      	str	r1, [r2, #0]
 8002e82:	d1e0      	bne.n	8002e46 <_free_r+0x22>
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4408      	add	r0, r1
 8002e8a:	6010      	str	r0, [r2, #0]
 8002e8c:	6053      	str	r3, [r2, #4]
 8002e8e:	e7da      	b.n	8002e46 <_free_r+0x22>
 8002e90:	d902      	bls.n	8002e98 <_free_r+0x74>
 8002e92:	230c      	movs	r3, #12
 8002e94:	602b      	str	r3, [r5, #0]
 8002e96:	e7d6      	b.n	8002e46 <_free_r+0x22>
 8002e98:	6820      	ldr	r0, [r4, #0]
 8002e9a:	1821      	adds	r1, r4, r0
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	bf01      	itttt	eq
 8002ea0:	6819      	ldreq	r1, [r3, #0]
 8002ea2:	685b      	ldreq	r3, [r3, #4]
 8002ea4:	1809      	addeq	r1, r1, r0
 8002ea6:	6021      	streq	r1, [r4, #0]
 8002ea8:	6063      	str	r3, [r4, #4]
 8002eaa:	6054      	str	r4, [r2, #4]
 8002eac:	e7cb      	b.n	8002e46 <_free_r+0x22>
 8002eae:	bd38      	pop	{r3, r4, r5, pc}
 8002eb0:	20003b00 	.word	0x20003b00

08002eb4 <malloc>:
 8002eb4:	4b02      	ldr	r3, [pc, #8]	@ (8002ec0 <malloc+0xc>)
 8002eb6:	4601      	mov	r1, r0
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	f000 b825 	b.w	8002f08 <_malloc_r>
 8002ebe:	bf00      	nop
 8002ec0:	20000018 	.word	0x20000018

08002ec4 <sbrk_aligned>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4e0f      	ldr	r6, [pc, #60]	@ (8002f04 <sbrk_aligned+0x40>)
 8002ec8:	460c      	mov	r4, r1
 8002eca:	6831      	ldr	r1, [r6, #0]
 8002ecc:	4605      	mov	r5, r0
 8002ece:	b911      	cbnz	r1, 8002ed6 <sbrk_aligned+0x12>
 8002ed0:	f000 f960 	bl	8003194 <_sbrk_r>
 8002ed4:	6030      	str	r0, [r6, #0]
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f000 f95b 	bl	8003194 <_sbrk_r>
 8002ede:	1c43      	adds	r3, r0, #1
 8002ee0:	d103      	bne.n	8002eea <sbrk_aligned+0x26>
 8002ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	bd70      	pop	{r4, r5, r6, pc}
 8002eea:	1cc4      	adds	r4, r0, #3
 8002eec:	f024 0403 	bic.w	r4, r4, #3
 8002ef0:	42a0      	cmp	r0, r4
 8002ef2:	d0f8      	beq.n	8002ee6 <sbrk_aligned+0x22>
 8002ef4:	1a21      	subs	r1, r4, r0
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f000 f94c 	bl	8003194 <_sbrk_r>
 8002efc:	3001      	adds	r0, #1
 8002efe:	d1f2      	bne.n	8002ee6 <sbrk_aligned+0x22>
 8002f00:	e7ef      	b.n	8002ee2 <sbrk_aligned+0x1e>
 8002f02:	bf00      	nop
 8002f04:	20003afc 	.word	0x20003afc

08002f08 <_malloc_r>:
 8002f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f0c:	1ccd      	adds	r5, r1, #3
 8002f0e:	f025 0503 	bic.w	r5, r5, #3
 8002f12:	3508      	adds	r5, #8
 8002f14:	2d0c      	cmp	r5, #12
 8002f16:	bf38      	it	cc
 8002f18:	250c      	movcc	r5, #12
 8002f1a:	2d00      	cmp	r5, #0
 8002f1c:	4606      	mov	r6, r0
 8002f1e:	db01      	blt.n	8002f24 <_malloc_r+0x1c>
 8002f20:	42a9      	cmp	r1, r5
 8002f22:	d904      	bls.n	8002f2e <_malloc_r+0x26>
 8002f24:	230c      	movs	r3, #12
 8002f26:	6033      	str	r3, [r6, #0]
 8002f28:	2000      	movs	r0, #0
 8002f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003004 <_malloc_r+0xfc>
 8002f32:	f000 f869 	bl	8003008 <__malloc_lock>
 8002f36:	f8d8 3000 	ldr.w	r3, [r8]
 8002f3a:	461c      	mov	r4, r3
 8002f3c:	bb44      	cbnz	r4, 8002f90 <_malloc_r+0x88>
 8002f3e:	4629      	mov	r1, r5
 8002f40:	4630      	mov	r0, r6
 8002f42:	f7ff ffbf 	bl	8002ec4 <sbrk_aligned>
 8002f46:	1c43      	adds	r3, r0, #1
 8002f48:	4604      	mov	r4, r0
 8002f4a:	d158      	bne.n	8002ffe <_malloc_r+0xf6>
 8002f4c:	f8d8 4000 	ldr.w	r4, [r8]
 8002f50:	4627      	mov	r7, r4
 8002f52:	2f00      	cmp	r7, #0
 8002f54:	d143      	bne.n	8002fde <_malloc_r+0xd6>
 8002f56:	2c00      	cmp	r4, #0
 8002f58:	d04b      	beq.n	8002ff2 <_malloc_r+0xea>
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	4639      	mov	r1, r7
 8002f5e:	4630      	mov	r0, r6
 8002f60:	eb04 0903 	add.w	r9, r4, r3
 8002f64:	f000 f916 	bl	8003194 <_sbrk_r>
 8002f68:	4581      	cmp	r9, r0
 8002f6a:	d142      	bne.n	8002ff2 <_malloc_r+0xea>
 8002f6c:	6821      	ldr	r1, [r4, #0]
 8002f6e:	4630      	mov	r0, r6
 8002f70:	1a6d      	subs	r5, r5, r1
 8002f72:	4629      	mov	r1, r5
 8002f74:	f7ff ffa6 	bl	8002ec4 <sbrk_aligned>
 8002f78:	3001      	adds	r0, #1
 8002f7a:	d03a      	beq.n	8002ff2 <_malloc_r+0xea>
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	442b      	add	r3, r5
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	f8d8 3000 	ldr.w	r3, [r8]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	bb62      	cbnz	r2, 8002fe4 <_malloc_r+0xdc>
 8002f8a:	f8c8 7000 	str.w	r7, [r8]
 8002f8e:	e00f      	b.n	8002fb0 <_malloc_r+0xa8>
 8002f90:	6822      	ldr	r2, [r4, #0]
 8002f92:	1b52      	subs	r2, r2, r5
 8002f94:	d420      	bmi.n	8002fd8 <_malloc_r+0xd0>
 8002f96:	2a0b      	cmp	r2, #11
 8002f98:	d917      	bls.n	8002fca <_malloc_r+0xc2>
 8002f9a:	1961      	adds	r1, r4, r5
 8002f9c:	42a3      	cmp	r3, r4
 8002f9e:	6025      	str	r5, [r4, #0]
 8002fa0:	bf18      	it	ne
 8002fa2:	6059      	strne	r1, [r3, #4]
 8002fa4:	6863      	ldr	r3, [r4, #4]
 8002fa6:	bf08      	it	eq
 8002fa8:	f8c8 1000 	streq.w	r1, [r8]
 8002fac:	5162      	str	r2, [r4, r5]
 8002fae:	604b      	str	r3, [r1, #4]
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	f000 f82f 	bl	8003014 <__malloc_unlock>
 8002fb6:	f104 000b 	add.w	r0, r4, #11
 8002fba:	1d23      	adds	r3, r4, #4
 8002fbc:	f020 0007 	bic.w	r0, r0, #7
 8002fc0:	1ac2      	subs	r2, r0, r3
 8002fc2:	bf1c      	itt	ne
 8002fc4:	1a1b      	subne	r3, r3, r0
 8002fc6:	50a3      	strne	r3, [r4, r2]
 8002fc8:	e7af      	b.n	8002f2a <_malloc_r+0x22>
 8002fca:	6862      	ldr	r2, [r4, #4]
 8002fcc:	42a3      	cmp	r3, r4
 8002fce:	bf0c      	ite	eq
 8002fd0:	f8c8 2000 	streq.w	r2, [r8]
 8002fd4:	605a      	strne	r2, [r3, #4]
 8002fd6:	e7eb      	b.n	8002fb0 <_malloc_r+0xa8>
 8002fd8:	4623      	mov	r3, r4
 8002fda:	6864      	ldr	r4, [r4, #4]
 8002fdc:	e7ae      	b.n	8002f3c <_malloc_r+0x34>
 8002fde:	463c      	mov	r4, r7
 8002fe0:	687f      	ldr	r7, [r7, #4]
 8002fe2:	e7b6      	b.n	8002f52 <_malloc_r+0x4a>
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	d1fb      	bne.n	8002fe4 <_malloc_r+0xdc>
 8002fec:	2300      	movs	r3, #0
 8002fee:	6053      	str	r3, [r2, #4]
 8002ff0:	e7de      	b.n	8002fb0 <_malloc_r+0xa8>
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	6033      	str	r3, [r6, #0]
 8002ff8:	f000 f80c 	bl	8003014 <__malloc_unlock>
 8002ffc:	e794      	b.n	8002f28 <_malloc_r+0x20>
 8002ffe:	6005      	str	r5, [r0, #0]
 8003000:	e7d6      	b.n	8002fb0 <_malloc_r+0xa8>
 8003002:	bf00      	nop
 8003004:	20003b00 	.word	0x20003b00

08003008 <__malloc_lock>:
 8003008:	4801      	ldr	r0, [pc, #4]	@ (8003010 <__malloc_lock+0x8>)
 800300a:	f7ff beea 	b.w	8002de2 <__retarget_lock_acquire_recursive>
 800300e:	bf00      	nop
 8003010:	20003af8 	.word	0x20003af8

08003014 <__malloc_unlock>:
 8003014:	4801      	ldr	r0, [pc, #4]	@ (800301c <__malloc_unlock+0x8>)
 8003016:	f7ff bee5 	b.w	8002de4 <__retarget_lock_release_recursive>
 800301a:	bf00      	nop
 800301c:	20003af8 	.word	0x20003af8

08003020 <__sflush_r>:
 8003020:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003026:	0716      	lsls	r6, r2, #28
 8003028:	4605      	mov	r5, r0
 800302a:	460c      	mov	r4, r1
 800302c:	d454      	bmi.n	80030d8 <__sflush_r+0xb8>
 800302e:	684b      	ldr	r3, [r1, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	dc02      	bgt.n	800303a <__sflush_r+0x1a>
 8003034:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	dd48      	ble.n	80030cc <__sflush_r+0xac>
 800303a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800303c:	2e00      	cmp	r6, #0
 800303e:	d045      	beq.n	80030cc <__sflush_r+0xac>
 8003040:	2300      	movs	r3, #0
 8003042:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003046:	682f      	ldr	r7, [r5, #0]
 8003048:	6a21      	ldr	r1, [r4, #32]
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	d030      	beq.n	80030b0 <__sflush_r+0x90>
 800304e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	0759      	lsls	r1, r3, #29
 8003054:	d505      	bpl.n	8003062 <__sflush_r+0x42>
 8003056:	6863      	ldr	r3, [r4, #4]
 8003058:	1ad2      	subs	r2, r2, r3
 800305a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800305c:	b10b      	cbz	r3, 8003062 <__sflush_r+0x42>
 800305e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003060:	1ad2      	subs	r2, r2, r3
 8003062:	2300      	movs	r3, #0
 8003064:	4628      	mov	r0, r5
 8003066:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003068:	6a21      	ldr	r1, [r4, #32]
 800306a:	47b0      	blx	r6
 800306c:	1c43      	adds	r3, r0, #1
 800306e:	89a3      	ldrh	r3, [r4, #12]
 8003070:	d106      	bne.n	8003080 <__sflush_r+0x60>
 8003072:	6829      	ldr	r1, [r5, #0]
 8003074:	291d      	cmp	r1, #29
 8003076:	d82b      	bhi.n	80030d0 <__sflush_r+0xb0>
 8003078:	4a28      	ldr	r2, [pc, #160]	@ (800311c <__sflush_r+0xfc>)
 800307a:	410a      	asrs	r2, r1
 800307c:	07d6      	lsls	r6, r2, #31
 800307e:	d427      	bmi.n	80030d0 <__sflush_r+0xb0>
 8003080:	2200      	movs	r2, #0
 8003082:	6062      	str	r2, [r4, #4]
 8003084:	6922      	ldr	r2, [r4, #16]
 8003086:	04d9      	lsls	r1, r3, #19
 8003088:	6022      	str	r2, [r4, #0]
 800308a:	d504      	bpl.n	8003096 <__sflush_r+0x76>
 800308c:	1c42      	adds	r2, r0, #1
 800308e:	d101      	bne.n	8003094 <__sflush_r+0x74>
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	b903      	cbnz	r3, 8003096 <__sflush_r+0x76>
 8003094:	6560      	str	r0, [r4, #84]	@ 0x54
 8003096:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003098:	602f      	str	r7, [r5, #0]
 800309a:	b1b9      	cbz	r1, 80030cc <__sflush_r+0xac>
 800309c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030a0:	4299      	cmp	r1, r3
 80030a2:	d002      	beq.n	80030aa <__sflush_r+0x8a>
 80030a4:	4628      	mov	r0, r5
 80030a6:	f7ff febd 	bl	8002e24 <_free_r>
 80030aa:	2300      	movs	r3, #0
 80030ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80030ae:	e00d      	b.n	80030cc <__sflush_r+0xac>
 80030b0:	2301      	movs	r3, #1
 80030b2:	4628      	mov	r0, r5
 80030b4:	47b0      	blx	r6
 80030b6:	4602      	mov	r2, r0
 80030b8:	1c50      	adds	r0, r2, #1
 80030ba:	d1c9      	bne.n	8003050 <__sflush_r+0x30>
 80030bc:	682b      	ldr	r3, [r5, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0c6      	beq.n	8003050 <__sflush_r+0x30>
 80030c2:	2b1d      	cmp	r3, #29
 80030c4:	d001      	beq.n	80030ca <__sflush_r+0xaa>
 80030c6:	2b16      	cmp	r3, #22
 80030c8:	d11d      	bne.n	8003106 <__sflush_r+0xe6>
 80030ca:	602f      	str	r7, [r5, #0]
 80030cc:	2000      	movs	r0, #0
 80030ce:	e021      	b.n	8003114 <__sflush_r+0xf4>
 80030d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030d4:	b21b      	sxth	r3, r3
 80030d6:	e01a      	b.n	800310e <__sflush_r+0xee>
 80030d8:	690f      	ldr	r7, [r1, #16]
 80030da:	2f00      	cmp	r7, #0
 80030dc:	d0f6      	beq.n	80030cc <__sflush_r+0xac>
 80030de:	0793      	lsls	r3, r2, #30
 80030e0:	bf18      	it	ne
 80030e2:	2300      	movne	r3, #0
 80030e4:	680e      	ldr	r6, [r1, #0]
 80030e6:	bf08      	it	eq
 80030e8:	694b      	ldreq	r3, [r1, #20]
 80030ea:	1bf6      	subs	r6, r6, r7
 80030ec:	600f      	str	r7, [r1, #0]
 80030ee:	608b      	str	r3, [r1, #8]
 80030f0:	2e00      	cmp	r6, #0
 80030f2:	ddeb      	ble.n	80030cc <__sflush_r+0xac>
 80030f4:	4633      	mov	r3, r6
 80030f6:	463a      	mov	r2, r7
 80030f8:	4628      	mov	r0, r5
 80030fa:	6a21      	ldr	r1, [r4, #32]
 80030fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003100:	47e0      	blx	ip
 8003102:	2800      	cmp	r0, #0
 8003104:	dc07      	bgt.n	8003116 <__sflush_r+0xf6>
 8003106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800310a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800310e:	f04f 30ff 	mov.w	r0, #4294967295
 8003112:	81a3      	strh	r3, [r4, #12]
 8003114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003116:	4407      	add	r7, r0
 8003118:	1a36      	subs	r6, r6, r0
 800311a:	e7e9      	b.n	80030f0 <__sflush_r+0xd0>
 800311c:	dfbffffe 	.word	0xdfbffffe

08003120 <_fflush_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	690b      	ldr	r3, [r1, #16]
 8003124:	4605      	mov	r5, r0
 8003126:	460c      	mov	r4, r1
 8003128:	b913      	cbnz	r3, 8003130 <_fflush_r+0x10>
 800312a:	2500      	movs	r5, #0
 800312c:	4628      	mov	r0, r5
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	b118      	cbz	r0, 800313a <_fflush_r+0x1a>
 8003132:	6a03      	ldr	r3, [r0, #32]
 8003134:	b90b      	cbnz	r3, 800313a <_fflush_r+0x1a>
 8003136:	f7ff fd61 	bl	8002bfc <__sinit>
 800313a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f3      	beq.n	800312a <_fflush_r+0xa>
 8003142:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003144:	07d0      	lsls	r0, r2, #31
 8003146:	d404      	bmi.n	8003152 <_fflush_r+0x32>
 8003148:	0599      	lsls	r1, r3, #22
 800314a:	d402      	bmi.n	8003152 <_fflush_r+0x32>
 800314c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800314e:	f7ff fe48 	bl	8002de2 <__retarget_lock_acquire_recursive>
 8003152:	4628      	mov	r0, r5
 8003154:	4621      	mov	r1, r4
 8003156:	f7ff ff63 	bl	8003020 <__sflush_r>
 800315a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800315c:	4605      	mov	r5, r0
 800315e:	07da      	lsls	r2, r3, #31
 8003160:	d4e4      	bmi.n	800312c <_fflush_r+0xc>
 8003162:	89a3      	ldrh	r3, [r4, #12]
 8003164:	059b      	lsls	r3, r3, #22
 8003166:	d4e1      	bmi.n	800312c <_fflush_r+0xc>
 8003168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800316a:	f7ff fe3b 	bl	8002de4 <__retarget_lock_release_recursive>
 800316e:	e7dd      	b.n	800312c <_fflush_r+0xc>

08003170 <fiprintf>:
 8003170:	b40e      	push	{r1, r2, r3}
 8003172:	b503      	push	{r0, r1, lr}
 8003174:	4601      	mov	r1, r0
 8003176:	ab03      	add	r3, sp, #12
 8003178:	4805      	ldr	r0, [pc, #20]	@ (8003190 <fiprintf+0x20>)
 800317a:	f853 2b04 	ldr.w	r2, [r3], #4
 800317e:	6800      	ldr	r0, [r0, #0]
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	f000 f845 	bl	8003210 <_vfiprintf_r>
 8003186:	b002      	add	sp, #8
 8003188:	f85d eb04 	ldr.w	lr, [sp], #4
 800318c:	b003      	add	sp, #12
 800318e:	4770      	bx	lr
 8003190:	20000018 	.word	0x20000018

08003194 <_sbrk_r>:
 8003194:	b538      	push	{r3, r4, r5, lr}
 8003196:	2300      	movs	r3, #0
 8003198:	4d05      	ldr	r5, [pc, #20]	@ (80031b0 <_sbrk_r+0x1c>)
 800319a:	4604      	mov	r4, r0
 800319c:	4608      	mov	r0, r1
 800319e:	602b      	str	r3, [r5, #0]
 80031a0:	f7fd f968 	bl	8000474 <_sbrk>
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	d102      	bne.n	80031ae <_sbrk_r+0x1a>
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	b103      	cbz	r3, 80031ae <_sbrk_r+0x1a>
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	bd38      	pop	{r3, r4, r5, pc}
 80031b0:	20003af4 	.word	0x20003af4

080031b4 <abort>:
 80031b4:	2006      	movs	r0, #6
 80031b6:	b508      	push	{r3, lr}
 80031b8:	f000 fb90 	bl	80038dc <raise>
 80031bc:	2001      	movs	r0, #1
 80031be:	f7fd f8e4 	bl	800038a <_exit>

080031c2 <__sfputc_r>:
 80031c2:	6893      	ldr	r3, [r2, #8]
 80031c4:	b410      	push	{r4}
 80031c6:	3b01      	subs	r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	6093      	str	r3, [r2, #8]
 80031cc:	da07      	bge.n	80031de <__sfputc_r+0x1c>
 80031ce:	6994      	ldr	r4, [r2, #24]
 80031d0:	42a3      	cmp	r3, r4
 80031d2:	db01      	blt.n	80031d8 <__sfputc_r+0x16>
 80031d4:	290a      	cmp	r1, #10
 80031d6:	d102      	bne.n	80031de <__sfputc_r+0x1c>
 80031d8:	bc10      	pop	{r4}
 80031da:	f000 bac3 	b.w	8003764 <__swbuf_r>
 80031de:	6813      	ldr	r3, [r2, #0]
 80031e0:	1c58      	adds	r0, r3, #1
 80031e2:	6010      	str	r0, [r2, #0]
 80031e4:	7019      	strb	r1, [r3, #0]
 80031e6:	4608      	mov	r0, r1
 80031e8:	bc10      	pop	{r4}
 80031ea:	4770      	bx	lr

080031ec <__sfputs_r>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	4606      	mov	r6, r0
 80031f0:	460f      	mov	r7, r1
 80031f2:	4614      	mov	r4, r2
 80031f4:	18d5      	adds	r5, r2, r3
 80031f6:	42ac      	cmp	r4, r5
 80031f8:	d101      	bne.n	80031fe <__sfputs_r+0x12>
 80031fa:	2000      	movs	r0, #0
 80031fc:	e007      	b.n	800320e <__sfputs_r+0x22>
 80031fe:	463a      	mov	r2, r7
 8003200:	4630      	mov	r0, r6
 8003202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003206:	f7ff ffdc 	bl	80031c2 <__sfputc_r>
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	d1f3      	bne.n	80031f6 <__sfputs_r+0xa>
 800320e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003210 <_vfiprintf_r>:
 8003210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003214:	460d      	mov	r5, r1
 8003216:	4614      	mov	r4, r2
 8003218:	4698      	mov	r8, r3
 800321a:	4606      	mov	r6, r0
 800321c:	b09d      	sub	sp, #116	@ 0x74
 800321e:	b118      	cbz	r0, 8003228 <_vfiprintf_r+0x18>
 8003220:	6a03      	ldr	r3, [r0, #32]
 8003222:	b90b      	cbnz	r3, 8003228 <_vfiprintf_r+0x18>
 8003224:	f7ff fcea 	bl	8002bfc <__sinit>
 8003228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800322a:	07d9      	lsls	r1, r3, #31
 800322c:	d405      	bmi.n	800323a <_vfiprintf_r+0x2a>
 800322e:	89ab      	ldrh	r3, [r5, #12]
 8003230:	059a      	lsls	r2, r3, #22
 8003232:	d402      	bmi.n	800323a <_vfiprintf_r+0x2a>
 8003234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003236:	f7ff fdd4 	bl	8002de2 <__retarget_lock_acquire_recursive>
 800323a:	89ab      	ldrh	r3, [r5, #12]
 800323c:	071b      	lsls	r3, r3, #28
 800323e:	d501      	bpl.n	8003244 <_vfiprintf_r+0x34>
 8003240:	692b      	ldr	r3, [r5, #16]
 8003242:	b99b      	cbnz	r3, 800326c <_vfiprintf_r+0x5c>
 8003244:	4629      	mov	r1, r5
 8003246:	4630      	mov	r0, r6
 8003248:	f000 faca 	bl	80037e0 <__swsetup_r>
 800324c:	b170      	cbz	r0, 800326c <_vfiprintf_r+0x5c>
 800324e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003250:	07dc      	lsls	r4, r3, #31
 8003252:	d504      	bpl.n	800325e <_vfiprintf_r+0x4e>
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	b01d      	add	sp, #116	@ 0x74
 800325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800325e:	89ab      	ldrh	r3, [r5, #12]
 8003260:	0598      	lsls	r0, r3, #22
 8003262:	d4f7      	bmi.n	8003254 <_vfiprintf_r+0x44>
 8003264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003266:	f7ff fdbd 	bl	8002de4 <__retarget_lock_release_recursive>
 800326a:	e7f3      	b.n	8003254 <_vfiprintf_r+0x44>
 800326c:	2300      	movs	r3, #0
 800326e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003270:	2320      	movs	r3, #32
 8003272:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003276:	2330      	movs	r3, #48	@ 0x30
 8003278:	f04f 0901 	mov.w	r9, #1
 800327c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003280:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800342c <_vfiprintf_r+0x21c>
 8003284:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003288:	4623      	mov	r3, r4
 800328a:	469a      	mov	sl, r3
 800328c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003290:	b10a      	cbz	r2, 8003296 <_vfiprintf_r+0x86>
 8003292:	2a25      	cmp	r2, #37	@ 0x25
 8003294:	d1f9      	bne.n	800328a <_vfiprintf_r+0x7a>
 8003296:	ebba 0b04 	subs.w	fp, sl, r4
 800329a:	d00b      	beq.n	80032b4 <_vfiprintf_r+0xa4>
 800329c:	465b      	mov	r3, fp
 800329e:	4622      	mov	r2, r4
 80032a0:	4629      	mov	r1, r5
 80032a2:	4630      	mov	r0, r6
 80032a4:	f7ff ffa2 	bl	80031ec <__sfputs_r>
 80032a8:	3001      	adds	r0, #1
 80032aa:	f000 80a7 	beq.w	80033fc <_vfiprintf_r+0x1ec>
 80032ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032b0:	445a      	add	r2, fp
 80032b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80032b4:	f89a 3000 	ldrb.w	r3, [sl]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 809f 	beq.w	80033fc <_vfiprintf_r+0x1ec>
 80032be:	2300      	movs	r3, #0
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032c8:	f10a 0a01 	add.w	sl, sl, #1
 80032cc:	9304      	str	r3, [sp, #16]
 80032ce:	9307      	str	r3, [sp, #28]
 80032d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80032d6:	4654      	mov	r4, sl
 80032d8:	2205      	movs	r2, #5
 80032da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032de:	4853      	ldr	r0, [pc, #332]	@ (800342c <_vfiprintf_r+0x21c>)
 80032e0:	f000 fb18 	bl	8003914 <memchr>
 80032e4:	9a04      	ldr	r2, [sp, #16]
 80032e6:	b9d8      	cbnz	r0, 8003320 <_vfiprintf_r+0x110>
 80032e8:	06d1      	lsls	r1, r2, #27
 80032ea:	bf44      	itt	mi
 80032ec:	2320      	movmi	r3, #32
 80032ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032f2:	0713      	lsls	r3, r2, #28
 80032f4:	bf44      	itt	mi
 80032f6:	232b      	movmi	r3, #43	@ 0x2b
 80032f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032fc:	f89a 3000 	ldrb.w	r3, [sl]
 8003300:	2b2a      	cmp	r3, #42	@ 0x2a
 8003302:	d015      	beq.n	8003330 <_vfiprintf_r+0x120>
 8003304:	4654      	mov	r4, sl
 8003306:	2000      	movs	r0, #0
 8003308:	f04f 0c0a 	mov.w	ip, #10
 800330c:	9a07      	ldr	r2, [sp, #28]
 800330e:	4621      	mov	r1, r4
 8003310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003314:	3b30      	subs	r3, #48	@ 0x30
 8003316:	2b09      	cmp	r3, #9
 8003318:	d94b      	bls.n	80033b2 <_vfiprintf_r+0x1a2>
 800331a:	b1b0      	cbz	r0, 800334a <_vfiprintf_r+0x13a>
 800331c:	9207      	str	r2, [sp, #28]
 800331e:	e014      	b.n	800334a <_vfiprintf_r+0x13a>
 8003320:	eba0 0308 	sub.w	r3, r0, r8
 8003324:	fa09 f303 	lsl.w	r3, r9, r3
 8003328:	4313      	orrs	r3, r2
 800332a:	46a2      	mov	sl, r4
 800332c:	9304      	str	r3, [sp, #16]
 800332e:	e7d2      	b.n	80032d6 <_vfiprintf_r+0xc6>
 8003330:	9b03      	ldr	r3, [sp, #12]
 8003332:	1d19      	adds	r1, r3, #4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	9103      	str	r1, [sp, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	bfbb      	ittet	lt
 800333c:	425b      	neglt	r3, r3
 800333e:	f042 0202 	orrlt.w	r2, r2, #2
 8003342:	9307      	strge	r3, [sp, #28]
 8003344:	9307      	strlt	r3, [sp, #28]
 8003346:	bfb8      	it	lt
 8003348:	9204      	strlt	r2, [sp, #16]
 800334a:	7823      	ldrb	r3, [r4, #0]
 800334c:	2b2e      	cmp	r3, #46	@ 0x2e
 800334e:	d10a      	bne.n	8003366 <_vfiprintf_r+0x156>
 8003350:	7863      	ldrb	r3, [r4, #1]
 8003352:	2b2a      	cmp	r3, #42	@ 0x2a
 8003354:	d132      	bne.n	80033bc <_vfiprintf_r+0x1ac>
 8003356:	9b03      	ldr	r3, [sp, #12]
 8003358:	3402      	adds	r4, #2
 800335a:	1d1a      	adds	r2, r3, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	9203      	str	r2, [sp, #12]
 8003360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003364:	9305      	str	r3, [sp, #20]
 8003366:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003430 <_vfiprintf_r+0x220>
 800336a:	2203      	movs	r2, #3
 800336c:	4650      	mov	r0, sl
 800336e:	7821      	ldrb	r1, [r4, #0]
 8003370:	f000 fad0 	bl	8003914 <memchr>
 8003374:	b138      	cbz	r0, 8003386 <_vfiprintf_r+0x176>
 8003376:	2240      	movs	r2, #64	@ 0x40
 8003378:	9b04      	ldr	r3, [sp, #16]
 800337a:	eba0 000a 	sub.w	r0, r0, sl
 800337e:	4082      	lsls	r2, r0
 8003380:	4313      	orrs	r3, r2
 8003382:	3401      	adds	r4, #1
 8003384:	9304      	str	r3, [sp, #16]
 8003386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800338a:	2206      	movs	r2, #6
 800338c:	4829      	ldr	r0, [pc, #164]	@ (8003434 <_vfiprintf_r+0x224>)
 800338e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003392:	f000 fabf 	bl	8003914 <memchr>
 8003396:	2800      	cmp	r0, #0
 8003398:	d03f      	beq.n	800341a <_vfiprintf_r+0x20a>
 800339a:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <_vfiprintf_r+0x228>)
 800339c:	bb1b      	cbnz	r3, 80033e6 <_vfiprintf_r+0x1d6>
 800339e:	9b03      	ldr	r3, [sp, #12]
 80033a0:	3307      	adds	r3, #7
 80033a2:	f023 0307 	bic.w	r3, r3, #7
 80033a6:	3308      	adds	r3, #8
 80033a8:	9303      	str	r3, [sp, #12]
 80033aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033ac:	443b      	add	r3, r7
 80033ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80033b0:	e76a      	b.n	8003288 <_vfiprintf_r+0x78>
 80033b2:	460c      	mov	r4, r1
 80033b4:	2001      	movs	r0, #1
 80033b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80033ba:	e7a8      	b.n	800330e <_vfiprintf_r+0xfe>
 80033bc:	2300      	movs	r3, #0
 80033be:	f04f 0c0a 	mov.w	ip, #10
 80033c2:	4619      	mov	r1, r3
 80033c4:	3401      	adds	r4, #1
 80033c6:	9305      	str	r3, [sp, #20]
 80033c8:	4620      	mov	r0, r4
 80033ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033ce:	3a30      	subs	r2, #48	@ 0x30
 80033d0:	2a09      	cmp	r2, #9
 80033d2:	d903      	bls.n	80033dc <_vfiprintf_r+0x1cc>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0c6      	beq.n	8003366 <_vfiprintf_r+0x156>
 80033d8:	9105      	str	r1, [sp, #20]
 80033da:	e7c4      	b.n	8003366 <_vfiprintf_r+0x156>
 80033dc:	4604      	mov	r4, r0
 80033de:	2301      	movs	r3, #1
 80033e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80033e4:	e7f0      	b.n	80033c8 <_vfiprintf_r+0x1b8>
 80033e6:	ab03      	add	r3, sp, #12
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	462a      	mov	r2, r5
 80033ec:	4630      	mov	r0, r6
 80033ee:	4b13      	ldr	r3, [pc, #76]	@ (800343c <_vfiprintf_r+0x22c>)
 80033f0:	a904      	add	r1, sp, #16
 80033f2:	f3af 8000 	nop.w
 80033f6:	4607      	mov	r7, r0
 80033f8:	1c78      	adds	r0, r7, #1
 80033fa:	d1d6      	bne.n	80033aa <_vfiprintf_r+0x19a>
 80033fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033fe:	07d9      	lsls	r1, r3, #31
 8003400:	d405      	bmi.n	800340e <_vfiprintf_r+0x1fe>
 8003402:	89ab      	ldrh	r3, [r5, #12]
 8003404:	059a      	lsls	r2, r3, #22
 8003406:	d402      	bmi.n	800340e <_vfiprintf_r+0x1fe>
 8003408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800340a:	f7ff fceb 	bl	8002de4 <__retarget_lock_release_recursive>
 800340e:	89ab      	ldrh	r3, [r5, #12]
 8003410:	065b      	lsls	r3, r3, #25
 8003412:	f53f af1f 	bmi.w	8003254 <_vfiprintf_r+0x44>
 8003416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003418:	e71e      	b.n	8003258 <_vfiprintf_r+0x48>
 800341a:	ab03      	add	r3, sp, #12
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	462a      	mov	r2, r5
 8003420:	4630      	mov	r0, r6
 8003422:	4b06      	ldr	r3, [pc, #24]	@ (800343c <_vfiprintf_r+0x22c>)
 8003424:	a904      	add	r1, sp, #16
 8003426:	f000 f87d 	bl	8003524 <_printf_i>
 800342a:	e7e4      	b.n	80033f6 <_vfiprintf_r+0x1e6>
 800342c:	08003b1d 	.word	0x08003b1d
 8003430:	08003b23 	.word	0x08003b23
 8003434:	08003b27 	.word	0x08003b27
 8003438:	00000000 	.word	0x00000000
 800343c:	080031ed 	.word	0x080031ed

08003440 <_printf_common>:
 8003440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003444:	4616      	mov	r6, r2
 8003446:	4698      	mov	r8, r3
 8003448:	688a      	ldr	r2, [r1, #8]
 800344a:	690b      	ldr	r3, [r1, #16]
 800344c:	4607      	mov	r7, r0
 800344e:	4293      	cmp	r3, r2
 8003450:	bfb8      	it	lt
 8003452:	4613      	movlt	r3, r2
 8003454:	6033      	str	r3, [r6, #0]
 8003456:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800345a:	460c      	mov	r4, r1
 800345c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003460:	b10a      	cbz	r2, 8003466 <_printf_common+0x26>
 8003462:	3301      	adds	r3, #1
 8003464:	6033      	str	r3, [r6, #0]
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	0699      	lsls	r1, r3, #26
 800346a:	bf42      	ittt	mi
 800346c:	6833      	ldrmi	r3, [r6, #0]
 800346e:	3302      	addmi	r3, #2
 8003470:	6033      	strmi	r3, [r6, #0]
 8003472:	6825      	ldr	r5, [r4, #0]
 8003474:	f015 0506 	ands.w	r5, r5, #6
 8003478:	d106      	bne.n	8003488 <_printf_common+0x48>
 800347a:	f104 0a19 	add.w	sl, r4, #25
 800347e:	68e3      	ldr	r3, [r4, #12]
 8003480:	6832      	ldr	r2, [r6, #0]
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	42ab      	cmp	r3, r5
 8003486:	dc2b      	bgt.n	80034e0 <_printf_common+0xa0>
 8003488:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800348c:	6822      	ldr	r2, [r4, #0]
 800348e:	3b00      	subs	r3, #0
 8003490:	bf18      	it	ne
 8003492:	2301      	movne	r3, #1
 8003494:	0692      	lsls	r2, r2, #26
 8003496:	d430      	bmi.n	80034fa <_printf_common+0xba>
 8003498:	4641      	mov	r1, r8
 800349a:	4638      	mov	r0, r7
 800349c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034a0:	47c8      	blx	r9
 80034a2:	3001      	adds	r0, #1
 80034a4:	d023      	beq.n	80034ee <_printf_common+0xae>
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	6922      	ldr	r2, [r4, #16]
 80034aa:	f003 0306 	and.w	r3, r3, #6
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	bf14      	ite	ne
 80034b2:	2500      	movne	r5, #0
 80034b4:	6833      	ldreq	r3, [r6, #0]
 80034b6:	f04f 0600 	mov.w	r6, #0
 80034ba:	bf08      	it	eq
 80034bc:	68e5      	ldreq	r5, [r4, #12]
 80034be:	f104 041a 	add.w	r4, r4, #26
 80034c2:	bf08      	it	eq
 80034c4:	1aed      	subeq	r5, r5, r3
 80034c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034ca:	bf08      	it	eq
 80034cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034d0:	4293      	cmp	r3, r2
 80034d2:	bfc4      	itt	gt
 80034d4:	1a9b      	subgt	r3, r3, r2
 80034d6:	18ed      	addgt	r5, r5, r3
 80034d8:	42b5      	cmp	r5, r6
 80034da:	d11a      	bne.n	8003512 <_printf_common+0xd2>
 80034dc:	2000      	movs	r0, #0
 80034de:	e008      	b.n	80034f2 <_printf_common+0xb2>
 80034e0:	2301      	movs	r3, #1
 80034e2:	4652      	mov	r2, sl
 80034e4:	4641      	mov	r1, r8
 80034e6:	4638      	mov	r0, r7
 80034e8:	47c8      	blx	r9
 80034ea:	3001      	adds	r0, #1
 80034ec:	d103      	bne.n	80034f6 <_printf_common+0xb6>
 80034ee:	f04f 30ff 	mov.w	r0, #4294967295
 80034f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f6:	3501      	adds	r5, #1
 80034f8:	e7c1      	b.n	800347e <_printf_common+0x3e>
 80034fa:	2030      	movs	r0, #48	@ 0x30
 80034fc:	18e1      	adds	r1, r4, r3
 80034fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003508:	4422      	add	r2, r4
 800350a:	3302      	adds	r3, #2
 800350c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003510:	e7c2      	b.n	8003498 <_printf_common+0x58>
 8003512:	2301      	movs	r3, #1
 8003514:	4622      	mov	r2, r4
 8003516:	4641      	mov	r1, r8
 8003518:	4638      	mov	r0, r7
 800351a:	47c8      	blx	r9
 800351c:	3001      	adds	r0, #1
 800351e:	d0e6      	beq.n	80034ee <_printf_common+0xae>
 8003520:	3601      	adds	r6, #1
 8003522:	e7d9      	b.n	80034d8 <_printf_common+0x98>

08003524 <_printf_i>:
 8003524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003528:	7e0f      	ldrb	r7, [r1, #24]
 800352a:	4691      	mov	r9, r2
 800352c:	2f78      	cmp	r7, #120	@ 0x78
 800352e:	4680      	mov	r8, r0
 8003530:	460c      	mov	r4, r1
 8003532:	469a      	mov	sl, r3
 8003534:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003536:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800353a:	d807      	bhi.n	800354c <_printf_i+0x28>
 800353c:	2f62      	cmp	r7, #98	@ 0x62
 800353e:	d80a      	bhi.n	8003556 <_printf_i+0x32>
 8003540:	2f00      	cmp	r7, #0
 8003542:	f000 80d3 	beq.w	80036ec <_printf_i+0x1c8>
 8003546:	2f58      	cmp	r7, #88	@ 0x58
 8003548:	f000 80ba 	beq.w	80036c0 <_printf_i+0x19c>
 800354c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003550:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003554:	e03a      	b.n	80035cc <_printf_i+0xa8>
 8003556:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800355a:	2b15      	cmp	r3, #21
 800355c:	d8f6      	bhi.n	800354c <_printf_i+0x28>
 800355e:	a101      	add	r1, pc, #4	@ (adr r1, 8003564 <_printf_i+0x40>)
 8003560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003564:	080035bd 	.word	0x080035bd
 8003568:	080035d1 	.word	0x080035d1
 800356c:	0800354d 	.word	0x0800354d
 8003570:	0800354d 	.word	0x0800354d
 8003574:	0800354d 	.word	0x0800354d
 8003578:	0800354d 	.word	0x0800354d
 800357c:	080035d1 	.word	0x080035d1
 8003580:	0800354d 	.word	0x0800354d
 8003584:	0800354d 	.word	0x0800354d
 8003588:	0800354d 	.word	0x0800354d
 800358c:	0800354d 	.word	0x0800354d
 8003590:	080036d3 	.word	0x080036d3
 8003594:	080035fb 	.word	0x080035fb
 8003598:	0800368d 	.word	0x0800368d
 800359c:	0800354d 	.word	0x0800354d
 80035a0:	0800354d 	.word	0x0800354d
 80035a4:	080036f5 	.word	0x080036f5
 80035a8:	0800354d 	.word	0x0800354d
 80035ac:	080035fb 	.word	0x080035fb
 80035b0:	0800354d 	.word	0x0800354d
 80035b4:	0800354d 	.word	0x0800354d
 80035b8:	08003695 	.word	0x08003695
 80035bc:	6833      	ldr	r3, [r6, #0]
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6032      	str	r2, [r6, #0]
 80035c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035cc:	2301      	movs	r3, #1
 80035ce:	e09e      	b.n	800370e <_printf_i+0x1ea>
 80035d0:	6833      	ldr	r3, [r6, #0]
 80035d2:	6820      	ldr	r0, [r4, #0]
 80035d4:	1d19      	adds	r1, r3, #4
 80035d6:	6031      	str	r1, [r6, #0]
 80035d8:	0606      	lsls	r6, r0, #24
 80035da:	d501      	bpl.n	80035e0 <_printf_i+0xbc>
 80035dc:	681d      	ldr	r5, [r3, #0]
 80035de:	e003      	b.n	80035e8 <_printf_i+0xc4>
 80035e0:	0645      	lsls	r5, r0, #25
 80035e2:	d5fb      	bpl.n	80035dc <_printf_i+0xb8>
 80035e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035e8:	2d00      	cmp	r5, #0
 80035ea:	da03      	bge.n	80035f4 <_printf_i+0xd0>
 80035ec:	232d      	movs	r3, #45	@ 0x2d
 80035ee:	426d      	negs	r5, r5
 80035f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035f4:	230a      	movs	r3, #10
 80035f6:	4859      	ldr	r0, [pc, #356]	@ (800375c <_printf_i+0x238>)
 80035f8:	e011      	b.n	800361e <_printf_i+0xfa>
 80035fa:	6821      	ldr	r1, [r4, #0]
 80035fc:	6833      	ldr	r3, [r6, #0]
 80035fe:	0608      	lsls	r0, r1, #24
 8003600:	f853 5b04 	ldr.w	r5, [r3], #4
 8003604:	d402      	bmi.n	800360c <_printf_i+0xe8>
 8003606:	0649      	lsls	r1, r1, #25
 8003608:	bf48      	it	mi
 800360a:	b2ad      	uxthmi	r5, r5
 800360c:	2f6f      	cmp	r7, #111	@ 0x6f
 800360e:	6033      	str	r3, [r6, #0]
 8003610:	bf14      	ite	ne
 8003612:	230a      	movne	r3, #10
 8003614:	2308      	moveq	r3, #8
 8003616:	4851      	ldr	r0, [pc, #324]	@ (800375c <_printf_i+0x238>)
 8003618:	2100      	movs	r1, #0
 800361a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800361e:	6866      	ldr	r6, [r4, #4]
 8003620:	2e00      	cmp	r6, #0
 8003622:	bfa8      	it	ge
 8003624:	6821      	ldrge	r1, [r4, #0]
 8003626:	60a6      	str	r6, [r4, #8]
 8003628:	bfa4      	itt	ge
 800362a:	f021 0104 	bicge.w	r1, r1, #4
 800362e:	6021      	strge	r1, [r4, #0]
 8003630:	b90d      	cbnz	r5, 8003636 <_printf_i+0x112>
 8003632:	2e00      	cmp	r6, #0
 8003634:	d04b      	beq.n	80036ce <_printf_i+0x1aa>
 8003636:	4616      	mov	r6, r2
 8003638:	fbb5 f1f3 	udiv	r1, r5, r3
 800363c:	fb03 5711 	mls	r7, r3, r1, r5
 8003640:	5dc7      	ldrb	r7, [r0, r7]
 8003642:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003646:	462f      	mov	r7, r5
 8003648:	42bb      	cmp	r3, r7
 800364a:	460d      	mov	r5, r1
 800364c:	d9f4      	bls.n	8003638 <_printf_i+0x114>
 800364e:	2b08      	cmp	r3, #8
 8003650:	d10b      	bne.n	800366a <_printf_i+0x146>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	07df      	lsls	r7, r3, #31
 8003656:	d508      	bpl.n	800366a <_printf_i+0x146>
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	6861      	ldr	r1, [r4, #4]
 800365c:	4299      	cmp	r1, r3
 800365e:	bfde      	ittt	le
 8003660:	2330      	movle	r3, #48	@ 0x30
 8003662:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003666:	f106 36ff 	addle.w	r6, r6, #4294967295
 800366a:	1b92      	subs	r2, r2, r6
 800366c:	6122      	str	r2, [r4, #16]
 800366e:	464b      	mov	r3, r9
 8003670:	4621      	mov	r1, r4
 8003672:	4640      	mov	r0, r8
 8003674:	f8cd a000 	str.w	sl, [sp]
 8003678:	aa03      	add	r2, sp, #12
 800367a:	f7ff fee1 	bl	8003440 <_printf_common>
 800367e:	3001      	adds	r0, #1
 8003680:	d14a      	bne.n	8003718 <_printf_i+0x1f4>
 8003682:	f04f 30ff 	mov.w	r0, #4294967295
 8003686:	b004      	add	sp, #16
 8003688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f043 0320 	orr.w	r3, r3, #32
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	2778      	movs	r7, #120	@ 0x78
 8003696:	4832      	ldr	r0, [pc, #200]	@ (8003760 <_printf_i+0x23c>)
 8003698:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	6831      	ldr	r1, [r6, #0]
 80036a0:	061f      	lsls	r7, r3, #24
 80036a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80036a6:	d402      	bmi.n	80036ae <_printf_i+0x18a>
 80036a8:	065f      	lsls	r7, r3, #25
 80036aa:	bf48      	it	mi
 80036ac:	b2ad      	uxthmi	r5, r5
 80036ae:	6031      	str	r1, [r6, #0]
 80036b0:	07d9      	lsls	r1, r3, #31
 80036b2:	bf44      	itt	mi
 80036b4:	f043 0320 	orrmi.w	r3, r3, #32
 80036b8:	6023      	strmi	r3, [r4, #0]
 80036ba:	b11d      	cbz	r5, 80036c4 <_printf_i+0x1a0>
 80036bc:	2310      	movs	r3, #16
 80036be:	e7ab      	b.n	8003618 <_printf_i+0xf4>
 80036c0:	4826      	ldr	r0, [pc, #152]	@ (800375c <_printf_i+0x238>)
 80036c2:	e7e9      	b.n	8003698 <_printf_i+0x174>
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	f023 0320 	bic.w	r3, r3, #32
 80036ca:	6023      	str	r3, [r4, #0]
 80036cc:	e7f6      	b.n	80036bc <_printf_i+0x198>
 80036ce:	4616      	mov	r6, r2
 80036d0:	e7bd      	b.n	800364e <_printf_i+0x12a>
 80036d2:	6833      	ldr	r3, [r6, #0]
 80036d4:	6825      	ldr	r5, [r4, #0]
 80036d6:	1d18      	adds	r0, r3, #4
 80036d8:	6961      	ldr	r1, [r4, #20]
 80036da:	6030      	str	r0, [r6, #0]
 80036dc:	062e      	lsls	r6, r5, #24
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	d501      	bpl.n	80036e6 <_printf_i+0x1c2>
 80036e2:	6019      	str	r1, [r3, #0]
 80036e4:	e002      	b.n	80036ec <_printf_i+0x1c8>
 80036e6:	0668      	lsls	r0, r5, #25
 80036e8:	d5fb      	bpl.n	80036e2 <_printf_i+0x1be>
 80036ea:	8019      	strh	r1, [r3, #0]
 80036ec:	2300      	movs	r3, #0
 80036ee:	4616      	mov	r6, r2
 80036f0:	6123      	str	r3, [r4, #16]
 80036f2:	e7bc      	b.n	800366e <_printf_i+0x14a>
 80036f4:	6833      	ldr	r3, [r6, #0]
 80036f6:	2100      	movs	r1, #0
 80036f8:	1d1a      	adds	r2, r3, #4
 80036fa:	6032      	str	r2, [r6, #0]
 80036fc:	681e      	ldr	r6, [r3, #0]
 80036fe:	6862      	ldr	r2, [r4, #4]
 8003700:	4630      	mov	r0, r6
 8003702:	f000 f907 	bl	8003914 <memchr>
 8003706:	b108      	cbz	r0, 800370c <_printf_i+0x1e8>
 8003708:	1b80      	subs	r0, r0, r6
 800370a:	6060      	str	r0, [r4, #4]
 800370c:	6863      	ldr	r3, [r4, #4]
 800370e:	6123      	str	r3, [r4, #16]
 8003710:	2300      	movs	r3, #0
 8003712:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003716:	e7aa      	b.n	800366e <_printf_i+0x14a>
 8003718:	4632      	mov	r2, r6
 800371a:	4649      	mov	r1, r9
 800371c:	4640      	mov	r0, r8
 800371e:	6923      	ldr	r3, [r4, #16]
 8003720:	47d0      	blx	sl
 8003722:	3001      	adds	r0, #1
 8003724:	d0ad      	beq.n	8003682 <_printf_i+0x15e>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	079b      	lsls	r3, r3, #30
 800372a:	d413      	bmi.n	8003754 <_printf_i+0x230>
 800372c:	68e0      	ldr	r0, [r4, #12]
 800372e:	9b03      	ldr	r3, [sp, #12]
 8003730:	4298      	cmp	r0, r3
 8003732:	bfb8      	it	lt
 8003734:	4618      	movlt	r0, r3
 8003736:	e7a6      	b.n	8003686 <_printf_i+0x162>
 8003738:	2301      	movs	r3, #1
 800373a:	4632      	mov	r2, r6
 800373c:	4649      	mov	r1, r9
 800373e:	4640      	mov	r0, r8
 8003740:	47d0      	blx	sl
 8003742:	3001      	adds	r0, #1
 8003744:	d09d      	beq.n	8003682 <_printf_i+0x15e>
 8003746:	3501      	adds	r5, #1
 8003748:	68e3      	ldr	r3, [r4, #12]
 800374a:	9903      	ldr	r1, [sp, #12]
 800374c:	1a5b      	subs	r3, r3, r1
 800374e:	42ab      	cmp	r3, r5
 8003750:	dcf2      	bgt.n	8003738 <_printf_i+0x214>
 8003752:	e7eb      	b.n	800372c <_printf_i+0x208>
 8003754:	2500      	movs	r5, #0
 8003756:	f104 0619 	add.w	r6, r4, #25
 800375a:	e7f5      	b.n	8003748 <_printf_i+0x224>
 800375c:	08003b2e 	.word	0x08003b2e
 8003760:	08003b3f 	.word	0x08003b3f

08003764 <__swbuf_r>:
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003766:	460e      	mov	r6, r1
 8003768:	4614      	mov	r4, r2
 800376a:	4605      	mov	r5, r0
 800376c:	b118      	cbz	r0, 8003776 <__swbuf_r+0x12>
 800376e:	6a03      	ldr	r3, [r0, #32]
 8003770:	b90b      	cbnz	r3, 8003776 <__swbuf_r+0x12>
 8003772:	f7ff fa43 	bl	8002bfc <__sinit>
 8003776:	69a3      	ldr	r3, [r4, #24]
 8003778:	60a3      	str	r3, [r4, #8]
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	071a      	lsls	r2, r3, #28
 800377e:	d501      	bpl.n	8003784 <__swbuf_r+0x20>
 8003780:	6923      	ldr	r3, [r4, #16]
 8003782:	b943      	cbnz	r3, 8003796 <__swbuf_r+0x32>
 8003784:	4621      	mov	r1, r4
 8003786:	4628      	mov	r0, r5
 8003788:	f000 f82a 	bl	80037e0 <__swsetup_r>
 800378c:	b118      	cbz	r0, 8003796 <__swbuf_r+0x32>
 800378e:	f04f 37ff 	mov.w	r7, #4294967295
 8003792:	4638      	mov	r0, r7
 8003794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	6922      	ldr	r2, [r4, #16]
 800379a:	b2f6      	uxtb	r6, r6
 800379c:	1a98      	subs	r0, r3, r2
 800379e:	6963      	ldr	r3, [r4, #20]
 80037a0:	4637      	mov	r7, r6
 80037a2:	4283      	cmp	r3, r0
 80037a4:	dc05      	bgt.n	80037b2 <__swbuf_r+0x4e>
 80037a6:	4621      	mov	r1, r4
 80037a8:	4628      	mov	r0, r5
 80037aa:	f7ff fcb9 	bl	8003120 <_fflush_r>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d1ed      	bne.n	800378e <__swbuf_r+0x2a>
 80037b2:	68a3      	ldr	r3, [r4, #8]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	60a3      	str	r3, [r4, #8]
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	6022      	str	r2, [r4, #0]
 80037be:	701e      	strb	r6, [r3, #0]
 80037c0:	6962      	ldr	r2, [r4, #20]
 80037c2:	1c43      	adds	r3, r0, #1
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d004      	beq.n	80037d2 <__swbuf_r+0x6e>
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	07db      	lsls	r3, r3, #31
 80037cc:	d5e1      	bpl.n	8003792 <__swbuf_r+0x2e>
 80037ce:	2e0a      	cmp	r6, #10
 80037d0:	d1df      	bne.n	8003792 <__swbuf_r+0x2e>
 80037d2:	4621      	mov	r1, r4
 80037d4:	4628      	mov	r0, r5
 80037d6:	f7ff fca3 	bl	8003120 <_fflush_r>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d0d9      	beq.n	8003792 <__swbuf_r+0x2e>
 80037de:	e7d6      	b.n	800378e <__swbuf_r+0x2a>

080037e0 <__swsetup_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	4b29      	ldr	r3, [pc, #164]	@ (8003888 <__swsetup_r+0xa8>)
 80037e4:	4605      	mov	r5, r0
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	460c      	mov	r4, r1
 80037ea:	b118      	cbz	r0, 80037f4 <__swsetup_r+0x14>
 80037ec:	6a03      	ldr	r3, [r0, #32]
 80037ee:	b90b      	cbnz	r3, 80037f4 <__swsetup_r+0x14>
 80037f0:	f7ff fa04 	bl	8002bfc <__sinit>
 80037f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f8:	0719      	lsls	r1, r3, #28
 80037fa:	d422      	bmi.n	8003842 <__swsetup_r+0x62>
 80037fc:	06da      	lsls	r2, r3, #27
 80037fe:	d407      	bmi.n	8003810 <__swsetup_r+0x30>
 8003800:	2209      	movs	r2, #9
 8003802:	602a      	str	r2, [r5, #0]
 8003804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	81a3      	strh	r3, [r4, #12]
 800380e:	e033      	b.n	8003878 <__swsetup_r+0x98>
 8003810:	0758      	lsls	r0, r3, #29
 8003812:	d512      	bpl.n	800383a <__swsetup_r+0x5a>
 8003814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003816:	b141      	cbz	r1, 800382a <__swsetup_r+0x4a>
 8003818:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800381c:	4299      	cmp	r1, r3
 800381e:	d002      	beq.n	8003826 <__swsetup_r+0x46>
 8003820:	4628      	mov	r0, r5
 8003822:	f7ff faff 	bl	8002e24 <_free_r>
 8003826:	2300      	movs	r3, #0
 8003828:	6363      	str	r3, [r4, #52]	@ 0x34
 800382a:	89a3      	ldrh	r3, [r4, #12]
 800382c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003830:	81a3      	strh	r3, [r4, #12]
 8003832:	2300      	movs	r3, #0
 8003834:	6063      	str	r3, [r4, #4]
 8003836:	6923      	ldr	r3, [r4, #16]
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	f043 0308 	orr.w	r3, r3, #8
 8003840:	81a3      	strh	r3, [r4, #12]
 8003842:	6923      	ldr	r3, [r4, #16]
 8003844:	b94b      	cbnz	r3, 800385a <__swsetup_r+0x7a>
 8003846:	89a3      	ldrh	r3, [r4, #12]
 8003848:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800384c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003850:	d003      	beq.n	800385a <__swsetup_r+0x7a>
 8003852:	4621      	mov	r1, r4
 8003854:	4628      	mov	r0, r5
 8003856:	f000 f890 	bl	800397a <__smakebuf_r>
 800385a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800385e:	f013 0201 	ands.w	r2, r3, #1
 8003862:	d00a      	beq.n	800387a <__swsetup_r+0x9a>
 8003864:	2200      	movs	r2, #0
 8003866:	60a2      	str	r2, [r4, #8]
 8003868:	6962      	ldr	r2, [r4, #20]
 800386a:	4252      	negs	r2, r2
 800386c:	61a2      	str	r2, [r4, #24]
 800386e:	6922      	ldr	r2, [r4, #16]
 8003870:	b942      	cbnz	r2, 8003884 <__swsetup_r+0xa4>
 8003872:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003876:	d1c5      	bne.n	8003804 <__swsetup_r+0x24>
 8003878:	bd38      	pop	{r3, r4, r5, pc}
 800387a:	0799      	lsls	r1, r3, #30
 800387c:	bf58      	it	pl
 800387e:	6962      	ldrpl	r2, [r4, #20]
 8003880:	60a2      	str	r2, [r4, #8]
 8003882:	e7f4      	b.n	800386e <__swsetup_r+0x8e>
 8003884:	2000      	movs	r0, #0
 8003886:	e7f7      	b.n	8003878 <__swsetup_r+0x98>
 8003888:	20000018 	.word	0x20000018

0800388c <_raise_r>:
 800388c:	291f      	cmp	r1, #31
 800388e:	b538      	push	{r3, r4, r5, lr}
 8003890:	4605      	mov	r5, r0
 8003892:	460c      	mov	r4, r1
 8003894:	d904      	bls.n	80038a0 <_raise_r+0x14>
 8003896:	2316      	movs	r3, #22
 8003898:	6003      	str	r3, [r0, #0]
 800389a:	f04f 30ff 	mov.w	r0, #4294967295
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80038a2:	b112      	cbz	r2, 80038aa <_raise_r+0x1e>
 80038a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80038a8:	b94b      	cbnz	r3, 80038be <_raise_r+0x32>
 80038aa:	4628      	mov	r0, r5
 80038ac:	f000 f830 	bl	8003910 <_getpid_r>
 80038b0:	4622      	mov	r2, r4
 80038b2:	4601      	mov	r1, r0
 80038b4:	4628      	mov	r0, r5
 80038b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ba:	f000 b817 	b.w	80038ec <_kill_r>
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d00a      	beq.n	80038d8 <_raise_r+0x4c>
 80038c2:	1c59      	adds	r1, r3, #1
 80038c4:	d103      	bne.n	80038ce <_raise_r+0x42>
 80038c6:	2316      	movs	r3, #22
 80038c8:	6003      	str	r3, [r0, #0]
 80038ca:	2001      	movs	r0, #1
 80038cc:	e7e7      	b.n	800389e <_raise_r+0x12>
 80038ce:	2100      	movs	r1, #0
 80038d0:	4620      	mov	r0, r4
 80038d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80038d6:	4798      	blx	r3
 80038d8:	2000      	movs	r0, #0
 80038da:	e7e0      	b.n	800389e <_raise_r+0x12>

080038dc <raise>:
 80038dc:	4b02      	ldr	r3, [pc, #8]	@ (80038e8 <raise+0xc>)
 80038de:	4601      	mov	r1, r0
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	f7ff bfd3 	b.w	800388c <_raise_r>
 80038e6:	bf00      	nop
 80038e8:	20000018 	.word	0x20000018

080038ec <_kill_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	2300      	movs	r3, #0
 80038f0:	4d06      	ldr	r5, [pc, #24]	@ (800390c <_kill_r+0x20>)
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	602b      	str	r3, [r5, #0]
 80038fa:	f7fc fd36 	bl	800036a <_kill>
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	d102      	bne.n	8003908 <_kill_r+0x1c>
 8003902:	682b      	ldr	r3, [r5, #0]
 8003904:	b103      	cbz	r3, 8003908 <_kill_r+0x1c>
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	bd38      	pop	{r3, r4, r5, pc}
 800390a:	bf00      	nop
 800390c:	20003af4 	.word	0x20003af4

08003910 <_getpid_r>:
 8003910:	f7fc bd24 	b.w	800035c <_getpid>

08003914 <memchr>:
 8003914:	4603      	mov	r3, r0
 8003916:	b510      	push	{r4, lr}
 8003918:	b2c9      	uxtb	r1, r1
 800391a:	4402      	add	r2, r0
 800391c:	4293      	cmp	r3, r2
 800391e:	4618      	mov	r0, r3
 8003920:	d101      	bne.n	8003926 <memchr+0x12>
 8003922:	2000      	movs	r0, #0
 8003924:	e003      	b.n	800392e <memchr+0x1a>
 8003926:	7804      	ldrb	r4, [r0, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	428c      	cmp	r4, r1
 800392c:	d1f6      	bne.n	800391c <memchr+0x8>
 800392e:	bd10      	pop	{r4, pc}

08003930 <__swhatbuf_r>:
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	460c      	mov	r4, r1
 8003934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003938:	4615      	mov	r5, r2
 800393a:	2900      	cmp	r1, #0
 800393c:	461e      	mov	r6, r3
 800393e:	b096      	sub	sp, #88	@ 0x58
 8003940:	da0c      	bge.n	800395c <__swhatbuf_r+0x2c>
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	2100      	movs	r1, #0
 8003946:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800394a:	bf14      	ite	ne
 800394c:	2340      	movne	r3, #64	@ 0x40
 800394e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003952:	2000      	movs	r0, #0
 8003954:	6031      	str	r1, [r6, #0]
 8003956:	602b      	str	r3, [r5, #0]
 8003958:	b016      	add	sp, #88	@ 0x58
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	466a      	mov	r2, sp
 800395e:	f000 f849 	bl	80039f4 <_fstat_r>
 8003962:	2800      	cmp	r0, #0
 8003964:	dbed      	blt.n	8003942 <__swhatbuf_r+0x12>
 8003966:	9901      	ldr	r1, [sp, #4]
 8003968:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800396c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003970:	4259      	negs	r1, r3
 8003972:	4159      	adcs	r1, r3
 8003974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003978:	e7eb      	b.n	8003952 <__swhatbuf_r+0x22>

0800397a <__smakebuf_r>:
 800397a:	898b      	ldrh	r3, [r1, #12]
 800397c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800397e:	079d      	lsls	r5, r3, #30
 8003980:	4606      	mov	r6, r0
 8003982:	460c      	mov	r4, r1
 8003984:	d507      	bpl.n	8003996 <__smakebuf_r+0x1c>
 8003986:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	6123      	str	r3, [r4, #16]
 800398e:	2301      	movs	r3, #1
 8003990:	6163      	str	r3, [r4, #20]
 8003992:	b003      	add	sp, #12
 8003994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003996:	466a      	mov	r2, sp
 8003998:	ab01      	add	r3, sp, #4
 800399a:	f7ff ffc9 	bl	8003930 <__swhatbuf_r>
 800399e:	9f00      	ldr	r7, [sp, #0]
 80039a0:	4605      	mov	r5, r0
 80039a2:	4639      	mov	r1, r7
 80039a4:	4630      	mov	r0, r6
 80039a6:	f7ff faaf 	bl	8002f08 <_malloc_r>
 80039aa:	b948      	cbnz	r0, 80039c0 <__smakebuf_r+0x46>
 80039ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039b0:	059a      	lsls	r2, r3, #22
 80039b2:	d4ee      	bmi.n	8003992 <__smakebuf_r+0x18>
 80039b4:	f023 0303 	bic.w	r3, r3, #3
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	81a3      	strh	r3, [r4, #12]
 80039be:	e7e2      	b.n	8003986 <__smakebuf_r+0xc>
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80039c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ca:	81a3      	strh	r3, [r4, #12]
 80039cc:	9b01      	ldr	r3, [sp, #4]
 80039ce:	6020      	str	r0, [r4, #0]
 80039d0:	b15b      	cbz	r3, 80039ea <__smakebuf_r+0x70>
 80039d2:	4630      	mov	r0, r6
 80039d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039d8:	f000 f81e 	bl	8003a18 <_isatty_r>
 80039dc:	b128      	cbz	r0, 80039ea <__smakebuf_r+0x70>
 80039de:	89a3      	ldrh	r3, [r4, #12]
 80039e0:	f023 0303 	bic.w	r3, r3, #3
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	81a3      	strh	r3, [r4, #12]
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	431d      	orrs	r5, r3
 80039ee:	81a5      	strh	r5, [r4, #12]
 80039f0:	e7cf      	b.n	8003992 <__smakebuf_r+0x18>
	...

080039f4 <_fstat_r>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	2300      	movs	r3, #0
 80039f8:	4d06      	ldr	r5, [pc, #24]	@ (8003a14 <_fstat_r+0x20>)
 80039fa:	4604      	mov	r4, r0
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	602b      	str	r3, [r5, #0]
 8003a02:	f7fc fd11 	bl	8000428 <_fstat>
 8003a06:	1c43      	adds	r3, r0, #1
 8003a08:	d102      	bne.n	8003a10 <_fstat_r+0x1c>
 8003a0a:	682b      	ldr	r3, [r5, #0]
 8003a0c:	b103      	cbz	r3, 8003a10 <_fstat_r+0x1c>
 8003a0e:	6023      	str	r3, [r4, #0]
 8003a10:	bd38      	pop	{r3, r4, r5, pc}
 8003a12:	bf00      	nop
 8003a14:	20003af4 	.word	0x20003af4

08003a18 <_isatty_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	4d05      	ldr	r5, [pc, #20]	@ (8003a34 <_isatty_r+0x1c>)
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4608      	mov	r0, r1
 8003a22:	602b      	str	r3, [r5, #0]
 8003a24:	f7fc fd0f 	bl	8000446 <_isatty>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_isatty_r+0x1a>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_isatty_r+0x1a>
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	20003af4 	.word	0x20003af4

08003a38 <_init>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	bf00      	nop
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr

08003a44 <_fini>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr
