
WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f00  08003f00  00004f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f48  08003f48  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f48  08003f48  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f48  08003f48  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f48  08003f48  00004f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f4c  08003f4c  00004f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003f50  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a84  2000005c  08003fac  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ae0  08003fac  00005ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087d5  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c83  00000000  00000000  0000d85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0000f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000819  00000000  00000000  0000ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171eb  00000000  00000000  00010791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c863  00000000  00000000  0002797c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087fff  00000000  00000000  000341df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc1de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000304c  00000000  00000000  000bc224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000bf270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ee8 	.word	0x08003ee8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003ee8 	.word	0x08003ee8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2f>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a2c:	bf24      	itt	cs
 8000a2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a36:	d90d      	bls.n	8000a54 <__aeabi_d2f+0x30>
 8000a38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a4c:	bf08      	it	eq
 8000a4e:	f020 0001 	biceq.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a58:	d121      	bne.n	8000a9e <__aeabi_d2f+0x7a>
 8000a5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a5e:	bfbc      	itt	lt
 8000a60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a64:	4770      	bxlt	lr
 8000a66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a6e:	f1c2 0218 	rsb	r2, r2, #24
 8000a72:	f1c2 0c20 	rsb	ip, r2, #32
 8000a76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7e:	bf18      	it	ne
 8000a80:	f040 0001 	orrne.w	r0, r0, #1
 8000a84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a90:	ea40 000c 	orr.w	r0, r0, ip
 8000a94:	fa23 f302 	lsr.w	r3, r3, r2
 8000a98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a9c:	e7cc      	b.n	8000a38 <__aeabi_d2f+0x14>
 8000a9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa2:	d107      	bne.n	8000ab4 <__aeabi_d2f+0x90>
 8000aa4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa8:	bf1e      	ittt	ne
 8000aaa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab2:	4770      	bxne	lr
 8000ab4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000abc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_frsub>:
 8000ac4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ac8:	e002      	b.n	8000ad0 <__addsf3>
 8000aca:	bf00      	nop

08000acc <__aeabi_fsub>:
 8000acc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad0 <__addsf3>:
 8000ad0:	0042      	lsls	r2, r0, #1
 8000ad2:	bf1f      	itttt	ne
 8000ad4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad8:	ea92 0f03 	teqne	r2, r3
 8000adc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae4:	d06a      	beq.n	8000bbc <__addsf3+0xec>
 8000ae6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aee:	bfc1      	itttt	gt
 8000af0:	18d2      	addgt	r2, r2, r3
 8000af2:	4041      	eorgt	r1, r0
 8000af4:	4048      	eorgt	r0, r1
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	bfb8      	it	lt
 8000afa:	425b      	neglt	r3, r3
 8000afc:	2b19      	cmp	r3, #25
 8000afe:	bf88      	it	hi
 8000b00:	4770      	bxhi	lr
 8000b02:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b06:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b1e:	bf18      	it	ne
 8000b20:	4249      	negne	r1, r1
 8000b22:	ea92 0f03 	teq	r2, r3
 8000b26:	d03f      	beq.n	8000ba8 <__addsf3+0xd8>
 8000b28:	f1a2 0201 	sub.w	r2, r2, #1
 8000b2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b30:	eb10 000c 	adds.w	r0, r0, ip
 8000b34:	f1c3 0320 	rsb	r3, r3, #32
 8000b38:	fa01 f103 	lsl.w	r1, r1, r3
 8000b3c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b40:	d502      	bpl.n	8000b48 <__addsf3+0x78>
 8000b42:	4249      	negs	r1, r1
 8000b44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b48:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b4c:	d313      	bcc.n	8000b76 <__addsf3+0xa6>
 8000b4e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b52:	d306      	bcc.n	8000b62 <__addsf3+0x92>
 8000b54:	0840      	lsrs	r0, r0, #1
 8000b56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5a:	f102 0201 	add.w	r2, r2, #1
 8000b5e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b60:	d251      	bcs.n	8000c06 <__addsf3+0x136>
 8000b62:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6a:	bf08      	it	eq
 8000b6c:	f020 0001 	biceq.w	r0, r0, #1
 8000b70:	ea40 0003 	orr.w	r0, r0, r3
 8000b74:	4770      	bx	lr
 8000b76:	0049      	lsls	r1, r1, #1
 8000b78:	eb40 0000 	adc.w	r0, r0, r0
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b84:	d2ed      	bcs.n	8000b62 <__addsf3+0x92>
 8000b86:	fab0 fc80 	clz	ip, r0
 8000b8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b96:	bfaa      	itet	ge
 8000b98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b9c:	4252      	neglt	r2, r2
 8000b9e:	4318      	orrge	r0, r3
 8000ba0:	bfbc      	itt	lt
 8000ba2:	40d0      	lsrlt	r0, r2
 8000ba4:	4318      	orrlt	r0, r3
 8000ba6:	4770      	bx	lr
 8000ba8:	f092 0f00 	teq	r2, #0
 8000bac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb0:	bf06      	itte	eq
 8000bb2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bb6:	3201      	addeq	r2, #1
 8000bb8:	3b01      	subne	r3, #1
 8000bba:	e7b5      	b.n	8000b28 <__addsf3+0x58>
 8000bbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc4:	bf18      	it	ne
 8000bc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bca:	d021      	beq.n	8000c10 <__addsf3+0x140>
 8000bcc:	ea92 0f03 	teq	r2, r3
 8000bd0:	d004      	beq.n	8000bdc <__addsf3+0x10c>
 8000bd2:	f092 0f00 	teq	r2, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	4608      	moveq	r0, r1
 8000bda:	4770      	bx	lr
 8000bdc:	ea90 0f01 	teq	r0, r1
 8000be0:	bf1c      	itt	ne
 8000be2:	2000      	movne	r0, #0
 8000be4:	4770      	bxne	lr
 8000be6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bea:	d104      	bne.n	8000bf6 <__addsf3+0x126>
 8000bec:	0040      	lsls	r0, r0, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	4770      	bx	lr
 8000bf6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfa:	bf3c      	itt	cc
 8000bfc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c00:	4770      	bxcc	lr
 8000c02:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c06:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0e:	4770      	bx	lr
 8000c10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c14:	bf16      	itet	ne
 8000c16:	4608      	movne	r0, r1
 8000c18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c1c:	4601      	movne	r1, r0
 8000c1e:	0242      	lsls	r2, r0, #9
 8000c20:	bf06      	itte	eq
 8000c22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c26:	ea90 0f01 	teqeq	r0, r1
 8000c2a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_ui2f>:
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e004      	b.n	8000c40 <__aeabi_i2f+0x8>
 8000c36:	bf00      	nop

08000c38 <__aeabi_i2f>:
 8000c38:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c3c:	bf48      	it	mi
 8000c3e:	4240      	negmi	r0, r0
 8000c40:	ea5f 0c00 	movs.w	ip, r0
 8000c44:	bf08      	it	eq
 8000c46:	4770      	bxeq	lr
 8000c48:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	e01c      	b.n	8000c8e <__aeabi_l2f+0x2a>

08000c54 <__aeabi_ul2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e00a      	b.n	8000c78 <__aeabi_l2f+0x14>
 8000c62:	bf00      	nop

08000c64 <__aeabi_l2f>:
 8000c64:	ea50 0201 	orrs.w	r2, r0, r1
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__aeabi_l2f+0x14>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	ea5f 0c01 	movs.w	ip, r1
 8000c7c:	bf02      	ittt	eq
 8000c7e:	4684      	moveq	ip, r0
 8000c80:	4601      	moveq	r1, r0
 8000c82:	2000      	moveq	r0, #0
 8000c84:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c88:	bf08      	it	eq
 8000c8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c92:	fabc f28c 	clz	r2, ip
 8000c96:	3a08      	subs	r2, #8
 8000c98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c9c:	db10      	blt.n	8000cc0 <__aeabi_l2f+0x5c>
 8000c9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca8:	f1c2 0220 	rsb	r2, r2, #32
 8000cac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb4:	eb43 0002 	adc.w	r0, r3, r2
 8000cb8:	bf08      	it	eq
 8000cba:	f020 0001 	biceq.w	r0, r0, #1
 8000cbe:	4770      	bx	lr
 8000cc0:	f102 0220 	add.w	r2, r2, #32
 8000cc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_fmul>:
 8000ce0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce8:	bf1e      	ittt	ne
 8000cea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cee:	ea92 0f0c 	teqne	r2, ip
 8000cf2:	ea93 0f0c 	teqne	r3, ip
 8000cf6:	d06f      	beq.n	8000dd8 <__aeabi_fmul+0xf8>
 8000cf8:	441a      	add	r2, r3
 8000cfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000cfe:	0240      	lsls	r0, r0, #9
 8000d00:	bf18      	it	ne
 8000d02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d06:	d01e      	beq.n	8000d46 <__aeabi_fmul+0x66>
 8000d08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d14:	fba0 3101 	umull	r3, r1, r0, r1
 8000d18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d1c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d20:	bf3e      	ittt	cc
 8000d22:	0049      	lslcc	r1, r1, #1
 8000d24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d28:	005b      	lslcc	r3, r3, #1
 8000d2a:	ea40 0001 	orr.w	r0, r0, r1
 8000d2e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d32:	2afd      	cmp	r2, #253	@ 0xfd
 8000d34:	d81d      	bhi.n	8000d72 <__aeabi_fmul+0x92>
 8000d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	4770      	bx	lr
 8000d46:	f090 0f00 	teq	r0, #0
 8000d4a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	0249      	lsleq	r1, r1, #9
 8000d52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5a:	3a7f      	subs	r2, #127	@ 0x7f
 8000d5c:	bfc2      	ittt	gt
 8000d5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d66:	4770      	bxgt	lr
 8000d68:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	dc5d      	bgt.n	8000e30 <__aeabi_fmul+0x150>
 8000d74:	f112 0f19 	cmn.w	r2, #25
 8000d78:	bfdc      	itt	le
 8000d7a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d7e:	4770      	bxle	lr
 8000d80:	f1c2 0200 	rsb	r2, r2, #0
 8000d84:	0041      	lsls	r1, r0, #1
 8000d86:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8a:	f1c2 0220 	rsb	r2, r2, #32
 8000d8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d96:	f140 0000 	adc.w	r0, r0, #0
 8000d9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d9e:	bf08      	it	eq
 8000da0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da4:	4770      	bx	lr
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0040      	lsleq	r0, r0, #1
 8000db2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000db6:	3a01      	subeq	r2, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xce>
 8000dba:	ea40 000c 	orr.w	r0, r0, ip
 8000dbe:	f093 0f00 	teq	r3, #0
 8000dc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0049      	lsleq	r1, r1, #1
 8000dca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dce:	3b01      	subeq	r3, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xe6>
 8000dd2:	ea41 010c 	orr.w	r1, r1, ip
 8000dd6:	e78f      	b.n	8000cf8 <__aeabi_fmul+0x18>
 8000dd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ddc:	ea92 0f0c 	teq	r2, ip
 8000de0:	bf18      	it	ne
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d00a      	beq.n	8000dfe <__aeabi_fmul+0x11e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df2:	d1d8      	bne.n	8000da6 <__aeabi_fmul+0xc6>
 8000df4:	ea80 0001 	eor.w	r0, r0, r1
 8000df8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	bf17      	itett	ne
 8000e04:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e08:	4608      	moveq	r0, r1
 8000e0a:	f091 0f00 	teqne	r1, #0
 8000e0e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e12:	d014      	beq.n	8000e3e <__aeabi_fmul+0x15e>
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	d101      	bne.n	8000e1e <__aeabi_fmul+0x13e>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	d10f      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e1e:	ea93 0f0c 	teq	r3, ip
 8000e22:	d103      	bne.n	8000e2c <__aeabi_fmul+0x14c>
 8000e24:	024b      	lsls	r3, r1, #9
 8000e26:	bf18      	it	ne
 8000e28:	4608      	movne	r0, r1
 8000e2a:	d108      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e3c:	4770      	bx	lr
 8000e3e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e42:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_fdiv>:
 8000e48:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e50:	bf1e      	ittt	ne
 8000e52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e56:	ea92 0f0c 	teqne	r2, ip
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d069      	beq.n	8000f34 <__aeabi_fdiv+0xec>
 8000e60:	eba2 0203 	sub.w	r2, r2, r3
 8000e64:	ea80 0c01 	eor.w	ip, r0, r1
 8000e68:	0249      	lsls	r1, r1, #9
 8000e6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e6e:	d037      	beq.n	8000ee0 <__aeabi_fdiv+0x98>
 8000e70:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e80:	428b      	cmp	r3, r1
 8000e82:	bf38      	it	cc
 8000e84:	005b      	lslcc	r3, r3, #1
 8000e86:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	bf24      	itt	cs
 8000e92:	1a5b      	subcs	r3, r3, r1
 8000e94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eaa:	bf24      	itt	cs
 8000eac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb8:	bf24      	itt	cs
 8000eba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ebe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	bf18      	it	ne
 8000ec6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eca:	d1e0      	bne.n	8000e8e <__aeabi_fdiv+0x46>
 8000ecc:	2afd      	cmp	r2, #253	@ 0xfd
 8000ece:	f63f af50 	bhi.w	8000d72 <__aeabi_fmul+0x92>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed8:	bf08      	it	eq
 8000eda:	f020 0001 	biceq.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee8:	327f      	adds	r2, #127	@ 0x7f
 8000eea:	bfc2      	ittt	gt
 8000eec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef4:	4770      	bxgt	lr
 8000ef6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	3a01      	subs	r2, #1
 8000f00:	e737      	b.n	8000d72 <__aeabi_fmul+0x92>
 8000f02:	f092 0f00 	teq	r2, #0
 8000f06:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0040      	lsleq	r0, r0, #1
 8000f0e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f12:	3a01      	subeq	r2, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xc2>
 8000f16:	ea40 000c 	orr.w	r0, r0, ip
 8000f1a:	f093 0f00 	teq	r3, #0
 8000f1e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0049      	lsleq	r1, r1, #1
 8000f26:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2a:	3b01      	subeq	r3, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xda>
 8000f2e:	ea41 010c 	orr.w	r1, r1, ip
 8000f32:	e795      	b.n	8000e60 <__aeabi_fdiv+0x18>
 8000f34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d108      	bne.n	8000f50 <__aeabi_fdiv+0x108>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	f47f af7d 	bne.w	8000e3e <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	f47f af70 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e776      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f50:	ea93 0f0c 	teq	r3, ip
 8000f54:	d104      	bne.n	8000f60 <__aeabi_fdiv+0x118>
 8000f56:	024b      	lsls	r3, r1, #9
 8000f58:	f43f af4c 	beq.w	8000df4 <__aeabi_fmul+0x114>
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f64:	bf18      	it	ne
 8000f66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6a:	d1ca      	bne.n	8000f02 <__aeabi_fdiv+0xba>
 8000f6c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f70:	f47f af5c 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f74:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f78:	f47f af3c 	bne.w	8000df4 <__aeabi_fmul+0x114>
 8000f7c:	e75f      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f7e:	bf00      	nop

08000f80 <__gesf2>:
 8000f80:	f04f 3cff 	mov.w	ip, #4294967295
 8000f84:	e006      	b.n	8000f94 <__cmpsf2+0x4>
 8000f86:	bf00      	nop

08000f88 <__lesf2>:
 8000f88:	f04f 0c01 	mov.w	ip, #1
 8000f8c:	e002      	b.n	8000f94 <__cmpsf2+0x4>
 8000f8e:	bf00      	nop

08000f90 <__cmpsf2>:
 8000f90:	f04f 0c01 	mov.w	ip, #1
 8000f94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	bf18      	it	ne
 8000fa6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000faa:	d011      	beq.n	8000fd0 <__cmpsf2+0x40>
 8000fac:	b001      	add	sp, #4
 8000fae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb2:	bf18      	it	ne
 8000fb4:	ea90 0f01 	teqne	r0, r1
 8000fb8:	bf58      	it	pl
 8000fba:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fbe:	bf88      	it	hi
 8000fc0:	17c8      	asrhi	r0, r1, #31
 8000fc2:	bf38      	it	cc
 8000fc4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fc8:	bf18      	it	ne
 8000fca:	f040 0001 	orrne.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd4:	d102      	bne.n	8000fdc <__cmpsf2+0x4c>
 8000fd6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fda:	d105      	bne.n	8000fe8 <__cmpsf2+0x58>
 8000fdc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe0:	d1e4      	bne.n	8000fac <__cmpsf2+0x1c>
 8000fe2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fe6:	d0e1      	beq.n	8000fac <__cmpsf2+0x1c>
 8000fe8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__aeabi_cfrcmple>:
 8000ff0:	4684      	mov	ip, r0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	4661      	mov	r1, ip
 8000ff6:	e7ff      	b.n	8000ff8 <__aeabi_cfcmpeq>

08000ff8 <__aeabi_cfcmpeq>:
 8000ff8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffa:	f7ff ffc9 	bl	8000f90 <__cmpsf2>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	bf48      	it	mi
 8001002:	f110 0f00 	cmnmi.w	r0, #0
 8001006:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001008 <__aeabi_fcmpeq>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff fff4 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001010:	bf0c      	ite	eq
 8001012:	2001      	moveq	r0, #1
 8001014:	2000      	movne	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmplt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffea 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmple>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffe0 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001038:	bf94      	ite	ls
 800103a:	2001      	movls	r0, #1
 800103c:	2000      	movhi	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmpge>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffd2 	bl	8000ff0 <__aeabi_cfrcmple>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpgt>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffc8 	bl	8000ff0 <__aeabi_cfrcmple>
 8001060:	bf34      	ite	cc
 8001062:	2001      	movcc	r0, #1
 8001064:	2000      	movcs	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpun>:
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__aeabi_fcmpun+0x14>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d108      	bne.n	8001092 <__aeabi_fcmpun+0x26>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d102      	bne.n	800108c <__aeabi_fcmpun+0x20>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d102      	bne.n	8001092 <__aeabi_fcmpun+0x26>
 800108c:	f04f 0000 	mov.w	r0, #0
 8001090:	4770      	bx	lr
 8001092:	f04f 0001 	mov.w	r0, #1
 8001096:	4770      	bx	lr

08001098 <__aeabi_f2uiz>:
 8001098:	0042      	lsls	r2, r0, #1
 800109a:	d20e      	bcs.n	80010ba <__aeabi_f2uiz+0x22>
 800109c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010a0:	d30b      	bcc.n	80010ba <__aeabi_f2uiz+0x22>
 80010a2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010aa:	d409      	bmi.n	80010c0 <__aeabi_f2uiz+0x28>
 80010ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	4770      	bx	lr
 80010ba:	f04f 0000 	mov.w	r0, #0
 80010be:	4770      	bx	lr
 80010c0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010c4:	d101      	bne.n	80010ca <__aeabi_f2uiz+0x32>
 80010c6:	0242      	lsls	r2, r0, #9
 80010c8:	d102      	bne.n	80010d0 <__aeabi_f2uiz+0x38>
 80010ca:	f04f 30ff 	mov.w	r0, #4294967295
 80010ce:	4770      	bx	lr
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_DMA_Init+0x38>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001110 <MX_DMA_Init+0x38>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_DMA_Init+0x38>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2011      	movs	r0, #17
 80010fc:	f000 fb75 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001100:	2011      	movs	r0, #17
 8001102:	f000 fb8e 	bl	8001822 <HAL_NVIC_EnableIRQ>

}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_GPIO_Init+0x40>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a0d      	ldr	r2, [pc, #52]	@ (8001154 <MX_GPIO_Init+0x40>)
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_GPIO_Init+0x40>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_GPIO_Init+0x40>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4a07      	ldr	r2, [pc, #28]	@ (8001154 <MX_GPIO_Init+0x40>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6193      	str	r3, [r2, #24]
 800113e:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <MX_GPIO_Init+0x40>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	40021000 	.word	0x40021000

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HSVColor HSV ={0,1,1};
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <main+0x30>)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	ca07      	ldmia	r2, {r0, r1, r2}
 8001164:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 f9e2 	bl	8001530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f80e 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f7ff ffd0 	bl	8001114 <MX_GPIO_Init>
  MX_DMA_Init();
 8001174:	f7ff ffb0 	bl	80010d8 <MX_DMA_Init>
  MX_TIM2_Init();
 8001178:	f000 f8c2 	bl	8001300 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  PWM_WS2812B_Rainbow(&HSV);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4618      	mov	r0, r3
 8001180:	f002 fc2c 	bl	80039dc <PWM_WS2812B_Rainbow>
 8001184:	e7fa      	b.n	800117c <main+0x24>
 8001186:	bf00      	nop
 8001188:	08003f00 	.word	0x08003f00

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b090      	sub	sp, #64	@ 0x40
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0318 	add.w	r3, r7, #24
 8001196:	2228      	movs	r2, #40	@ 0x28
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fcaa 	bl	8003af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011bc:	2301      	movs	r3, #1
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c0:	2302      	movs	r3, #2
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 feb1 	bl	8001f3c <HAL_RCC_OscConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011e0:	f000 f819 	bl	8001216 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	230f      	movs	r3, #15
 80011e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e8:	2302      	movs	r3, #2
 80011ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2102      	movs	r1, #2
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 f91e 	bl	8002440 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800120a:	f000 f804 	bl	8001216 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3740      	adds	r7, #64	@ 0x40
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121a:	b672      	cpsid	i
}
 800121c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121e:	bf00      	nop
 8001220:	e7fd      	b.n	800121e <Error_Handler+0x8>
	...

08001224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_MspInit+0x5c>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <HAL_MspInit+0x5c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6193      	str	r3, [r2, #24]
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_MspInit+0x5c>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_MspInit+0x5c>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a0e      	ldr	r2, [pc, #56]	@ (8001280 <HAL_MspInit+0x5c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <HAL_MspInit+0x5c>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_MspInit+0x60>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_MspInit+0x60>)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <NMI_Handler+0x4>

08001290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <MemManage_Handler+0x4>

080012a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <UsageFault_Handler+0x4>

080012b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d8:	f000 f970 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <DMA1_Channel7_IRQHandler+0x10>)
 80012e6:	f000 fb71 	bl	80019cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000c0 	.word	0x200000c0

080012f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08e      	sub	sp, #56	@ 0x38
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001330:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 8001332:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001336:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001338:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8001344:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 8001346:	2259      	movs	r2, #89	@ 0x59
 8001348:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001356:	4823      	ldr	r0, [pc, #140]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 8001358:	f001 f9ce 	bl	80026f8 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001362:	f7ff ff58 	bl	8001216 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800136c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001370:	4619      	mov	r1, r3
 8001372:	481c      	ldr	r0, [pc, #112]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 8001374:	f001 fccc 	bl	8002d10 <HAL_TIM_ConfigClockSource>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800137e:	f7ff ff4a 	bl	8001216 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001382:	4818      	ldr	r0, [pc, #96]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 8001384:	f001 fa07 	bl	8002796 <HAL_TIM_PWM_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800138e:	f7ff ff42 	bl	8001216 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	4619      	mov	r1, r3
 80013a0:	4810      	ldr	r0, [pc, #64]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 80013a2:	f002 f919 	bl	80035d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80013ac:	f7ff ff33 	bl	8001216 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b0:	2360      	movs	r3, #96	@ 0x60
 80013b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2204      	movs	r2, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 80013c8:	f001 fbe0 	bl	8002b8c <HAL_TIM_PWM_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80013d2:	f7ff ff20 	bl	8001216 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013d6:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <MX_TIM2_Init+0xe4>)
 80013d8:	f000 f854 	bl	8001484 <HAL_TIM_MspPostInit>

}
 80013dc:	bf00      	nop
 80013de:	3738      	adds	r7, #56	@ 0x38
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000078 	.word	0x20000078

080013e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013f8:	d13a      	bne.n	8001470 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <HAL_TIM_Base_MspInit+0x90>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001478 <HAL_TIM_Base_MspInit+0x90>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <HAL_TIM_Base_MspInit+0x90>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001412:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 8001414:	4a1a      	ldr	r2, [pc, #104]	@ (8001480 <HAL_TIM_Base_MspInit+0x98>)
 8001416:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001418:	4b18      	ldr	r3, [pc, #96]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 800141a:	2210      	movs	r2, #16
 800141c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001424:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 800142c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001430:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 8001434:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001438:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001440:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 8001442:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001446:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 800144a:	f000 fa05 	bl	8001858 <HAL_DMA_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8001454:	f7ff fedf 	bl	8001216 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a08      	ldr	r2, [pc, #32]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 800145c:	629a      	str	r2, [r3, #40]	@ 0x28
 800145e:	4a07      	ldr	r2, [pc, #28]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 8001468:	631a      	str	r2, [r3, #48]	@ 0x30
 800146a:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_TIM_Base_MspInit+0x94>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	200000c0 	.word	0x200000c0
 8001480:	40020080 	.word	0x40020080

08001484 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a2:	d117      	bne.n	80014d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <HAL_TIM_MspPostInit+0x58>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <HAL_TIM_MspPostInit+0x58>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_TIM_MspPostInit+0x58>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014bc:	2302      	movs	r3, #2
 80014be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	4619      	mov	r1, r3
 80014ce:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <HAL_TIM_MspPostInit+0x5c>)
 80014d0:	f000 fbb0 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010800 	.word	0x40010800

080014e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e4:	f7ff ff06 	bl	80012f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480b      	ldr	r0, [pc, #44]	@ (8001518 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ea:	490c      	ldr	r1, [pc, #48]	@ (800151c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001520 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001500:	4c09      	ldr	r4, [pc, #36]	@ (8001528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150e:	f002 faff 	bl	8003b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001512:	f7ff fe21 	bl	8001158 <main>
  bx lr
 8001516:	4770      	bx	lr
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001520:	08003f50 	.word	0x08003f50
  ldr r2, =_sbss
 8001524:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001528:	20003ae0 	.word	0x20003ae0

0800152c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC1_2_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <HAL_Init+0x28>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a07      	ldr	r2, [pc, #28]	@ (8001558 <HAL_Init+0x28>)
 800153a:	f043 0310 	orr.w	r3, r3, #16
 800153e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001540:	2003      	movs	r0, #3
 8001542:	f000 f947 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001546:	200f      	movs	r0, #15
 8001548:	f000 f808 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154c:	f7ff fe6a 	bl	8001224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40022000 	.word	0x40022000

0800155c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_InitTick+0x54>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_InitTick+0x58>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f95f 	bl	800183e <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00e      	b.n	80015a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d80a      	bhi.n	80015a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f000 f927 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800159c:	4a06      	ldr	r2, [pc, #24]	@ (80015b8 <HAL_InitTick+0x5c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000008 	.word	0x20000008
 80015b8:	20000004 	.word	0x20000004

080015bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <HAL_IncTick+0x1c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <HAL_IncTick+0x20>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a03      	ldr	r2, [pc, #12]	@ (80015dc <HAL_IncTick+0x20>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000104 	.word	0x20000104

080015e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return uwTick;
 80015e4:	4b02      	ldr	r3, [pc, #8]	@ (80015f0 <HAL_GetTick+0x10>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	20000104 	.word	0x20000104

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff fff0 	bl	80015e0 <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160e:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <HAL_Delay+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffe0 	bl	80015e0 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4906      	ldr	r1, [pc, #24]	@ (80016d4 <__NVIC_EnableIRQ+0x34>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	@ (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	@ (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff90 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff2d 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff42 	bl	8001684 <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff90 	bl	800172c <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5f 	bl	80016d8 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff35 	bl	80016a0 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e043      	b.n	80018f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <HAL_DMA_Init+0xa8>)
 8001876:	4413      	add	r3, r2
 8001878:	4a22      	ldr	r2, [pc, #136]	@ (8001904 <HAL_DMA_Init+0xac>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	009a      	lsls	r2, r3, #2
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a1f      	ldr	r2, [pc, #124]	@ (8001908 <HAL_DMA_Init+0xb0>)
 800188a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2202      	movs	r2, #2
 8001890:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018a2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	bffdfff8 	.word	0xbffdfff8
 8001904:	cccccccd 	.word	0xcccccccd
 8001908:	40020000 	.word	0x40020000

0800190c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_DMA_Start_IT+0x20>
 8001928:	2302      	movs	r3, #2
 800192a:	e04b      	b.n	80019c4 <HAL_DMA_Start_IT+0xb8>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d13a      	bne.n	80019b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	68b9      	ldr	r1, [r7, #8]
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f937 	bl	8001bd8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 020e 	orr.w	r2, r2, #14
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e00f      	b.n	80019a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0204 	bic.w	r2, r2, #4
 8001992:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 020a 	orr.w	r2, r2, #10
 80019a2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e005      	b.n	80019c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019be:	2302      	movs	r3, #2
 80019c0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	2204      	movs	r2, #4
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d04f      	beq.n	8001a94 <HAL_DMA_IRQHandler+0xc8>
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d04a      	beq.n	8001a94 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0320 	and.w	r3, r3, #32
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d107      	bne.n	8001a1c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0204 	bic.w	r2, r2, #4
 8001a1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a66      	ldr	r2, [pc, #408]	@ (8001bbc <HAL_DMA_IRQHandler+0x1f0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d029      	beq.n	8001a7a <HAL_DMA_IRQHandler+0xae>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a65      	ldr	r2, [pc, #404]	@ (8001bc0 <HAL_DMA_IRQHandler+0x1f4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d022      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xaa>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a63      	ldr	r2, [pc, #396]	@ (8001bc4 <HAL_DMA_IRQHandler+0x1f8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d01a      	beq.n	8001a70 <HAL_DMA_IRQHandler+0xa4>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a62      	ldr	r2, [pc, #392]	@ (8001bc8 <HAL_DMA_IRQHandler+0x1fc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d012      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x9e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a60      	ldr	r2, [pc, #384]	@ (8001bcc <HAL_DMA_IRQHandler+0x200>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00a      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x98>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a5f      	ldr	r2, [pc, #380]	@ (8001bd0 <HAL_DMA_IRQHandler+0x204>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d102      	bne.n	8001a5e <HAL_DMA_IRQHandler+0x92>
 8001a58:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a5c:	e00e      	b.n	8001a7c <HAL_DMA_IRQHandler+0xb0>
 8001a5e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a62:	e00b      	b.n	8001a7c <HAL_DMA_IRQHandler+0xb0>
 8001a64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a68:	e008      	b.n	8001a7c <HAL_DMA_IRQHandler+0xb0>
 8001a6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a6e:	e005      	b.n	8001a7c <HAL_DMA_IRQHandler+0xb0>
 8001a70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a74:	e002      	b.n	8001a7c <HAL_DMA_IRQHandler+0xb0>
 8001a76:	2340      	movs	r3, #64	@ 0x40
 8001a78:	e000      	b.n	8001a7c <HAL_DMA_IRQHandler+0xb0>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	4a55      	ldr	r2, [pc, #340]	@ (8001bd4 <HAL_DMA_IRQHandler+0x208>)
 8001a7e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8094 	beq.w	8001bb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a92:	e08e      	b.n	8001bb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	2202      	movs	r2, #2
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d056      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x186>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d051      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10b      	bne.n	8001ad4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 020a 	bic.w	r2, r2, #10
 8001aca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a38      	ldr	r2, [pc, #224]	@ (8001bbc <HAL_DMA_IRQHandler+0x1f0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d029      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x166>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a37      	ldr	r2, [pc, #220]	@ (8001bc0 <HAL_DMA_IRQHandler+0x1f4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d022      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x162>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a35      	ldr	r2, [pc, #212]	@ (8001bc4 <HAL_DMA_IRQHandler+0x1f8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01a      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x15c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a34      	ldr	r2, [pc, #208]	@ (8001bc8 <HAL_DMA_IRQHandler+0x1fc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d012      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x156>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a32      	ldr	r2, [pc, #200]	@ (8001bcc <HAL_DMA_IRQHandler+0x200>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d00a      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x150>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a31      	ldr	r2, [pc, #196]	@ (8001bd0 <HAL_DMA_IRQHandler+0x204>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d102      	bne.n	8001b16 <HAL_DMA_IRQHandler+0x14a>
 8001b10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b14:	e00e      	b.n	8001b34 <HAL_DMA_IRQHandler+0x168>
 8001b16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b1a:	e00b      	b.n	8001b34 <HAL_DMA_IRQHandler+0x168>
 8001b1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b20:	e008      	b.n	8001b34 <HAL_DMA_IRQHandler+0x168>
 8001b22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b26:	e005      	b.n	8001b34 <HAL_DMA_IRQHandler+0x168>
 8001b28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b2c:	e002      	b.n	8001b34 <HAL_DMA_IRQHandler+0x168>
 8001b2e:	2320      	movs	r3, #32
 8001b30:	e000      	b.n	8001b34 <HAL_DMA_IRQHandler+0x168>
 8001b32:	2302      	movs	r3, #2
 8001b34:	4a27      	ldr	r2, [pc, #156]	@ (8001bd4 <HAL_DMA_IRQHandler+0x208>)
 8001b36:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d034      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b50:	e02f      	b.n	8001bb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	2208      	movs	r2, #8
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d028      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x1e8>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d023      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 020e 	bic.w	r2, r2, #14
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d004      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
    }
  }
  return;
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop
}
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40020008 	.word	0x40020008
 8001bc0:	4002001c 	.word	0x4002001c
 8001bc4:	40020030 	.word	0x40020030
 8001bc8:	40020044 	.word	0x40020044
 8001bcc:	40020058 	.word	0x40020058
 8001bd0:	4002006c 	.word	0x4002006c
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bee:	2101      	movs	r1, #1
 8001bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	d108      	bne.n	8001c18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c16:	e007      	b.n	8001c28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	60da      	str	r2, [r3, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b08b      	sub	sp, #44	@ 0x2c
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c46:	e169      	b.n	8001f1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8158 	bne.w	8001f16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4a9a      	ldr	r2, [pc, #616]	@ (8001ed4 <HAL_GPIO_Init+0x2a0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d05e      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
 8001c70:	4a98      	ldr	r2, [pc, #608]	@ (8001ed4 <HAL_GPIO_Init+0x2a0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d875      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001c76:	4a98      	ldr	r2, [pc, #608]	@ (8001ed8 <HAL_GPIO_Init+0x2a4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d058      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
 8001c7c:	4a96      	ldr	r2, [pc, #600]	@ (8001ed8 <HAL_GPIO_Init+0x2a4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d86f      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001c82:	4a96      	ldr	r2, [pc, #600]	@ (8001edc <HAL_GPIO_Init+0x2a8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d052      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
 8001c88:	4a94      	ldr	r2, [pc, #592]	@ (8001edc <HAL_GPIO_Init+0x2a8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d869      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001c8e:	4a94      	ldr	r2, [pc, #592]	@ (8001ee0 <HAL_GPIO_Init+0x2ac>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d04c      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
 8001c94:	4a92      	ldr	r2, [pc, #584]	@ (8001ee0 <HAL_GPIO_Init+0x2ac>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d863      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001c9a:	4a92      	ldr	r2, [pc, #584]	@ (8001ee4 <HAL_GPIO_Init+0x2b0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d046      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
 8001ca0:	4a90      	ldr	r2, [pc, #576]	@ (8001ee4 <HAL_GPIO_Init+0x2b0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d85d      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001ca6:	2b12      	cmp	r3, #18
 8001ca8:	d82a      	bhi.n	8001d00 <HAL_GPIO_Init+0xcc>
 8001caa:	2b12      	cmp	r3, #18
 8001cac:	d859      	bhi.n	8001d62 <HAL_GPIO_Init+0x12e>
 8001cae:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb4 <HAL_GPIO_Init+0x80>)
 8001cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb4:	08001d2f 	.word	0x08001d2f
 8001cb8:	08001d09 	.word	0x08001d09
 8001cbc:	08001d1b 	.word	0x08001d1b
 8001cc0:	08001d5d 	.word	0x08001d5d
 8001cc4:	08001d63 	.word	0x08001d63
 8001cc8:	08001d63 	.word	0x08001d63
 8001ccc:	08001d63 	.word	0x08001d63
 8001cd0:	08001d63 	.word	0x08001d63
 8001cd4:	08001d63 	.word	0x08001d63
 8001cd8:	08001d63 	.word	0x08001d63
 8001cdc:	08001d63 	.word	0x08001d63
 8001ce0:	08001d63 	.word	0x08001d63
 8001ce4:	08001d63 	.word	0x08001d63
 8001ce8:	08001d63 	.word	0x08001d63
 8001cec:	08001d63 	.word	0x08001d63
 8001cf0:	08001d63 	.word	0x08001d63
 8001cf4:	08001d63 	.word	0x08001d63
 8001cf8:	08001d11 	.word	0x08001d11
 8001cfc:	08001d25 	.word	0x08001d25
 8001d00:	4a79      	ldr	r2, [pc, #484]	@ (8001ee8 <HAL_GPIO_Init+0x2b4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d013      	beq.n	8001d2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d06:	e02c      	b.n	8001d62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	623b      	str	r3, [r7, #32]
          break;
 8001d0e:	e029      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	3304      	adds	r3, #4
 8001d16:	623b      	str	r3, [r7, #32]
          break;
 8001d18:	e024      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	3308      	adds	r3, #8
 8001d20:	623b      	str	r3, [r7, #32]
          break;
 8001d22:	e01f      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	330c      	adds	r3, #12
 8001d2a:	623b      	str	r3, [r7, #32]
          break;
 8001d2c:	e01a      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d36:	2304      	movs	r3, #4
 8001d38:	623b      	str	r3, [r7, #32]
          break;
 8001d3a:	e013      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d44:	2308      	movs	r3, #8
 8001d46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	611a      	str	r2, [r3, #16]
          break;
 8001d4e:	e009      	b.n	8001d64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d50:	2308      	movs	r3, #8
 8001d52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	615a      	str	r2, [r3, #20]
          break;
 8001d5a:	e003      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
          break;
 8001d60:	e000      	b.n	8001d64 <HAL_GPIO_Init+0x130>
          break;
 8001d62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2bff      	cmp	r3, #255	@ 0xff
 8001d68:	d801      	bhi.n	8001d6e <HAL_GPIO_Init+0x13a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	e001      	b.n	8001d72 <HAL_GPIO_Init+0x13e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3304      	adds	r3, #4
 8001d72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2bff      	cmp	r3, #255	@ 0xff
 8001d78:	d802      	bhi.n	8001d80 <HAL_GPIO_Init+0x14c>
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	e002      	b.n	8001d86 <HAL_GPIO_Init+0x152>
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	3b08      	subs	r3, #8
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	210f      	movs	r1, #15
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	401a      	ands	r2, r3
 8001d98:	6a39      	ldr	r1, [r7, #32]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	431a      	orrs	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80b1 	beq.w	8001f16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001db4:	4b4d      	ldr	r3, [pc, #308]	@ (8001eec <HAL_GPIO_Init+0x2b8>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a4c      	ldr	r2, [pc, #304]	@ (8001eec <HAL_GPIO_Init+0x2b8>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b4a      	ldr	r3, [pc, #296]	@ (8001eec <HAL_GPIO_Init+0x2b8>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dcc:	4a48      	ldr	r2, [pc, #288]	@ (8001ef0 <HAL_GPIO_Init+0x2bc>)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	220f      	movs	r2, #15
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a40      	ldr	r2, [pc, #256]	@ (8001ef4 <HAL_GPIO_Init+0x2c0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d013      	beq.n	8001e20 <HAL_GPIO_Init+0x1ec>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ef8 <HAL_GPIO_Init+0x2c4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00d      	beq.n	8001e1c <HAL_GPIO_Init+0x1e8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3e      	ldr	r2, [pc, #248]	@ (8001efc <HAL_GPIO_Init+0x2c8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d007      	beq.n	8001e18 <HAL_GPIO_Init+0x1e4>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f00 <HAL_GPIO_Init+0x2cc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d101      	bne.n	8001e14 <HAL_GPIO_Init+0x1e0>
 8001e10:	2303      	movs	r3, #3
 8001e12:	e006      	b.n	8001e22 <HAL_GPIO_Init+0x1ee>
 8001e14:	2304      	movs	r3, #4
 8001e16:	e004      	b.n	8001e22 <HAL_GPIO_Init+0x1ee>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e002      	b.n	8001e22 <HAL_GPIO_Init+0x1ee>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_GPIO_Init+0x1ee>
 8001e20:	2300      	movs	r3, #0
 8001e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e24:	f002 0203 	and.w	r2, r2, #3
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e32:	492f      	ldr	r1, [pc, #188]	@ (8001ef0 <HAL_GPIO_Init+0x2bc>)
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	492c      	ldr	r1, [pc, #176]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4928      	ldr	r1, [pc, #160]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e74:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4922      	ldr	r1, [pc, #136]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	60cb      	str	r3, [r1, #12]
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e82:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	491e      	ldr	r1, [pc, #120]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4918      	ldr	r1, [pc, #96]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	4914      	ldr	r1, [pc, #80]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d021      	beq.n	8001f08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	490e      	ldr	r1, [pc, #56]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	e021      	b.n	8001f16 <HAL_GPIO_Init+0x2e2>
 8001ed2:	bf00      	nop
 8001ed4:	10320000 	.word	0x10320000
 8001ed8:	10310000 	.word	0x10310000
 8001edc:	10220000 	.word	0x10220000
 8001ee0:	10210000 	.word	0x10210000
 8001ee4:	10120000 	.word	0x10120000
 8001ee8:	10110000 	.word	0x10110000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	40010800 	.word	0x40010800
 8001ef8:	40010c00 	.word	0x40010c00
 8001efc:	40011000 	.word	0x40011000
 8001f00:	40011400 	.word	0x40011400
 8001f04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f08:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <HAL_GPIO_Init+0x304>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	4909      	ldr	r1, [pc, #36]	@ (8001f38 <HAL_GPIO_Init+0x304>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	3301      	adds	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f47f ae8e 	bne.w	8001c48 <HAL_GPIO_Init+0x14>
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	372c      	adds	r7, #44	@ 0x2c
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e272      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8087 	beq.w	800206a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5c:	4b92      	ldr	r3, [pc, #584]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d00c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f68:	4b8f      	ldr	r3, [pc, #572]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d112      	bne.n	8001f9a <HAL_RCC_OscConfig+0x5e>
 8001f74:	4b8c      	ldr	r3, [pc, #560]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f80:	d10b      	bne.n	8001f9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f82:	4b89      	ldr	r3, [pc, #548]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d06c      	beq.n	8002068 <HAL_RCC_OscConfig+0x12c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d168      	bne.n	8002068 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e24c      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x76>
 8001fa4:	4b80      	ldr	r3, [pc, #512]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a7f      	ldr	r2, [pc, #508]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	e02e      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x98>
 8001fba:	4b7b      	ldr	r3, [pc, #492]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a7a      	ldr	r2, [pc, #488]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b78      	ldr	r3, [pc, #480]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a77      	ldr	r2, [pc, #476]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e01d      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xbc>
 8001fde:	4b72      	ldr	r3, [pc, #456]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a71      	ldr	r2, [pc, #452]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b6f      	ldr	r3, [pc, #444]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6e      	ldr	r2, [pc, #440]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a6a      	ldr	r2, [pc, #424]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b68      	ldr	r3, [pc, #416]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a67      	ldr	r2, [pc, #412]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800200e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fae2 	bl	80015e0 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7ff fade 	bl	80015e0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	@ 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e200      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b5d      	ldr	r3, [pc, #372]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0xe4>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff face 	bl	80015e0 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff faca 	bl	80015e0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	@ 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1ec      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b53      	ldr	r3, [pc, #332]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x10c>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d063      	beq.n	800213e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002076:	4b4c      	ldr	r3, [pc, #304]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002082:	4b49      	ldr	r3, [pc, #292]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b08      	cmp	r3, #8
 800208c:	d11c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x18c>
 800208e:	4b46      	ldr	r3, [pc, #280]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d116      	bne.n	80020c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209a:	4b43      	ldr	r3, [pc, #268]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x176>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e1c0      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b3d      	ldr	r3, [pc, #244]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4939      	ldr	r1, [pc, #228]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	e03a      	b.n	800213e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	4b36      	ldr	r3, [pc, #216]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff fa83 	bl	80015e0 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020de:	f7ff fa7f 	bl	80015e0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e1a1      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	4b2d      	ldr	r3, [pc, #180]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b2a      	ldr	r3, [pc, #168]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4927      	ldr	r1, [pc, #156]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
 8002110:	e015      	b.n	800213e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002112:	4b26      	ldr	r3, [pc, #152]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fa62 	bl	80015e0 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002120:	f7ff fa5e 	bl	80015e0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e180      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d03a      	beq.n	80021c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d019      	beq.n	8002186 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002152:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002158:	f7ff fa42 	bl	80015e0 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002160:	f7ff fa3e 	bl	80015e0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e160      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800217e:	2001      	movs	r0, #1
 8002180:	f000 fa9c 	bl	80026bc <RCC_Delay>
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218c:	f7ff fa28 	bl	80015e0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002192:	e00f      	b.n	80021b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff fa24 	bl	80015e0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d908      	bls.n	80021b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e146      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	42420000 	.word	0x42420000
 80021b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	4b92      	ldr	r3, [pc, #584]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e9      	bne.n	8002194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a6 	beq.w	800231a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10d      	bne.n	80021fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b88      	ldr	r3, [pc, #544]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a87      	ldr	r2, [pc, #540]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b85      	ldr	r3, [pc, #532]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b82      	ldr	r3, [pc, #520]	@ (8002404 <HAL_RCC_OscConfig+0x4c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b7f      	ldr	r3, [pc, #508]	@ (8002404 <HAL_RCC_OscConfig+0x4c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a7e      	ldr	r2, [pc, #504]	@ (8002404 <HAL_RCC_OscConfig+0x4c8>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7ff f9e5 	bl	80015e0 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221a:	f7ff f9e1 	bl	80015e0 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b64      	cmp	r3, #100	@ 0x64
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e103      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	4b75      	ldr	r3, [pc, #468]	@ (8002404 <HAL_RCC_OscConfig+0x4c8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x312>
 8002240:	4b6f      	ldr	r3, [pc, #444]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a6e      	ldr	r2, [pc, #440]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	e02d      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x334>
 8002256:	4b6a      	ldr	r3, [pc, #424]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a69      	ldr	r2, [pc, #420]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	4b67      	ldr	r3, [pc, #412]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a66      	ldr	r2, [pc, #408]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	6213      	str	r3, [r2, #32]
 800226e:	e01c      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x356>
 8002278:	4b61      	ldr	r3, [pc, #388]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a60      	ldr	r2, [pc, #384]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	4b5e      	ldr	r3, [pc, #376]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a5d      	ldr	r2, [pc, #372]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	e00b      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 8002292:	4b5b      	ldr	r3, [pc, #364]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a5a      	ldr	r2, [pc, #360]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	4b58      	ldr	r3, [pc, #352]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a57      	ldr	r2, [pc, #348]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	f023 0304 	bic.w	r3, r3, #4
 80022a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d015      	beq.n	80022de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7ff f995 	bl	80015e0 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7ff f991 	bl	80015e0 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e0b1      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ee      	beq.n	80022ba <HAL_RCC_OscConfig+0x37e>
 80022dc:	e014      	b.n	8002308 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7ff f97f 	bl	80015e0 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7ff f97b 	bl	80015e0 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e09b      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fc:	4b40      	ldr	r3, [pc, #256]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ee      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d105      	bne.n	800231a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230e:	4b3c      	ldr	r3, [pc, #240]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a3b      	ldr	r2, [pc, #236]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8087 	beq.w	8002432 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002324:	4b36      	ldr	r3, [pc, #216]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	d061      	beq.n	80023f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d146      	bne.n	80023c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	4b33      	ldr	r3, [pc, #204]	@ (8002408 <HAL_RCC_OscConfig+0x4cc>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff f94f 	bl	80015e0 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7ff f94b 	bl	80015e0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e06d      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002358:	4b29      	ldr	r3, [pc, #164]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f0      	bne.n	8002346 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236c:	d108      	bne.n	8002380 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800236e:	4b24      	ldr	r3, [pc, #144]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4921      	ldr	r1, [pc, #132]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002380:	4b1f      	ldr	r3, [pc, #124]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a19      	ldr	r1, [r3, #32]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	430b      	orrs	r3, r1
 8002392:	491b      	ldr	r1, [pc, #108]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <HAL_RCC_OscConfig+0x4cc>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7ff f91f 	bl	80015e0 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a6:	f7ff f91b 	bl	80015e0 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e03d      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b8:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x46a>
 80023c4:	e035      	b.n	8002432 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c6:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <HAL_RCC_OscConfig+0x4cc>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff f908 	bl	80015e0 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7ff f904 	bl	80015e0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e026      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x498>
 80023f2:	e01e      	b.n	8002432 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e019      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
 8002408:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_RCC_OscConfig+0x500>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	429a      	cmp	r2, r3
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d0      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b6a      	ldr	r3, [pc, #424]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d910      	bls.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b67      	ldr	r3, [pc, #412]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	4965      	ldr	r1, [pc, #404]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a58      	ldr	r2, [pc, #352]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a52      	ldr	r2, [pc, #328]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d040      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b41      	ldr	r3, [pc, #260]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e073      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b39      	ldr	r3, [pc, #228]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4936      	ldr	r1, [pc, #216]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7ff f856 	bl	80015e0 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7ff f852 	bl	80015e0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e053      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2d      	ldr	r3, [pc, #180]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d210      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b24      	ldr	r3, [pc, #144]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4922      	ldr	r1, [pc, #136]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ba:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	490a      	ldr	r1, [pc, #40]	@ (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	@ (800260c <HAL_RCC_ClockConfig+0x1cc>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_RCC_ClockConfig+0x1d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe ffb4 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
 8002608:	08003f0c 	.word	0x08003f0c
 800260c:	20000000 	.word	0x20000000
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800262e:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x30>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x36>
 8002642:	e027      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002644:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002646:	613b      	str	r3, [r7, #16]
      break;
 8002648:	e027      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	0c9b      	lsrs	r3, r3, #18
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4a17      	ldr	r2, [pc, #92]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d010      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002662:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	0c5b      	lsrs	r3, r3, #17
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	4a11      	ldr	r2, [pc, #68]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a0d      	ldr	r2, [pc, #52]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002676:	fb03 f202 	mul.w	r2, r3, r2
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e004      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a0c      	ldr	r2, [pc, #48]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	613b      	str	r3, [r7, #16]
      break;
 8002692:	e002      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002696:	613b      	str	r3, [r7, #16]
      break;
 8002698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269a:	693b      	ldr	r3, [r7, #16]
}
 800269c:	4618      	mov	r0, r3
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	007a1200 	.word	0x007a1200
 80026b0:	08003f1c 	.word	0x08003f1c
 80026b4:	08003f2c 	.word	0x08003f2c
 80026b8:	003d0900 	.word	0x003d0900

080026bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026c4:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <RCC_Delay+0x34>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <RCC_Delay+0x38>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0a5b      	lsrs	r3, r3, #9
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026d8:	bf00      	nop
  }
  while (Delay --);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e5a      	subs	r2, r3, #1
 80026de:	60fa      	str	r2, [r7, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f9      	bne.n	80026d8 <RCC_Delay+0x1c>
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	20000000 	.word	0x20000000
 80026f4:	10624dd3 	.word	0x10624dd3

080026f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e041      	b.n	800278e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fe62 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3304      	adds	r3, #4
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f000 fc9e 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e041      	b.n	800282c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f839 	bl	8002834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	4619      	mov	r1, r3
 80027d4:	4610      	mov	r0, r2
 80027d6:	f000 fc4f 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
	...

08002848 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d109      	bne.n	8002874 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	e022      	b.n	80028ba <HAL_TIM_PWM_Start_DMA+0x72>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b04      	cmp	r3, #4
 8002878:	d109      	bne.n	800288e <HAL_TIM_PWM_Start_DMA+0x46>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	e015      	b.n	80028ba <HAL_TIM_PWM_Start_DMA+0x72>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d109      	bne.n	80028a8 <HAL_TIM_PWM_Start_DMA+0x60>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e008      	b.n	80028ba <HAL_TIM_PWM_Start_DMA+0x72>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	e153      	b.n	8002b6a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_TIM_PWM_Start_DMA+0x94>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e022      	b.n	8002922 <HAL_TIM_PWM_Start_DMA+0xda>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d109      	bne.n	80028f6 <HAL_TIM_PWM_Start_DMA+0xae>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	bf0c      	ite	eq
 80028ee:	2301      	moveq	r3, #1
 80028f0:	2300      	movne	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e015      	b.n	8002922 <HAL_TIM_PWM_Start_DMA+0xda>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d109      	bne.n	8002910 <HAL_TIM_PWM_Start_DMA+0xc8>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e008      	b.n	8002922 <HAL_TIM_PWM_Start_DMA+0xda>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d024      	beq.n	8002970 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_TIM_PWM_Start_DMA+0xea>
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e119      	b.n	8002b6a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d104      	bne.n	8002946 <HAL_TIM_PWM_Start_DMA+0xfe>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002944:	e016      	b.n	8002974 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d104      	bne.n	8002956 <HAL_TIM_PWM_Start_DMA+0x10e>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002954:	e00e      	b.n	8002974 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d104      	bne.n	8002966 <HAL_TIM_PWM_Start_DMA+0x11e>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002964:	e006      	b.n	8002974 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2202      	movs	r2, #2
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800296e:	e001      	b.n	8002974 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0fa      	b.n	8002b6a <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b0c      	cmp	r3, #12
 8002978:	f200 80ae 	bhi.w	8002ad8 <HAL_TIM_PWM_Start_DMA+0x290>
 800297c:	a201      	add	r2, pc, #4	@ (adr r2, 8002984 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	080029b9 	.word	0x080029b9
 8002988:	08002ad9 	.word	0x08002ad9
 800298c:	08002ad9 	.word	0x08002ad9
 8002990:	08002ad9 	.word	0x08002ad9
 8002994:	08002a01 	.word	0x08002a01
 8002998:	08002ad9 	.word	0x08002ad9
 800299c:	08002ad9 	.word	0x08002ad9
 80029a0:	08002ad9 	.word	0x08002ad9
 80029a4:	08002a49 	.word	0x08002a49
 80029a8:	08002ad9 	.word	0x08002ad9
 80029ac:	08002ad9 	.word	0x08002ad9
 80029b0:	08002ad9 	.word	0x08002ad9
 80029b4:	08002a91 	.word	0x08002a91
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	4a6d      	ldr	r2, [pc, #436]	@ (8002b74 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80029be:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	4a6c      	ldr	r2, [pc, #432]	@ (8002b78 <HAL_TIM_PWM_Start_DMA+0x330>)
 80029c6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	4a6b      	ldr	r2, [pc, #428]	@ (8002b7c <HAL_TIM_PWM_Start_DMA+0x334>)
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3334      	adds	r3, #52	@ 0x34
 80029dc:	461a      	mov	r2, r3
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	f7fe ff94 	bl	800190c <HAL_DMA_Start_IT>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0bd      	b.n	8002b6a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fc:	60da      	str	r2, [r3, #12]
      break;
 80029fe:	e06e      	b.n	8002ade <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	4a5b      	ldr	r2, [pc, #364]	@ (8002b74 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002a06:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002b78 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a14:	4a59      	ldr	r2, [pc, #356]	@ (8002b7c <HAL_TIM_PWM_Start_DMA+0x334>)
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3338      	adds	r3, #56	@ 0x38
 8002a24:	461a      	mov	r2, r3
 8002a26:	887b      	ldrh	r3, [r7, #2]
 8002a28:	f7fe ff70 	bl	800190c <HAL_DMA_Start_IT>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e099      	b.n	8002b6a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a44:	60da      	str	r2, [r3, #12]
      break;
 8002a46:	e04a      	b.n	8002ade <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	4a49      	ldr	r2, [pc, #292]	@ (8002b74 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002a4e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	4a48      	ldr	r2, [pc, #288]	@ (8002b78 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002a56:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	4a47      	ldr	r2, [pc, #284]	@ (8002b7c <HAL_TIM_PWM_Start_DMA+0x334>)
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	333c      	adds	r3, #60	@ 0x3c
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	f7fe ff4c 	bl	800190c <HAL_DMA_Start_IT>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e075      	b.n	8002b6a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a8c:	60da      	str	r2, [r3, #12]
      break;
 8002a8e:	e026      	b.n	8002ade <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	4a37      	ldr	r2, [pc, #220]	@ (8002b74 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002a96:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	4a36      	ldr	r2, [pc, #216]	@ (8002b78 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	4a35      	ldr	r2, [pc, #212]	@ (8002b7c <HAL_TIM_PWM_Start_DMA+0x334>)
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3340      	adds	r3, #64	@ 0x40
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	f7fe ff28 	bl	800190c <HAL_DMA_Start_IT>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e051      	b.n	8002b6a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ad4:	60da      	str	r2, [r3, #12]
      break;
 8002ad6:	e002      	b.n	8002ade <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	75fb      	strb	r3, [r7, #23]
      break;
 8002adc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d141      	bne.n	8002b68 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fd4f 	bl	8003590 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a22      	ldr	r2, [pc, #136]	@ (8002b80 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d107      	bne.n	8002b0c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b0a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00e      	beq.n	8002b34 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b1e:	d009      	beq.n	8002b34 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a17      	ldr	r2, [pc, #92]	@ (8002b84 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d004      	beq.n	8002b34 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a16      	ldr	r2, [pc, #88]	@ (8002b88 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d111      	bne.n	8002b58 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d010      	beq.n	8002b68 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b56:	e007      	b.n	8002b68 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	08002f67 	.word	0x08002f67
 8002b78:	0800300f 	.word	0x0800300f
 8002b7c:	08002ed5 	.word	0x08002ed5
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40000400 	.word	0x40000400
 8002b88:	40000800 	.word	0x40000800

08002b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0ae      	b.n	8002d08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b0c      	cmp	r3, #12
 8002bb6:	f200 809f 	bhi.w	8002cf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bba:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002bf5 	.word	0x08002bf5
 8002bc4:	08002cf9 	.word	0x08002cf9
 8002bc8:	08002cf9 	.word	0x08002cf9
 8002bcc:	08002cf9 	.word	0x08002cf9
 8002bd0:	08002c35 	.word	0x08002c35
 8002bd4:	08002cf9 	.word	0x08002cf9
 8002bd8:	08002cf9 	.word	0x08002cf9
 8002bdc:	08002cf9 	.word	0x08002cf9
 8002be0:	08002c77 	.word	0x08002c77
 8002be4:	08002cf9 	.word	0x08002cf9
 8002be8:	08002cf9 	.word	0x08002cf9
 8002bec:	08002cf9 	.word	0x08002cf9
 8002bf0:	08002cb7 	.word	0x08002cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 faaa 	bl	8003154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0208 	orr.w	r2, r2, #8
 8002c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0204 	bic.w	r2, r2, #4
 8002c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6999      	ldr	r1, [r3, #24]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	619a      	str	r2, [r3, #24]
      break;
 8002c32:	e064      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 faf0 	bl	8003220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6999      	ldr	r1, [r3, #24]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	021a      	lsls	r2, r3, #8
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	619a      	str	r2, [r3, #24]
      break;
 8002c74:	e043      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fb39 	bl	80032f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0208 	orr.w	r2, r2, #8
 8002c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0204 	bic.w	r2, r2, #4
 8002ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69d9      	ldr	r1, [r3, #28]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	61da      	str	r2, [r3, #28]
      break;
 8002cb4:	e023      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fb83 	bl	80033c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69da      	ldr	r2, [r3, #28]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69d9      	ldr	r1, [r3, #28]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	021a      	lsls	r2, r3, #8
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	61da      	str	r2, [r3, #28]
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8002cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_TIM_ConfigClockSource+0x1c>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e0b4      	b.n	8002e96 <HAL_TIM_ConfigClockSource+0x186>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d64:	d03e      	beq.n	8002de4 <HAL_TIM_ConfigClockSource+0xd4>
 8002d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d6a:	f200 8087 	bhi.w	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d72:	f000 8086 	beq.w	8002e82 <HAL_TIM_ConfigClockSource+0x172>
 8002d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d7a:	d87f      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b70      	cmp	r3, #112	@ 0x70
 8002d7e:	d01a      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0xa6>
 8002d80:	2b70      	cmp	r3, #112	@ 0x70
 8002d82:	d87b      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b60      	cmp	r3, #96	@ 0x60
 8002d86:	d050      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x11a>
 8002d88:	2b60      	cmp	r3, #96	@ 0x60
 8002d8a:	d877      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b50      	cmp	r3, #80	@ 0x50
 8002d8e:	d03c      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0xfa>
 8002d90:	2b50      	cmp	r3, #80	@ 0x50
 8002d92:	d873      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b40      	cmp	r3, #64	@ 0x40
 8002d96:	d058      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x13a>
 8002d98:	2b40      	cmp	r3, #64	@ 0x40
 8002d9a:	d86f      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b30      	cmp	r3, #48	@ 0x30
 8002d9e:	d064      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002da0:	2b30      	cmp	r3, #48	@ 0x30
 8002da2:	d86b      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d060      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d867      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d05c      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d05a      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002db4:	e062      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dc6:	f000 fbc4 	bl	8003552 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	609a      	str	r2, [r3, #8]
      break;
 8002de2:	e04f      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002df4:	f000 fbad 	bl	8003552 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e06:	609a      	str	r2, [r3, #8]
      break;
 8002e08:	e03c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 fb24 	bl	8003464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2150      	movs	r1, #80	@ 0x50
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fb7b 	bl	800351e <TIM_ITRx_SetConfig>
      break;
 8002e28:	e02c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e36:	461a      	mov	r2, r3
 8002e38:	f000 fb42 	bl	80034c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2160      	movs	r1, #96	@ 0x60
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fb6b 	bl	800351e <TIM_ITRx_SetConfig>
      break;
 8002e48:	e01c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e56:	461a      	mov	r2, r3
 8002e58:	f000 fb04 	bl	8003464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2140      	movs	r1, #64	@ 0x40
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fb5b 	bl	800351e <TIM_ITRx_SetConfig>
      break;
 8002e68:	e00c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f000 fb52 	bl	800351e <TIM_ITRx_SetConfig>
      break;
 8002e7a:	e003      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e000      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002efa:	e02a      	b.n	8002f52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d107      	bne.n	8002f16 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f14:	e01d      	b.n	8002f52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d107      	bne.n	8002f30 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2204      	movs	r2, #4
 8002f24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f2e:	e010      	b.n	8002f52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d107      	bne.n	8002f4a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f48:	e003      	b.n	8002f52 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff ffb5 	bl	8002ec2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	771a      	strb	r2, [r3, #28]
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d10b      	bne.n	8002f96 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d136      	bne.n	8002ffa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f94:	e031      	b.n	8002ffa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d10b      	bne.n	8002fb8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d125      	bne.n	8002ffa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fb6:	e020      	b.n	8002ffa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d10b      	bne.n	8002fda <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d114      	bne.n	8002ffa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd8:	e00f      	b.n	8002ffa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d10a      	bne.n	8002ffa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff ff4f 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	771a      	strb	r2, [r3, #28]
}
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	d103      	bne.n	800302e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	771a      	strb	r2, [r3, #28]
 800302c:	e019      	b.n	8003062 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d103      	bne.n	8003040 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2202      	movs	r2, #2
 800303c:	771a      	strb	r2, [r3, #28]
 800303e:	e010      	b.n	8003062 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	429a      	cmp	r2, r3
 8003048:	d103      	bne.n	8003052 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2204      	movs	r2, #4
 800304e:	771a      	strb	r2, [r3, #28]
 8003050:	e007      	b.n	8003062 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d102      	bne.n	8003062 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2208      	movs	r2, #8
 8003060:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff ff24 	bl	8002eb0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	771a      	strb	r2, [r3, #28]
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a2f      	ldr	r2, [pc, #188]	@ (8003148 <TIM_Base_SetConfig+0xd0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00b      	beq.n	80030a8 <TIM_Base_SetConfig+0x30>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003096:	d007      	beq.n	80030a8 <TIM_Base_SetConfig+0x30>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a2c      	ldr	r2, [pc, #176]	@ (800314c <TIM_Base_SetConfig+0xd4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <TIM_Base_SetConfig+0x30>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003150 <TIM_Base_SetConfig+0xd8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d108      	bne.n	80030ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a22      	ldr	r2, [pc, #136]	@ (8003148 <TIM_Base_SetConfig+0xd0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00b      	beq.n	80030da <TIM_Base_SetConfig+0x62>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c8:	d007      	beq.n	80030da <TIM_Base_SetConfig+0x62>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1f      	ldr	r2, [pc, #124]	@ (800314c <TIM_Base_SetConfig+0xd4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d003      	beq.n	80030da <TIM_Base_SetConfig+0x62>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003150 <TIM_Base_SetConfig+0xd8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d108      	bne.n	80030ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a0d      	ldr	r2, [pc, #52]	@ (8003148 <TIM_Base_SetConfig+0xd0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d103      	bne.n	8003120 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f023 0201 	bic.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	611a      	str	r2, [r3, #16]
  }
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800

08003154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f023 0201 	bic.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 0302 	bic.w	r3, r3, #2
 800319c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a1c      	ldr	r2, [pc, #112]	@ (800321c <TIM_OC1_SetConfig+0xc8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10c      	bne.n	80031ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f023 0308 	bic.w	r3, r3, #8
 80031b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f023 0304 	bic.w	r3, r3, #4
 80031c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a13      	ldr	r2, [pc, #76]	@ (800321c <TIM_OC1_SetConfig+0xc8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d111      	bne.n	80031f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	621a      	str	r2, [r3, #32]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40012c00 	.word	0x40012c00

08003220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f023 0210 	bic.w	r2, r3, #16
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800324e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f023 0320 	bic.w	r3, r3, #32
 800326a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a1d      	ldr	r2, [pc, #116]	@ (80032f0 <TIM_OC2_SetConfig+0xd0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d10d      	bne.n	800329c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800329a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a14      	ldr	r2, [pc, #80]	@ (80032f0 <TIM_OC2_SetConfig+0xd0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d113      	bne.n	80032cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	621a      	str	r2, [r3, #32]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40012c00 	.word	0x40012c00

080032f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800333c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1d      	ldr	r2, [pc, #116]	@ (80033c4 <TIM_OC3_SetConfig+0xd0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d10d      	bne.n	800336e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800336c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a14      	ldr	r2, [pc, #80]	@ (80033c4 <TIM_OC3_SetConfig+0xd0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d113      	bne.n	800339e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800337c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	621a      	str	r2, [r3, #32]
}
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40012c00 	.word	0x40012c00

080033c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	031b      	lsls	r3, r3, #12
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0f      	ldr	r2, [pc, #60]	@ (8003460 <TIM_OC4_SetConfig+0x98>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d109      	bne.n	800343c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800342e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	019b      	lsls	r3, r3, #6
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	40012c00 	.word	0x40012c00

08003464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f023 0201 	bic.w	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800348e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f023 030a 	bic.w	r3, r3, #10
 80034a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	f023 0210 	bic.w	r2, r3, #16
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	031b      	lsls	r3, r3, #12
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr

0800351e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	f043 0307 	orr.w	r3, r3, #7
 8003540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003552:	b480      	push	{r7}
 8003554:	b087      	sub	sp, #28
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800356c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	021a      	lsls	r2, r3, #8
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	431a      	orrs	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	4313      	orrs	r3, r2
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	609a      	str	r2, [r3, #8]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2201      	movs	r2, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1a      	ldr	r2, [r3, #32]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	401a      	ands	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1a      	ldr	r2, [r3, #32]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	431a      	orrs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e046      	b.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a16      	ldr	r2, [pc, #88]	@ (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00e      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363c:	d009      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a12      	ldr	r2, [pc, #72]	@ (800368c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a10      	ldr	r2, [pc, #64]	@ (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d10c      	bne.n	800366c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	4313      	orrs	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800

08003694 <hsv_to_rgb>:

    return hsv;
}

// HSV转RGB函数
RGBColor hsv_to_rgb(HSVColor hsv) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b08c      	sub	sp, #48	@ 0x30
 8003698:	af00      	add	r7, sp, #0
 800369a:	1d3b      	adds	r3, r7, #4
 800369c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    RGBColor rgb;
    float c = hsv.v * hsv.s; // 色度
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	4611      	mov	r1, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fd fb1a 	bl	8000ce0 <__aeabi_fmul>
 80036ac:	4603      	mov	r3, r0
 80036ae:	623b      	str	r3, [r7, #32]
    float x = c * (1.0f - fabsf(fmodf(hsv.h / 60.0f, 2.0f) - 1.0f));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4962      	ldr	r1, [pc, #392]	@ (800383c <hsv_to_rgb+0x1a8>)
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fd fbc7 	bl	8000e48 <__aeabi_fdiv>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fa71 	bl	8003ba8 <fmodf>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd f9fd 	bl	8000acc <__aeabi_fsub>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036d8:	4619      	mov	r1, r3
 80036da:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80036de:	f7fd f9f5 	bl	8000acc <__aeabi_fsub>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4619      	mov	r1, r3
 80036e6:	6a38      	ldr	r0, [r7, #32]
 80036e8:	f7fd fafa 	bl	8000ce0 <__aeabi_fmul>
 80036ec:	4603      	mov	r3, r0
 80036ee:	61fb      	str	r3, [r7, #28]
    float m = hsv.v - c;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a39      	ldr	r1, [r7, #32]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd f9e9 	bl	8000acc <__aeabi_fsub>
 80036fa:	4603      	mov	r3, r0
 80036fc:	61bb      	str	r3, [r7, #24]

    float r, g, b;

    // 根据色相区间计算
    if (hsv.h < 60.0f) {
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	494e      	ldr	r1, [pc, #312]	@ (800383c <hsv_to_rgb+0x1a8>)
 8003702:	4618      	mov	r0, r3
 8003704:	f7fd fc8a 	bl	800101c <__aeabi_fcmplt>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <hsv_to_rgb+0x8a>
        r = c; g = x; b = 0;
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
 800371c:	e046      	b.n	80037ac <hsv_to_rgb+0x118>
    } else if (hsv.h < 120.0f) {
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4947      	ldr	r1, [pc, #284]	@ (8003840 <hsv_to_rgb+0x1ac>)
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd fc7a 	bl	800101c <__aeabi_fcmplt>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <hsv_to_rgb+0xaa>
        r = x; g = c; b = 0;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
 800373c:	e036      	b.n	80037ac <hsv_to_rgb+0x118>
    } else if (hsv.h < 180.0f) {
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4940      	ldr	r1, [pc, #256]	@ (8003844 <hsv_to_rgb+0x1b0>)
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd fc6a 	bl	800101c <__aeabi_fcmplt>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <hsv_to_rgb+0xca>
        r = 0; g = c; b = x;
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
 800375c:	e026      	b.n	80037ac <hsv_to_rgb+0x118>
    } else if (hsv.h < 240.0f) {
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4939      	ldr	r1, [pc, #228]	@ (8003848 <hsv_to_rgb+0x1b4>)
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd fc5a 	bl	800101c <__aeabi_fcmplt>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d007      	beq.n	800377e <hsv_to_rgb+0xea>
        r = 0; g = x; b = c;
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
 800377c:	e016      	b.n	80037ac <hsv_to_rgb+0x118>
    } else if (hsv.h < 300.0f) {
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4932      	ldr	r1, [pc, #200]	@ (800384c <hsv_to_rgb+0x1b8>)
 8003782:	4618      	mov	r0, r3
 8003784:	f7fd fc4a 	bl	800101c <__aeabi_fcmplt>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <hsv_to_rgb+0x10a>
        r = x; g = 0; b = c;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	627b      	str	r3, [r7, #36]	@ 0x24
 800379c:	e006      	b.n	80037ac <hsv_to_rgb+0x118>
    } else {
        r = c; g = 0; b = x;
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // 添加明度偏移并转换为0-255
    rgb.r = (unsigned char)((r + m) * 255.0f);
 80037ac:	69b9      	ldr	r1, [r7, #24]
 80037ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037b0:	f7fd f98e 	bl	8000ad0 <__addsf3>
 80037b4:	4603      	mov	r3, r0
 80037b6:	4926      	ldr	r1, [pc, #152]	@ (8003850 <hsv_to_rgb+0x1bc>)
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fd fa91 	bl	8000ce0 <__aeabi_fmul>
 80037be:	4603      	mov	r3, r0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fd fc69 	bl	8001098 <__aeabi_f2uiz>
 80037c6:	4603      	mov	r3, r0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	743b      	strb	r3, [r7, #16]
    rgb.g = (unsigned char)((g + m) * 255.0f);
 80037cc:	69b9      	ldr	r1, [r7, #24]
 80037ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037d0:	f7fd f97e 	bl	8000ad0 <__addsf3>
 80037d4:	4603      	mov	r3, r0
 80037d6:	491e      	ldr	r1, [pc, #120]	@ (8003850 <hsv_to_rgb+0x1bc>)
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd fa81 	bl	8000ce0 <__aeabi_fmul>
 80037de:	4603      	mov	r3, r0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fc59 	bl	8001098 <__aeabi_f2uiz>
 80037e6:	4603      	mov	r3, r0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	747b      	strb	r3, [r7, #17]
    rgb.b = (unsigned char)((b + m) * 255.0f);
 80037ec:	69b9      	ldr	r1, [r7, #24]
 80037ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037f0:	f7fd f96e 	bl	8000ad0 <__addsf3>
 80037f4:	4603      	mov	r3, r0
 80037f6:	4916      	ldr	r1, [pc, #88]	@ (8003850 <hsv_to_rgb+0x1bc>)
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fd fa71 	bl	8000ce0 <__aeabi_fmul>
 80037fe:	4603      	mov	r3, r0
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd fc49 	bl	8001098 <__aeabi_f2uiz>
 8003806:	4603      	mov	r3, r0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	74bb      	strb	r3, [r7, #18]

    return rgb;
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	f107 0210 	add.w	r2, r7, #16
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	4611      	mov	r1, r2
 8003818:	8019      	strh	r1, [r3, #0]
 800381a:	3302      	adds	r3, #2
 800381c:	0c12      	lsrs	r2, r2, #16
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	2300      	movs	r3, #0
 8003822:	7d3a      	ldrb	r2, [r7, #20]
 8003824:	f362 0307 	bfi	r3, r2, #0, #8
 8003828:	7d7a      	ldrb	r2, [r7, #21]
 800382a:	f362 230f 	bfi	r3, r2, #8, #8
 800382e:	7dba      	ldrb	r2, [r7, #22]
 8003830:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003834:	4618      	mov	r0, r3
 8003836:	3730      	adds	r7, #48	@ 0x30
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	42700000 	.word	0x42700000
 8003840:	42f00000 	.word	0x42f00000
 8003844:	43340000 	.word	0x43340000
 8003848:	43700000 	.word	0x43700000
 800384c:	43960000 	.word	0x43960000
 8003850:	437f0000 	.word	0x437f0000

08003854 <rgb_to_int>:

uint32_t rgb_to_int(RGBColor rgb)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	uint32_t color = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
	color = (rgb.r << 16) | (rgb.g << 16) | (rgb.b);
 8003860:	793b      	ldrb	r3, [r7, #4]
 8003862:	041a      	lsls	r2, r3, #16
 8003864:	797b      	ldrb	r3, [r7, #5]
 8003866:	041b      	lsls	r3, r3, #16
 8003868:	4313      	orrs	r3, r2
 800386a:	79ba      	ldrb	r2, [r7, #6]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
	return color;
 8003870:	68fb      	ldr	r3, [r7, #12]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <WS2812B_Reset>:
			WS2812B_BUFF[i][j] = 0;
		}
	}
}
void WS2812B_Reset(void)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
	int i = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 24; i++)
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	e009      	b.n	80038a0 <WS2812B_Reset+0x24>
	{
		WS2812B_BUFF[LED_NUM][i] = 0;
 800388c:	4a09      	ldr	r2, [pc, #36]	@ (80038b4 <WS2812B_Reset+0x38>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8003894:	2100      	movs	r1, #0
 8003896:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 24; i++)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3301      	adds	r3, #1
 800389e:	607b      	str	r3, [r7, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b17      	cmp	r3, #23
 80038a4:	ddf2      	ble.n	800388c <WS2812B_Reset+0x10>
	}

}
 80038a6:	bf00      	nop
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000108 	.word	0x20000108

080038b8 <PWM_WS2812B_Write_24Bits>:
void PWM_WS2812B_Write_24Bits(uint16_t index,uint32_t RGB_Data)
{
 80038b8:	b490      	push	{r4, r7}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < 8; i++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	e047      	b.n	800395e <PWM_WS2812B_Write_24Bits+0xa6>
	{
		WS2812B_BUFF[index][i] = (((RGB_Data << (8+i)) & 0x00800000))? (T1H):(T0H); 	//G
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	3308      	adds	r3, #8
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <PWM_WS2812B_Write_24Bits+0x2c>
 80038e0:	213c      	movs	r1, #60	@ 0x3c
 80038e2:	e000      	b.n	80038e6 <PWM_WS2812B_Write_24Bits+0x2e>
 80038e4:	211e      	movs	r1, #30
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	4821      	ldr	r0, [pc, #132]	@ (8003970 <PWM_WS2812B_Write_24Bits+0xb8>)
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4413      	add	r3, r2
 80038f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		WS2812B_BUFF[index][i+8] = (((RGB_Data << (i)) & 0x00800000))? (T1H):(T0H);		//R
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <PWM_WS2812B_Write_24Bits+0x56>
 800390a:	213c      	movs	r1, #60	@ 0x3c
 800390c:	e000      	b.n	8003910 <PWM_WS2812B_Write_24Bits+0x58>
 800390e:	211e      	movs	r1, #30
 8003910:	88fa      	ldrh	r2, [r7, #6]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f103 0008 	add.w	r0, r3, #8
 8003918:	4c15      	ldr	r4, [pc, #84]	@ (8003970 <PWM_WS2812B_Write_24Bits+0xb8>)
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4403      	add	r3, r0
 8003924:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		WS2812B_BUFF[index][i+16] = (((RGB_Data << (16+i)) & 0x00800000))? (T1H):(T0H);	//B
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3310      	adds	r3, #16
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <PWM_WS2812B_Write_24Bits+0x86>
 800393a:	213c      	movs	r1, #60	@ 0x3c
 800393c:	e000      	b.n	8003940 <PWM_WS2812B_Write_24Bits+0x88>
 800393e:	211e      	movs	r1, #30
 8003940:	88fa      	ldrh	r2, [r7, #6]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f103 0010 	add.w	r0, r3, #16
 8003948:	4c09      	ldr	r4, [pc, #36]	@ (8003970 <PWM_WS2812B_Write_24Bits+0xb8>)
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4403      	add	r3, r0
 8003954:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	for(i = 0; i < 8; i++)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3301      	adds	r3, #1
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b07      	cmp	r3, #7
 8003962:	ddb4      	ble.n	80038ce <PWM_WS2812B_Write_24Bits+0x16>
	}
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bc90      	pop	{r4, r7}
 800396e:	4770      	bx	lr
 8003970:	20000108 	.word	0x20000108

08003974 <WS2812B_Set_Color>:
void WS2812B_Set_Color(uint16_t head, uint16_t num ,uint32_t RGB_Data)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	603a      	str	r2, [r7, #0]
 800397e:	80fb      	strh	r3, [r7, #6]
 8003980:	460b      	mov	r3, r1
 8003982:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < num; i++)
 8003988:	2300      	movs	r3, #0
 800398a:	81fb      	strh	r3, [r7, #14]
 800398c:	e00a      	b.n	80039a4 <WS2812B_Set_Color+0x30>
	{
		PWM_WS2812B_Write_24Bits(head+i ,RGB_Data);
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	89fb      	ldrh	r3, [r7, #14]
 8003992:	4413      	add	r3, r2
 8003994:	b29b      	uxth	r3, r3
 8003996:	6839      	ldr	r1, [r7, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff8d 	bl	80038b8 <PWM_WS2812B_Write_24Bits>
	for (i = 0; i < num; i++)
 800399e:	89fb      	ldrh	r3, [r7, #14]
 80039a0:	3301      	adds	r3, #1
 80039a2:	81fb      	strh	r3, [r7, #14]
 80039a4:	89fa      	ldrh	r2, [r7, #14]
 80039a6:	88bb      	ldrh	r3, [r7, #4]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3f0      	bcc.n	800398e <WS2812B_Set_Color+0x1a>
	}
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <PWM_WS2812B_Refresh>:
void PWM_WS2812B_Refresh()
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	WS2812B_Reset();
 80039bc:	f7ff ff5e 	bl	800387c <WS2812B_Reset>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)WS2812B_BUFF, (LED_NUM+1)*24);
 80039c0:	f640 6328 	movw	r3, #3624	@ 0xe28
 80039c4:	4a03      	ldr	r2, [pc, #12]	@ (80039d4 <PWM_WS2812B_Refresh+0x1c>)
 80039c6:	2104      	movs	r1, #4
 80039c8:	4803      	ldr	r0, [pc, #12]	@ (80039d8 <PWM_WS2812B_Refresh+0x20>)
 80039ca:	f7fe ff3d 	bl	8002848 <HAL_TIM_PWM_Start_DMA>
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000108 	.word	0x20000108
 80039d8:	20000078 	.word	0x20000078

080039dc <PWM_WS2812B_Rainbow>:
	  PWM_WS2812B_Refresh();
//	  RGB_Show_64();
	  HAL_Delay(20);
}
void PWM_WS2812B_Rainbow(HSVColor* HSV)
{
 80039dc:	b5b0      	push	{r4, r5, r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	uint16_t i = 0,j = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	81fb      	strh	r3, [r7, #14]
 80039e8:	2300      	movs	r3, #0
 80039ea:	81bb      	strh	r3, [r7, #12]
	for (i = LED_NUM; i > 0; i--)
 80039ec:	2396      	movs	r3, #150	@ 0x96
 80039ee:	81fb      	strh	r3, [r7, #14]
 80039f0:	e020      	b.n	8003a34 <PWM_WS2812B_Rainbow+0x58>
	{
	  for (j = 0; j < 24; j++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	81bb      	strh	r3, [r7, #12]
 80039f6:	e017      	b.n	8003a28 <PWM_WS2812B_Rainbow+0x4c>
	  	{
	  		WS2812B_BUFF[i][j] = WS2812B_BUFF[i-1][j];
 80039f8:	89fb      	ldrh	r3, [r7, #14]
 80039fa:	1e59      	subs	r1, r3, #1
 80039fc:	89bc      	ldrh	r4, [r7, #12]
 80039fe:	89fa      	ldrh	r2, [r7, #14]
 8003a00:	89b8      	ldrh	r0, [r7, #12]
 8003a02:	4d20      	ldr	r5, [pc, #128]	@ (8003a84 <PWM_WS2812B_Rainbow+0xa8>)
 8003a04:	460b      	mov	r3, r1
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	440b      	add	r3, r1
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4423      	add	r3, r4
 8003a0e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8003a12:	4c1c      	ldr	r4, [pc, #112]	@ (8003a84 <PWM_WS2812B_Rainbow+0xa8>)
 8003a14:	4613      	mov	r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4403      	add	r3, r0
 8003a1e:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	  for (j = 0; j < 24; j++)
 8003a22:	89bb      	ldrh	r3, [r7, #12]
 8003a24:	3301      	adds	r3, #1
 8003a26:	81bb      	strh	r3, [r7, #12]
 8003a28:	89bb      	ldrh	r3, [r7, #12]
 8003a2a:	2b17      	cmp	r3, #23
 8003a2c:	d9e4      	bls.n	80039f8 <PWM_WS2812B_Rainbow+0x1c>
	for (i = LED_NUM; i > 0; i--)
 8003a2e:	89fb      	ldrh	r3, [r7, #14]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	81fb      	strh	r3, [r7, #14]
 8003a34:	89fb      	ldrh	r3, [r7, #14]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1db      	bne.n	80039f2 <PWM_WS2812B_Rainbow+0x16>
	  	}
	}

	  Color_Gradual(HSV,7);
 8003a3a:	4913      	ldr	r1, [pc, #76]	@ (8003a88 <PWM_WS2812B_Rainbow+0xac>)
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f825 	bl	8003a8c <Color_Gradual>
	  WS2812B_Set_Color(0,1,rgb_to_int(hsv_to_rgb(*HSV)));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a48:	f7ff fe24 	bl	8003694 <hsv_to_rgb>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	723a      	strb	r2, [r7, #8]
 8003a52:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003a56:	727a      	strb	r2, [r7, #9]
 8003a58:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003a5c:	72bb      	strb	r3, [r7, #10]
 8003a5e:	68b8      	ldr	r0, [r7, #8]
 8003a60:	f7ff fef8 	bl	8003854 <rgb_to_int>
 8003a64:	4603      	mov	r3, r0
 8003a66:	461a      	mov	r2, r3
 8003a68:	2101      	movs	r1, #1
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f7ff ff82 	bl	8003974 <WS2812B_Set_Color>
	  PWM_WS2812B_Refresh();
 8003a70:	f7ff ffa2 	bl	80039b8 <PWM_WS2812B_Refresh>
//	  RGB_Show_64();
	  HAL_Delay(20);
 8003a74:	2014      	movs	r0, #20
 8003a76:	f7fd fdbd 	bl	80015f4 <HAL_Delay>
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bdb0      	pop	{r4, r5, r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000108 	.word	0x20000108
 8003a88:	40e00000 	.word	0x40e00000

08003a8c <Color_Gradual>:
	PWM_WS2812B_Refresh();
}


void Color_Gradual(HSVColor* Color,float step)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
	if(Color->h < 360)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4914      	ldr	r1, [pc, #80]	@ (8003aec <Color_Gradual+0x60>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fd fabd 	bl	800101c <__aeabi_fcmplt>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <Color_Gradual+0x32>
	{
		Color->h += step;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6839      	ldr	r1, [r7, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fd f80e 	bl	8000ad0 <__addsf3>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	601a      	str	r2, [r3, #0]
//	}
//	else
//	{
//		Color->v = 0;
//	}
}
 8003abc:	e012      	b.n	8003ae4 <Color_Gradual+0x58>
		Color->h = fmod(Color->h, 360);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fc fca6 	bl	8000414 <__aeabi_f2d>
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	4b08      	ldr	r3, [pc, #32]	@ (8003af0 <Color_Gradual+0x64>)
 8003ace:	f000 f843 	bl	8003b58 <fmod>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f7fc ffa3 	bl	8000a24 <__aeabi_d2f>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	601a      	str	r2, [r3, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	43b40000 	.word	0x43b40000
 8003af0:	40768000 	.word	0x40768000

08003af4 <memset>:
 8003af4:	4603      	mov	r3, r0
 8003af6:	4402      	add	r2, r0
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d100      	bne.n	8003afe <memset+0xa>
 8003afc:	4770      	bx	lr
 8003afe:	f803 1b01 	strb.w	r1, [r3], #1
 8003b02:	e7f9      	b.n	8003af8 <memset+0x4>

08003b04 <__errno>:
 8003b04:	4b01      	ldr	r3, [pc, #4]	@ (8003b0c <__errno+0x8>)
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	2000000c 	.word	0x2000000c

08003b10 <__libc_init_array>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	2600      	movs	r6, #0
 8003b14:	4d0c      	ldr	r5, [pc, #48]	@ (8003b48 <__libc_init_array+0x38>)
 8003b16:	4c0d      	ldr	r4, [pc, #52]	@ (8003b4c <__libc_init_array+0x3c>)
 8003b18:	1b64      	subs	r4, r4, r5
 8003b1a:	10a4      	asrs	r4, r4, #2
 8003b1c:	42a6      	cmp	r6, r4
 8003b1e:	d109      	bne.n	8003b34 <__libc_init_array+0x24>
 8003b20:	f000 f9e2 	bl	8003ee8 <_init>
 8003b24:	2600      	movs	r6, #0
 8003b26:	4d0a      	ldr	r5, [pc, #40]	@ (8003b50 <__libc_init_array+0x40>)
 8003b28:	4c0a      	ldr	r4, [pc, #40]	@ (8003b54 <__libc_init_array+0x44>)
 8003b2a:	1b64      	subs	r4, r4, r5
 8003b2c:	10a4      	asrs	r4, r4, #2
 8003b2e:	42a6      	cmp	r6, r4
 8003b30:	d105      	bne.n	8003b3e <__libc_init_array+0x2e>
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b38:	4798      	blx	r3
 8003b3a:	3601      	adds	r6, #1
 8003b3c:	e7ee      	b.n	8003b1c <__libc_init_array+0xc>
 8003b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b42:	4798      	blx	r3
 8003b44:	3601      	adds	r6, #1
 8003b46:	e7f2      	b.n	8003b2e <__libc_init_array+0x1e>
 8003b48:	08003f48 	.word	0x08003f48
 8003b4c:	08003f48 	.word	0x08003f48
 8003b50:	08003f48 	.word	0x08003f48
 8003b54:	08003f4c 	.word	0x08003f4c

08003b58 <fmod>:
 8003b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b5c:	4680      	mov	r8, r0
 8003b5e:	4689      	mov	r9, r1
 8003b60:	4616      	mov	r6, r2
 8003b62:	461f      	mov	r7, r3
 8003b64:	f000 f83c 	bl	8003be0 <__ieee754_fmod>
 8003b68:	4632      	mov	r2, r6
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	460d      	mov	r5, r1
 8003b6e:	463b      	mov	r3, r7
 8003b70:	4640      	mov	r0, r8
 8003b72:	4649      	mov	r1, r9
 8003b74:	f7fc ff40 	bl	80009f8 <__aeabi_dcmpun>
 8003b78:	b990      	cbnz	r0, 8003ba0 <fmod+0x48>
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	4630      	mov	r0, r6
 8003b80:	4639      	mov	r1, r7
 8003b82:	f7fc ff07 	bl	8000994 <__aeabi_dcmpeq>
 8003b86:	b158      	cbz	r0, 8003ba0 <fmod+0x48>
 8003b88:	f7ff ffbc 	bl	8003b04 <__errno>
 8003b8c:	2321      	movs	r3, #33	@ 0x21
 8003b8e:	2200      	movs	r2, #0
 8003b90:	6003      	str	r3, [r0, #0]
 8003b92:	2300      	movs	r3, #0
 8003b94:	4610      	mov	r0, r2
 8003b96:	4619      	mov	r1, r3
 8003b98:	f7fc fdbe 	bl	8000718 <__aeabi_ddiv>
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	460d      	mov	r5, r1
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003ba8 <fmodf>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	4606      	mov	r6, r0
 8003bac:	460d      	mov	r5, r1
 8003bae:	f000 f91b 	bl	8003de8 <__ieee754_fmodf>
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f7fd fa58 	bl	800106c <__aeabi_fcmpun>
 8003bbc:	b968      	cbnz	r0, 8003bda <fmodf+0x32>
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f7fd fa21 	bl	8001008 <__aeabi_fcmpeq>
 8003bc6:	b140      	cbz	r0, 8003bda <fmodf+0x32>
 8003bc8:	f7ff ff9c 	bl	8003b04 <__errno>
 8003bcc:	2321      	movs	r3, #33	@ 0x21
 8003bce:	2100      	movs	r1, #0
 8003bd0:	6003      	str	r3, [r0, #0]
 8003bd2:	4608      	mov	r0, r1
 8003bd4:	f7fd f938 	bl	8000e48 <__aeabi_fdiv>
 8003bd8:	4604      	mov	r4, r0
 8003bda:	4620      	mov	r0, r4
 8003bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003be0 <__ieee754_fmod>:
 8003be0:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8003be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	ea52 040c 	orrs.w	r4, r2, ip
 8003bec:	461e      	mov	r6, r3
 8003bee:	4617      	mov	r7, r2
 8003bf0:	4696      	mov	lr, r2
 8003bf2:	d00c      	beq.n	8003c0e <__ieee754_fmod+0x2e>
 8003bf4:	4c76      	ldr	r4, [pc, #472]	@ (8003dd0 <__ieee754_fmod+0x1f0>)
 8003bf6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8003bfa:	45a0      	cmp	r8, r4
 8003bfc:	4689      	mov	r9, r1
 8003bfe:	d806      	bhi.n	8003c0e <__ieee754_fmod+0x2e>
 8003c00:	4254      	negs	r4, r2
 8003c02:	4d74      	ldr	r5, [pc, #464]	@ (8003dd4 <__ieee754_fmod+0x1f4>)
 8003c04:	4314      	orrs	r4, r2
 8003c06:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8003c0a:	42ac      	cmp	r4, r5
 8003c0c:	d907      	bls.n	8003c1e <__ieee754_fmod+0x3e>
 8003c0e:	f7fc fc59 	bl	80004c4 <__aeabi_dmul>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	f7fc fd7f 	bl	8000718 <__aeabi_ddiv>
 8003c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c1e:	45e0      	cmp	r8, ip
 8003c20:	4682      	mov	sl, r0
 8003c22:	4604      	mov	r4, r0
 8003c24:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8003c28:	dc09      	bgt.n	8003c3e <__ieee754_fmod+0x5e>
 8003c2a:	dbf6      	blt.n	8003c1a <__ieee754_fmod+0x3a>
 8003c2c:	4282      	cmp	r2, r0
 8003c2e:	d8f4      	bhi.n	8003c1a <__ieee754_fmod+0x3a>
 8003c30:	d105      	bne.n	8003c3e <__ieee754_fmod+0x5e>
 8003c32:	4b69      	ldr	r3, [pc, #420]	@ (8003dd8 <__ieee754_fmod+0x1f8>)
 8003c34:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8003c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c3c:	e7ed      	b.n	8003c1a <__ieee754_fmod+0x3a>
 8003c3e:	4a65      	ldr	r2, [pc, #404]	@ (8003dd4 <__ieee754_fmod+0x1f4>)
 8003c40:	ea19 0f02 	tst.w	r9, r2
 8003c44:	d148      	bne.n	8003cd8 <__ieee754_fmod+0xf8>
 8003c46:	f1b8 0f00 	cmp.w	r8, #0
 8003c4a:	d13d      	bne.n	8003cc8 <__ieee754_fmod+0xe8>
 8003c4c:	4653      	mov	r3, sl
 8003c4e:	4963      	ldr	r1, [pc, #396]	@ (8003ddc <__ieee754_fmod+0x1fc>)
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	dc36      	bgt.n	8003cc2 <__ieee754_fmod+0xe2>
 8003c54:	4216      	tst	r6, r2
 8003c56:	d14f      	bne.n	8003cf8 <__ieee754_fmod+0x118>
 8003c58:	f1bc 0f00 	cmp.w	ip, #0
 8003c5c:	d144      	bne.n	8003ce8 <__ieee754_fmod+0x108>
 8003c5e:	463b      	mov	r3, r7
 8003c60:	4a5e      	ldr	r2, [pc, #376]	@ (8003ddc <__ieee754_fmod+0x1fc>)
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	dc3d      	bgt.n	8003ce2 <__ieee754_fmod+0x102>
 8003c66:	485e      	ldr	r0, [pc, #376]	@ (8003de0 <__ieee754_fmod+0x200>)
 8003c68:	4281      	cmp	r1, r0
 8003c6a:	db4a      	blt.n	8003d02 <__ieee754_fmod+0x122>
 8003c6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003c70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c74:	485a      	ldr	r0, [pc, #360]	@ (8003de0 <__ieee754_fmod+0x200>)
 8003c76:	4282      	cmp	r2, r0
 8003c78:	db57      	blt.n	8003d2a <__ieee754_fmod+0x14a>
 8003c7a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8003c7e:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8003c82:	1a89      	subs	r1, r1, r2
 8003c84:	1b98      	subs	r0, r3, r6
 8003c86:	eba4 070e 	sub.w	r7, r4, lr
 8003c8a:	2900      	cmp	r1, #0
 8003c8c:	d162      	bne.n	8003d54 <__ieee754_fmod+0x174>
 8003c8e:	4574      	cmp	r4, lr
 8003c90:	bf38      	it	cc
 8003c92:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8003c96:	2800      	cmp	r0, #0
 8003c98:	bfa4      	itt	ge
 8003c9a:	463c      	movge	r4, r7
 8003c9c:	4603      	movge	r3, r0
 8003c9e:	ea53 0104 	orrs.w	r1, r3, r4
 8003ca2:	d0c6      	beq.n	8003c32 <__ieee754_fmod+0x52>
 8003ca4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca8:	db69      	blt.n	8003d7e <__ieee754_fmod+0x19e>
 8003caa:	494d      	ldr	r1, [pc, #308]	@ (8003de0 <__ieee754_fmod+0x200>)
 8003cac:	428a      	cmp	r2, r1
 8003cae:	db6c      	blt.n	8003d8a <__ieee754_fmod+0x1aa>
 8003cb0:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8003cb4:	432b      	orrs	r3, r5
 8003cb6:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8003cba:	4620      	mov	r0, r4
 8003cbc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003cc0:	e7ab      	b.n	8003c1a <__ieee754_fmod+0x3a>
 8003cc2:	3901      	subs	r1, #1
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	e7c3      	b.n	8003c50 <__ieee754_fmod+0x70>
 8003cc8:	4945      	ldr	r1, [pc, #276]	@ (8003de0 <__ieee754_fmod+0x200>)
 8003cca:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	ddc0      	ble.n	8003c54 <__ieee754_fmod+0x74>
 8003cd2:	3901      	subs	r1, #1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	e7fa      	b.n	8003cce <__ieee754_fmod+0xee>
 8003cd8:	ea4f 5128 	mov.w	r1, r8, asr #20
 8003cdc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8003ce0:	e7b8      	b.n	8003c54 <__ieee754_fmod+0x74>
 8003ce2:	3a01      	subs	r2, #1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	e7bc      	b.n	8003c62 <__ieee754_fmod+0x82>
 8003ce8:	4a3d      	ldr	r2, [pc, #244]	@ (8003de0 <__ieee754_fmod+0x200>)
 8003cea:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	ddb9      	ble.n	8003c66 <__ieee754_fmod+0x86>
 8003cf2:	3a01      	subs	r2, #1
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	e7fa      	b.n	8003cee <__ieee754_fmod+0x10e>
 8003cf8:	ea4f 522c 	mov.w	r2, ip, asr #20
 8003cfc:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8003d00:	e7b1      	b.n	8003c66 <__ieee754_fmod+0x86>
 8003d02:	1a40      	subs	r0, r0, r1
 8003d04:	281f      	cmp	r0, #31
 8003d06:	dc0a      	bgt.n	8003d1e <__ieee754_fmod+0x13e>
 8003d08:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8003d0c:	fa08 f800 	lsl.w	r8, r8, r0
 8003d10:	fa2a f303 	lsr.w	r3, sl, r3
 8003d14:	ea43 0308 	orr.w	r3, r3, r8
 8003d18:	fa0a f400 	lsl.w	r4, sl, r0
 8003d1c:	e7aa      	b.n	8003c74 <__ieee754_fmod+0x94>
 8003d1e:	4b31      	ldr	r3, [pc, #196]	@ (8003de4 <__ieee754_fmod+0x204>)
 8003d20:	2400      	movs	r4, #0
 8003d22:	1a5b      	subs	r3, r3, r1
 8003d24:	fa0a f303 	lsl.w	r3, sl, r3
 8003d28:	e7a4      	b.n	8003c74 <__ieee754_fmod+0x94>
 8003d2a:	1a80      	subs	r0, r0, r2
 8003d2c:	281f      	cmp	r0, #31
 8003d2e:	dc0a      	bgt.n	8003d46 <__ieee754_fmod+0x166>
 8003d30:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8003d34:	fa0c fc00 	lsl.w	ip, ip, r0
 8003d38:	fa27 f606 	lsr.w	r6, r7, r6
 8003d3c:	ea46 060c 	orr.w	r6, r6, ip
 8003d40:	fa07 fe00 	lsl.w	lr, r7, r0
 8003d44:	e79d      	b.n	8003c82 <__ieee754_fmod+0xa2>
 8003d46:	4e27      	ldr	r6, [pc, #156]	@ (8003de4 <__ieee754_fmod+0x204>)
 8003d48:	f04f 0e00 	mov.w	lr, #0
 8003d4c:	1ab6      	subs	r6, r6, r2
 8003d4e:	fa07 f606 	lsl.w	r6, r7, r6
 8003d52:	e796      	b.n	8003c82 <__ieee754_fmod+0xa2>
 8003d54:	4574      	cmp	r4, lr
 8003d56:	bf38      	it	cc
 8003d58:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	da05      	bge.n	8003d6c <__ieee754_fmod+0x18c>
 8003d60:	0fe0      	lsrs	r0, r4, #31
 8003d62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003d66:	0064      	lsls	r4, r4, #1
 8003d68:	3901      	subs	r1, #1
 8003d6a:	e78b      	b.n	8003c84 <__ieee754_fmod+0xa4>
 8003d6c:	ea50 0307 	orrs.w	r3, r0, r7
 8003d70:	f43f af5f 	beq.w	8003c32 <__ieee754_fmod+0x52>
 8003d74:	0ffb      	lsrs	r3, r7, #31
 8003d76:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003d7a:	007c      	lsls	r4, r7, #1
 8003d7c:	e7f4      	b.n	8003d68 <__ieee754_fmod+0x188>
 8003d7e:	0fe1      	lsrs	r1, r4, #31
 8003d80:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003d84:	0064      	lsls	r4, r4, #1
 8003d86:	3a01      	subs	r2, #1
 8003d88:	e78c      	b.n	8003ca4 <__ieee754_fmod+0xc4>
 8003d8a:	1a89      	subs	r1, r1, r2
 8003d8c:	2914      	cmp	r1, #20
 8003d8e:	dc0a      	bgt.n	8003da6 <__ieee754_fmod+0x1c6>
 8003d90:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8003d94:	fa03 f202 	lsl.w	r2, r3, r2
 8003d98:	40cc      	lsrs	r4, r1
 8003d9a:	4322      	orrs	r2, r4
 8003d9c:	410b      	asrs	r3, r1
 8003d9e:	4610      	mov	r0, r2
 8003da0:	ea43 0105 	orr.w	r1, r3, r5
 8003da4:	e739      	b.n	8003c1a <__ieee754_fmod+0x3a>
 8003da6:	291f      	cmp	r1, #31
 8003da8:	dc07      	bgt.n	8003dba <__ieee754_fmod+0x1da>
 8003daa:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8003dae:	40cc      	lsrs	r4, r1
 8003db0:	fa03 f202 	lsl.w	r2, r3, r2
 8003db4:	4322      	orrs	r2, r4
 8003db6:	462b      	mov	r3, r5
 8003db8:	e7f1      	b.n	8003d9e <__ieee754_fmod+0x1be>
 8003dba:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8003dbe:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8003dc2:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8003dc6:	32e2      	adds	r2, #226	@ 0xe2
 8003dc8:	fa43 f202 	asr.w	r2, r3, r2
 8003dcc:	e7f3      	b.n	8003db6 <__ieee754_fmod+0x1d6>
 8003dce:	bf00      	nop
 8003dd0:	7fefffff 	.word	0x7fefffff
 8003dd4:	7ff00000 	.word	0x7ff00000
 8003dd8:	08003f30 	.word	0x08003f30
 8003ddc:	fffffbed 	.word	0xfffffbed
 8003de0:	fffffc02 	.word	0xfffffc02
 8003de4:	fffffbe2 	.word	0xfffffbe2

08003de8 <__ieee754_fmodf>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8003dee:	1e6b      	subs	r3, r5, #1
 8003df0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003df4:	460e      	mov	r6, r1
 8003df6:	d205      	bcs.n	8003e04 <__ieee754_fmodf+0x1c>
 8003df8:	f020 4700 	bic.w	r7, r0, #2147483648	@ 0x80000000
 8003dfc:	f1b7 4fff 	cmp.w	r7, #2139095040	@ 0x7f800000
 8003e00:	4603      	mov	r3, r0
 8003e02:	d305      	bcc.n	8003e10 <__ieee754_fmodf+0x28>
 8003e04:	f7fc ff6c 	bl	8000ce0 <__aeabi_fmul>
 8003e08:	4601      	mov	r1, r0
 8003e0a:	f7fd f81d 	bl	8000e48 <__aeabi_fdiv>
 8003e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e10:	42af      	cmp	r7, r5
 8003e12:	dbfc      	blt.n	8003e0e <__ieee754_fmodf+0x26>
 8003e14:	f000 4400 	and.w	r4, r0, #2147483648	@ 0x80000000
 8003e18:	d104      	bne.n	8003e24 <__ieee754_fmodf+0x3c>
 8003e1a:	4b32      	ldr	r3, [pc, #200]	@ (8003ee4 <__ieee754_fmodf+0xfc>)
 8003e1c:	0fe4      	lsrs	r4, r4, #31
 8003e1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003e22:	e7f4      	b.n	8003e0e <__ieee754_fmodf+0x26>
 8003e24:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8003e28:	d13e      	bne.n	8003ea8 <__ieee754_fmodf+0xc0>
 8003e2a:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 8003e2e:	023a      	lsls	r2, r7, #8
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	dc36      	bgt.n	8003ea2 <__ieee754_fmodf+0xba>
 8003e34:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8003e38:	d13c      	bne.n	8003eb4 <__ieee754_fmodf+0xcc>
 8003e3a:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 8003e3e:	0228      	lsls	r0, r5, #8
 8003e40:	2800      	cmp	r0, #0
 8003e42:	da34      	bge.n	8003eae <__ieee754_fmodf+0xc6>
 8003e44:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 8003e48:	bfb5      	itete	lt
 8003e4a:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 8003e4e:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 8003e52:	1a5b      	sublt	r3, r3, r1
 8003e54:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 8003e58:	bfb8      	it	lt
 8003e5a:	fa07 f303 	lsllt.w	r3, r7, r3
 8003e5e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8003e62:	bfb5      	itete	lt
 8003e64:	f06f 007d 	mvnlt.w	r0, #125	@ 0x7d
 8003e68:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8003e6c:	1a80      	sublt	r0, r0, r2
 8003e6e:	f446 0500 	orrge.w	r5, r6, #8388608	@ 0x800000
 8003e72:	bfb8      	it	lt
 8003e74:	4085      	lsllt	r5, r0
 8003e76:	1a89      	subs	r1, r1, r2
 8003e78:	1b58      	subs	r0, r3, r5
 8003e7a:	b9f1      	cbnz	r1, 8003eba <__ieee754_fmodf+0xd2>
 8003e7c:	ea13 0320 	ands.w	r3, r3, r0, asr #32
 8003e80:	bf38      	it	cc
 8003e82:	4603      	movcc	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0c8      	beq.n	8003e1a <__ieee754_fmodf+0x32>
 8003e88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e8c:	db1d      	blt.n	8003eca <__ieee754_fmodf+0xe2>
 8003e8e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8003e92:	db1d      	blt.n	8003ed0 <__ieee754_fmodf+0xe8>
 8003e94:	f5a3 0000 	sub.w	r0, r3, #8388608	@ 0x800000
 8003e98:	327f      	adds	r2, #127	@ 0x7f
 8003e9a:	4320      	orrs	r0, r4
 8003e9c:	ea40 50c2 	orr.w	r0, r0, r2, lsl #23
 8003ea0:	e7b5      	b.n	8003e0e <__ieee754_fmodf+0x26>
 8003ea2:	3901      	subs	r1, #1
 8003ea4:	0052      	lsls	r2, r2, #1
 8003ea6:	e7c3      	b.n	8003e30 <__ieee754_fmodf+0x48>
 8003ea8:	15f9      	asrs	r1, r7, #23
 8003eaa:	397f      	subs	r1, #127	@ 0x7f
 8003eac:	e7c2      	b.n	8003e34 <__ieee754_fmodf+0x4c>
 8003eae:	3a01      	subs	r2, #1
 8003eb0:	0040      	lsls	r0, r0, #1
 8003eb2:	e7c5      	b.n	8003e40 <__ieee754_fmodf+0x58>
 8003eb4:	15ea      	asrs	r2, r5, #23
 8003eb6:	3a7f      	subs	r2, #127	@ 0x7f
 8003eb8:	e7c4      	b.n	8003e44 <__ieee754_fmodf+0x5c>
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	da02      	bge.n	8003ec4 <__ieee754_fmodf+0xdc>
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	3901      	subs	r1, #1
 8003ec2:	e7d9      	b.n	8003e78 <__ieee754_fmodf+0x90>
 8003ec4:	d0a9      	beq.n	8003e1a <__ieee754_fmodf+0x32>
 8003ec6:	0043      	lsls	r3, r0, #1
 8003ec8:	e7fa      	b.n	8003ec0 <__ieee754_fmodf+0xd8>
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	3a01      	subs	r2, #1
 8003ece:	e7db      	b.n	8003e88 <__ieee754_fmodf+0xa0>
 8003ed0:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8003ed4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8003ed8:	3282      	adds	r2, #130	@ 0x82
 8003eda:	fa43 f002 	asr.w	r0, r3, r2
 8003ede:	4320      	orrs	r0, r4
 8003ee0:	e795      	b.n	8003e0e <__ieee754_fmodf+0x26>
 8003ee2:	bf00      	nop
 8003ee4:	08003f40 	.word	0x08003f40

08003ee8 <_init>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr

08003ef4 <_fini>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	bf00      	nop
 8003ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efa:	bc08      	pop	{r3}
 8003efc:	469e      	mov	lr, r3
 8003efe:	4770      	bx	lr
